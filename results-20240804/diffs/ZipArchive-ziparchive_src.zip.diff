Source package : ZipArchive
File name       : ziparchive_src.zip
Lookaside URL   : https://src.fedoraproject.org/repo/pkgs/ZipArchive/ziparchive_src.zip/md5/3d2ec49638cfbc5d57cc43b0a894573d/ziparchive_src.zip
Source URL      : http://www.artpol-software.com/Downloads/ziparchive_src.zip

source file type: /tmp/fedora-lookaside-verification--620412-UnEb0Nzwp0B1/source-ziparchive_src.zip: Zip archive data, at least v1.0 to extract, compression method=store
lookaside file type: /tmp/fedora-lookaside-verification--620412-UnEb0Nzwp0B1/lookaside-ziparchive_src.zip: Zip archive data, at least v1.0 to extract, compression method=store


diff -r source-ziparchive_src.zip-extracted/_projects/Linux/Makefile lookaside-ziparchive_src.zip-extracted/_projects/Linux/Makefile
2c2
< # Copyright (C) 2000 - 2022 Artpol Software - Tadeusz Dracz
---
> # Copyright (C) 2000 - 2011 Artpol Software - Tadeusz Dracz
diff -r source-ziparchive_src.zip-extracted/_projects/MinGW/Makefile.mingw lookaside-ziparchive_src.zip-extracted/_projects/MinGW/Makefile.mingw
2c2
< # Copyright (C) 2000 - 2022 Artpol Software - Tadeusz Dracz
---
> # Copyright (C) 2000 - 2011 Artpol Software - Tadeusz Dracz
diff -r source-ziparchive_src.zip-extracted/_projects/Readme.txt lookaside-ziparchive_src.zip-extracted/_projects/Readme.txt
2c2
< The main folder already contains Visual Studio 2022 project files by default.
\ No newline at end of file
---
> The main folder already contains Visual Studio 2010 project files by default.
\ No newline at end of file
Only in lookaside-ziparchive_src.zip-extracted/_projects: Visual Studio 2003
Only in lookaside-ziparchive_src.zip-extracted/_projects: Visual Studio 2005
Only in lookaside-ziparchive_src.zip-extracted/_projects: Visual Studio 2008
Only in lookaside-ziparchive_src.zip-extracted/_projects: Visual Studio 2010
Only in source-ziparchive_src.zip-extracted/_projects: Visual Studio 2017
Only in source-ziparchive_src.zip-extracted/_projects: Visual Studio 2019
Only in source-ziparchive_src.zip-extracted/_projects: Visual Studio 2022
Only in lookaside-ziparchive_src.zip-extracted/_projects: Visual Studio 6.0
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Aes.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/Aes.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Aes.h lookaside-ziparchive_src.zip-extracted/ZipArchive/Aes.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Appnote.txt lookaside-ziparchive_src.zip-extracted/ZipArchive/Appnote.txt
2,5c2,20
< Version: 6.3.3 
< Status: Final - replaces version 6.3.2
< Revised: September 1, 2012
< Copyright (c) 1989 - 2012 PKWARE Inc., All Rights Reserved.
---
> Version: 6.3.2 
> Revised: September 28, 2007
> Copyright (c) 1989 - 2007 PKWARE Inc., All Rights Reserved.
> 
> The use of certain technological aspects disclosed in the current
> APPNOTE is available pursuant to the below section entitled
> "Incorporating PKWARE Proprietary Technology into Your Product".
> 
> I. Purpose
> ----------
> 
> This specification is intended to define a cross-platform,
> interoperable file storage and transfer format.  Since its 
> first publication in 1989, PKWARE has remained committed to 
> ensuring the interoperability of the .ZIP file format through 
> publication and maintenance of this specification.  We trust that 
> all .ZIP compatible vendors and application developers that have 
> adopted and benefited from this format will share and support 
> this commitment to interoperability.
7,64c22
< 1.0 Introduction
< ---------------
< 
< 1.1 Purpose
< -----------
< 
<    1.1.1 This specification is intended to define a cross-platform,
<    interoperable file storage and transfer format.  Since its 
<    first publication in 1989, PKWARE, Inc. ("PKWARE") has remained 
<    committed to ensuring the interoperability of the .ZIP file 
<    format through periodic publication and maintenance of this 
<    specification.  We trust that all .ZIP compatible vendors and 
<    application developers that use and benefit from this format 
<    will share and support this commitment to interoperability.
< 
< 1.2 Scope
< ---------
< 
<    1.2.1 ZIP is one of the most widely used compressed file formats. It is 
<    universally used to aggregate, compress, and encrypt files into a single
<    interoperable container. No specific use or application need is 
<    defined by this format and no specific implementation guidance is 
<    provided. This document provides details on the storage format for 
<    creating ZIP files.  Information is provided on the records and 
<    fields that describe what a ZIP file is. 
< 
< 1.3 Trademarks
< --------------
< 
<    1.3.1 PKWARE, PKZIP, SecureZIP, and PKSFX are registered trademarks of 
<    PKWARE, Inc. in the United States and elsewhere.  PKPatchMaker, 
<    Deflate64, and ZIP64 are trademarks of PKWARE, Inc.  Other marks 
<    referenced within this document appear for identification
<    purposes only and are the property of their respective owners.
<    
< 
< 1.4 Permitted Use
< ----------------- 
< 
<    1.4.1 This document, "APPNOTE.TXT -  .ZIP File Format Specification" is the
<    exclusive property of PKWARE.  Use of the information contained in this 
<    document is permitted solely for the purpose of creating products, 
<    programs and processes that read and write files in the ZIP format
<    subject to the terms and conditions herein.
< 
<    1.4.2 Use of the content of this document within other publications is 
<    permitted only through reference to this document.  Any reproduction
<    or distribution of this document in whole or in part without prior
<    written permission from PKWARE is strictly prohibited.
< 
<    1.4.3 Certain technological components provided in this document are the 
<    patented proprietary technology of PKWARE and as such require a 
<    separate, executed license agreement from PKWARE.  Applicable 
<    components are marked with the following, or similar, statement: 
<    'Refer to the section in this document entitled  "Incorporating 
<    PKWARE Proprietary Technology into Your Product" for more information'.
< 
< 1.5 Contacting PKWARE
---
> II. Contacting PKWARE
67,69d24
<    1.5.1 If you have questions on this format, its use, or licensing, or if you 
<    wish to report defects, request changes or additions, please contact:
< 
77,104c32,33
<    1.5.2 Information about this format and copies of this document are publicly
<    available at:
< 
<      http://www.pkware.com/appnote
< 
< 1.6 Disclaimer
< --------------
< 
<    1.6.1 Although PKWARE will attempt to supply current and accurate
<    information relating to its file formats, algorithms, and the
<    subject programs, the possibility of error or omission cannot 
<    be eliminated. PKWARE therefore expressly disclaims any warranty 
<    that the information contained in the associated materials relating 
<    to the subject programs and/or the format of the files created or
<    accessed by the subject programs and/or the algorithms used by
<    the subject programs, or any other matter, is current, correct or
<    accurate as delivered.  Any risk of damage due to any possible
<    inaccurate information is assumed by the user of the information.
<    Furthermore, the information relating to the subject programs
<    and/or the file formats created or accessed by the subject
<    programs and/or the algorithms used by the subject programs is
<    subject to change without notice.
< 
< 2.0 Revisions
< --------------
< 
< 2.1 Document Status
< --------------------
---
> III. Disclaimer
> ---------------
106,120c35,55
<    2.1.1 If the STATUS of this file is marked as DRAFT, the content 
<    defines proposed revisions to this specification which may consist 
<    of changes to the ZIP format itself, or that may consist of other 
<    content changes to this document.  Versions of this document and 
<    the format in DRAFT form may be subject to modification prior to 
<    publication STATUS of FINAL. DRAFT versions are published periodically 
<    to provide notification to the ZIP community of pending changes and to 
<    provide opportunity for review and comment.
< 
<    2.1.2 Versions of this document having a STATUS of FINAL are 
<    considered to be in the final form for that version of the document 
<    and are not subject to further change until a new, higher version
<    numbered document is published.  Newer versions of this format 
<    specification are intended to remain interoperable with with all prior 
<    versions whenever technically possible.  
---
> Although PKWARE will attempt to supply current and accurate
> information relating to its file formats, algorithms, and the
> subject programs, the possibility of error or omission cannot 
> be eliminated. PKWARE therefore expressly disclaims any warranty 
> that the information contained in the associated materials relating 
> to the subject programs and/or the format of the files created or
> accessed by the subject programs and/or the algorithms used by
> the subject programs, or any other matter, is current, correct or
> accurate as delivered.  Any risk of damage due to any possible
> inaccurate information is assumed by the user of the information.
> Furthermore, the information relating to the subject programs
> and/or the file formats created or accessed by the subject
> programs and/or the algorithms used by the subject programs is
> subject to change without notice.
> 
> If the version of this file is marked as a NOTIFICATION OF CHANGE,
> the content defines an Early Feature Specification (EFS) change 
> to the .ZIP file format that may be subject to modification prior 
> to publication of the Final Feature Specification (FFS).  This
> document may also contain information on Planned Feature 
> Specifications (PFS) defining recognized future extensions.
122c57
< 2.2 Change Log
---
> IV. Change Log
125,152c60,63
<    Version       Change Description                        Date
<    -------       ------------------                       ----------
<    5.2           -Single Password Symmetric Encryption    06/02/2003
<                   storage
< 
<    6.1.0         -Smartcard compatibility                 01/20/2004
<                  -Documentation on certificate storage
< 
<    6.2.0         -Introduction of Central Directory       04/26/2004
<                   Encryption for encrypting metadata
<                  -Added OS X to Version Made By values
< 
<    6.2.1         -Added Extra Field placeholder for       04/01/2005
<                   POSZIP using ID 0x4690
< 
<                  -Clarified size field on 
<                   "zip64 end of central directory record"
< 
<    6.2.2         -Documented Final Feature Specification  01/06/2006
<                   for Strong Encryption
< 
<                  -Clarifications and typographical 
<                   corrections
< 
<    6.3.0         -Added tape positioning storage          09/29/2006
<                   parameters
< 
<                  -Expanded list of supported hash algorithms
---
> Version       Change Description                        Date
> -------       ------------------                       ----------
> 5.2           -Single Password Symmetric Encryption    06/02/2003
>                storage
154,155c65,66
<                  -Expanded list of supported compression
<                   algorithms
---
> 6.1.0         -Smartcard compatibility                 01/20/2004
>               -Documentation on certificate storage
157,158c68,70
<                  -Expanded list of supported encryption
<                   algorithms
---
> 6.2.0         -Introduction of Central Directory       04/26/2004
>                Encryption for encrypting metadata
>               -Added OS/X to Version Made By values
160,161c72,73
<                  -Added option for Unicode filename 
<                   storage
---
> 6.2.1         -Added Extra Field placeholder for       04/01/2005
>                POSZIP using ID 0x4690
163,164c75,76
<                  -Clarifications for consistent use
<                   of Data Descriptor records
---
>               -Clarified size field on 
>                "zip64 end of central directory record"
166,167c78,79
<                  -Added additional "Extra Field" 
<                   definitions
---
> 6.2.2         -Documented Final Feature Specification  01/06/2006
>                for Strong Encryption
169,170c81,82
<    6.3.1         -Corrected standard hash values for      04/11/2007
<                   SHA-256/384/512
---
>               -Clarifications and typographical 
>                corrections
172c84,85
<    6.3.2         -Added compression method 97             09/28/2007
---
> 6.3.0         -Added tape positioning storage          09/29/2006
>                parameters
174,176c87
<                  -Documented InfoZIP "Extra Field"
<                   values for UTF-8 file name and
<                   file comment storage
---
>               -Expanded list of supported hash algorithms
178,181c89,90
<    6.3.3         -Formatting changes to support           09/01/2012
<                   easier referencing of this APPNOTE
<                   from other documents and standards        
<  
---
>               -Expanded list of supported compression
>                algorithms
183,184c92,93
< 3.0 Notations
< -------------
---
>               -Expanded list of supported encryption
>                algorithms
186c95,96
<    3.1 Use of the term MUST or SHALL indicates a required element. 
---
>               -Added option for Unicode filename 
>                storage
188c98,99
<    3.2 MAY NOT or SHALL NOT indicates an element is prohibited from use. 
---
>               -Clarifications for consistent use
>                of Data Descriptor records
190c101,102
<    3.3 SHOULD indicates a RECOMMENDED element.
---
>               -Added additional "Extra Field" 
>                definitions
192,194c104,105
<    3.4 SHOULD NOT indicates an element NOT RECOMMENDED for use.
<    
<    3.5 MAY indicates an OPTIONAL element.
---
> 6.3.1         -Corrected standard hash values for      04/11/2007
>                SHA-256/384/512
195a107
> 6.3.2         -Added compression method 97             09/28/2007
197,198c109,111
< 4.0 ZIP Files
< -------------
---
>               -Documented InfoZIP "Extra Field"
>                values for UTF-8 file name and
>                file comment storage
200,201c113,114
< 4.1 What is a ZIP file
< ----------------------
---
> V. General Format of a .ZIP file
> --------------------------------
203,232c116,118
<    4.1.1 ZIP files MAY be identified by the standard .ZIP file extension 
<    although use of a file extension is not required.  Use of the 
<    extension .ZIPX is also recognized and MAY be used for ZIP files.  
<    Other common file extensions using the ZIP format include .JAR, .WAR, 
<    .DOCX, .XLXS, .PPTX, .ODT, .ODS, .ODP and others. Programs reading or 
<    writing ZIP files SHOULD rely on internal record signatures described 
<    in this document to identify files in this format.
< 
<    4.1.2 ZIP files SHOULD contain at least one file and MAY contain 
<    multiple files.  
< 
<    4.1.3 Data compression MAY be used to reduce the size of files
<    placed into a ZIP file, but is not required.  This format supports the 
<    use of multiple data compression algorithms.  When compression is used, 
<    one of the documented compression algorithms MUST be used.  Implementors 
<    are advised to experiment with their data to determine which of the 
<    available algorithms provides the best compression for their needs.
<    Compression method 8 (Deflate) is the method used by default by most 
<    ZIP compatible application programs.  
< 
< 
<    4.1.4 Data encryption MAY be used to protect files within a ZIP file. 
<    Keying methods supported for encryption within this format include
<    passwords and public/private keys.  Either MAY be used individually
<    or in combination. Encryption MAY be applied to individual files.  
<    Additional security MAY be used through the encryption of ZIP file 
<    metadata stored within the Central Directory. See the section on the 
<    Strong Encryption Specification for information. Refer to the section 
<    in this document entitled "Incorporating PKWARE Proprietary Technology 
<    into Your Product" for more information.
---
>   Files stored in arbitrary order.  Large .ZIP files can span multiple
>   volumes or be split into user-defined segment sizes. All values
>   are stored in little-endian byte order unless otherwise specified. 
234,265c120
<    4.1.5 Data integrity MUST be provided for each file using CRC32.  
<    
<    4.1.6 Additional data integrity MAY be included through the use of 
<    digital signatures.  Individual files MAY be signed with one or more 
<    digital signatures. The Central Directory, if signed, MUST use a 
<    single signature.  
< 
<    4.1.7 Files MAY be placed within a ZIP file uncompressed or stored. 
<    The term "stored" as used in the context of this document means the file 
<    is copied into the ZIP file uncompressed.  
< 
<    4.1.8 Each data file placed into a ZIP file MAY be compressed, stored, 
<    encrypted or digitally signed independent of how other data files in the 
<    same ZIP file are archived.
< 
<    4.1.9 ZIP files MAY be streamed, split into segments (on fixed or on
<    removable media) or "self-extracting".  Self-extracting ZIP 
<    files MUST include extraction code for a target platform within 
<    the ZIP file.  
< 
<    4.1.10 Extensibility is provided for platform or application specific
<    needs through extra data fields that MAY be defined for custom
<    purposes.  Extra data definitions MUST NOT conflict with existing
<    documented record definitions.  
< 
<    4.1.11 Common uses for ZIP MAY also include the use of manifest files.  
<    Manifest files store application specific information within a file stored 
<    within the ZIP file.  This manifest file SHOULD be the first file in the 
<    ZIP file. This specification does not provide any information or guidance on 
<    the use of manifest files within ZIP files.  Refer to the application developer
<    for information on using manifest files and for any additional profile
<    information on using ZIP within an application.
---
>   Overall .ZIP file format:
267c122,136
<    4.1.12 ZIP files MAY be placed within other ZIP files.
---
>     [local file header 1]
>     [file data 1]
>     [data descriptor 1]
>     . 
>     .
>     .
>     [local file header n]
>     [file data n]
>     [data descriptor n]
>     [archive decryption header] 
>     [archive extra data record] 
>     [central directory]
>     [zip64 end of central directory record]
>     [zip64 end of central directory locator] 
>     [end of central directory record]
269,270d137
< 4.2 ZIP Metadata
< ----------------
272,302c139
<    4.2.1 ZIP files are identified by metadata consisting of defined record types 
<    containing the storage information necessary for maintaining the files 
<    placed into a ZIP file.  Each record type MUST be identified using a header 
<    signature that identifies the record type.  Signature values begin with the 
<    two byte constant marker of 0x4b50, representing the characters "PK".
< 
< 
< 4.3 General Format of a .ZIP file
< ---------------------------------
< 
<    4.3.1 A ZIP file MUST contain an "end of central directory record". A ZIP 
<    file containing only an "end of central directory record" is considered an 
<    empty ZIP file.  Files may be added or replaced within a ZIP file, or deleted. 
<    A ZIP file MUST have only one "end of central directory record".  Other 
<    records defined in this specification MAY be used as needed to support 
<    storage requirements for individual ZIP files.
< 
<    4.3.2 Each file placed into a ZIP file MUST be preceeded by  a "local 
<    file header" record for that file.  Each "local file header" MUST be 
<    accompanied by a corresponding "central directory header" record within 
<    the central directory section of the ZIP file.
< 
<    4.3.3 Files MAY be stored in arbitrary order within a ZIP file.  A ZIP 
<    file MAY span multiple volumes or it MAY be split into user-defined 
<    segment sizes. All values MUST be stored in little-endian byte order unless 
<    otherwise specified in this document for a specific data element. 
< 
<    4.3.4 Compression MUST NOT be applied to a "local file header", an "encryption
<    header", or an "end of central directory record".  Individual "central 
<    directory records" must not be compressed, but the aggregate of all central
<    directory records MAY be compressed.    
---
>   A.  Local file header:
304,345c141,151
<    4.3.5 File data MAY be followed by a "data descriptor" for the file.  Data 
<    descriptors are used to facilitate ZIP file streaming.  
< 
<  
<    4.3.6 Overall .ZIP file format:
< 
<       [local file header 1]
<       [encryption header 1]
<       [file data 1]
<       [data descriptor 1]
<       . 
<       .
<       .
<       [local file header n]
<       [encryption header n]
<       [file data n]
<       [data descriptor n]
<       [archive decryption header] 
<       [archive extra data record] 
<       [central directory header 1]
<       .
<       .
<       .
<       [central directory header n]
<       [zip64 end of central directory record]
<       [zip64 end of central directory locator] 
<       [end of central directory record]
< 
< 
<    4.3.7  Local file header:
< 
<       local file header signature     4 bytes  (0x04034b50)
<       version needed to extract       2 bytes
<       general purpose bit flag        2 bytes
<       compression method              2 bytes
<       last mod file time              2 bytes
<       last mod file date              2 bytes
<       crc-32                          4 bytes
<       compressed size                 4 bytes
<       uncompressed size               4 bytes
<       file name length                2 bytes
<       extra field length              2 bytes
---
>         local file header signature     4 bytes  (0x04034b50)
>         version needed to extract       2 bytes
>         general purpose bit flag        2 bytes
>         compression method              2 bytes
>         last mod file time              2 bytes
>         last mod file date              2 bytes
>         crc-32                          4 bytes
>         compressed size                 4 bytes
>         uncompressed size               4 bytes
>         file name length                2 bytes
>         extra field length              2 bytes
347,348c153,154
<       file name (variable size)
<       extra field (variable size)
---
>         file name (variable size)
>         extra field (variable size)
350c156
<    4.3.8  File data
---
>   B.  File data
353,358c159,161
<       SHOULD be placed the compressed or stored data for the file.
<       If the file is encrypted, the encryption header for the file 
<       SHOULD be placed after the local header and before the file 
<       data. The series of [local file header][encryption header]
<       [file data][data descriptor] repeats for each file in the 
<       .ZIP archive. 
---
>       is the compressed or stored data for the file. 
>       The series of [local file header][file data][data
>       descriptor] repeats for each file in the .ZIP archive. 
360,363c163
<       Zero-byte files, directories, and other file types that 
<       contain no content MUST not include file data.
< 
<    4.3.9  Data descriptor:
---
>   C.  Data descriptor:
369c169
<       4.3.9.1 This descriptor MUST exist if bit 3 of the general
---
>       This descriptor exists only if bit 3 of the general
372c172
<       This descriptor SHOULD be used only when it was not possible to
---
>       This descriptor is used only when it was not possible to
377c177
<       4.3.9.2 When compressing files, compressed and uncompressed sizes 
---
>       When compressing files, compressed and uncompressed sizes 
379c179
<       file's size exceeds 0xFFFFFFFF.   However ZIP64 format may be 
---
>       files size exceeds 0xFFFFFFFF.   However ZIP64 format may be 
385c185
<       4.3.9.3 Although not originally assigned a signature, the value 
---
>       Although not originally assigned a signature, the value 
389c189
<       signature marking data descriptors and SHOULD account for
---
>       signature marking data descriptors and should account for
391,392c191
< 
<       4.3.9.4 When writing ZIP files, implementors SHOULD include the
---
>       When writing ZIP files, it is recommended to include the
398,399c197,198
<       4.3.9.5 An extensible data descriptor will be released in a 
<       future version of this APPNOTE.  This new record is intended to
---
>       An extensible data descriptor will be released in a future
>       version of this APPNOTE.  This new record is intended to
403,410c202,206
<       4.3.9.6 When the Central Directory Encryption method is used, 
<       the data descriptor record is not required, but MAY be used.  
<       If present, and bit 3 of the general purpose bit field is set to 
<       indicate its presence, the values in fields of the data descriptor
<       record MUST be set to binary zeros.  See the section on the Strong 
<       Encryption Specification for information. Refer to the section in 
<       this document entitled "Incorporating PKWARE Proprietary Technology 
<       into Your Product" for more information.
---
>       When the Central Directory Encryption method is used, the data
>       descriptor record is not required, but may be used.  If present,
>       and bit 3 of the general purpose bit field is set to indicate
>       its presence, the values in fields of the data descriptor
>       record should be set to binary zeros.
411a208
>   D.  Archive decryption header:  
413,415c210
<    4.3.10  Archive decryption header:  
< 
<       4.3.10.1 The Archive Decryption Header is introduced in version 6.2
---
>       The Archive Decryption Header is introduced in version 6.2
420,426c215,220
<       header MUST precede the encrypted data segment.  
< 
<       4.3.10.2 The encrypted data segment SHALL consist of the Archive 
<       extra data record (if present) and the encrypted Central Directory 
<       Structure data.  The format of this data record is identical to the 
<       Decryption header record preceding compressed file data.  If the 
<       central directory structure is encrypted, the location of the start of
---
>       header will precede the encrypted data segment.  The encrypted
>       data segment will consist of the Archive extra data record (if
>       present) and the encrypted Central Directory Structure data.
>       The format of this data record is identical to the Decryption
>       header record preceding compressed file data.  If the central 
>       directory structure is encrypted, the location of the start of
428c222
<       field in the Zip64 End of Central Directory record.  See the 
---
>       field in the Zip64 End of Central Directory record.  Refer to the 
431,432d224
<       Refer to the section in this document entitled "Incorporating 
<       PKWARE Proprietary Technology into Your Product" for more information.
435c227
<    4.3.11  Archive extra data record: 
---
>   E.  Archive extra data record: 
441,442c233,234
<       4.3.11.1 The Archive Extra Data Record is introduced in version 6.2
<       of the ZIP format specification.  This record MAY be used in support
---
>       The Archive Extra Data Record is introduced in version 6.2
>       of the ZIP format specification.  This record exists in support
445,446c237,243
<       When present, this record MUST immediately precede the central 
<       directory data structure.  
---
>       When present, this record immediately precedes the central 
>       directory data structure.  The size of this data record will be
>       included in the Size of the Central Directory field in the
>       End of Central Directory record.  If the central directory structure
>       is compressed, but not encrypted, the location of the start of
>       this data record is determined using the Start of Central Directory
>       field in the Zip64 End of Central Directory record.  
448,455d244
<       4.3.11.2 The size of this data record SHALL be included in the 
<       Size of the Central Directory field in the End of Central 
<       Directory record.  If the central directory structure is compressed, 
<       but not encrypted, the location of the start of this data record is 
<       determined using the Start of Central Directory field in the Zip64 
<       End of Central Directory record. Refer to the section in this document 
<       entitled "Incorporating PKWARE Proprietary Technology into Your 
<       Product" for more information.
457c246
<    4.3.12  Central directory structure:
---
>   F.  Central directory structure:
459c248
<       [central directory header 1]
---
>       [file header 1]
463c252
<       [central directory header n]
---
>       [file header n]
490c279
<    4.3.13 Digital signature:
---
>       Digital signature:
498c287
<       Directory Structure MAY be stored both compressed and encrypted. 
---
>       Directory Structure may be stored both compressed and encrypted. 
506c295
<    4.3.14  Zip64 end of central directory record
---
>   G.  Zip64 end of central directory record
527,529c316,318
<       4.3.14.1 The value stored into the "size of zip64 end of central
<       directory record" should be the size of the remaining
<       record and should not include the leading 12 bytes.
---
>         The value stored into the "size of zip64 end of central
>         directory record" should be the size of the remaining
>         record and should not include the leading 12 bytes.
531c320
<       Size = SizeOfFixedFields + SizeOfVariableData - 12.
---
>         Size = SizeOfFixedFields + SizeOfVariableData - 12.
533,576c322,362
<       4.3.14.2 The above record structure defines Version 1 of the 
<       zip64 end of central directory record. Version 1 was 
<       implemented in versions of this specification preceding 
<       6.2 in support of the ZIP64 large file feature. The 
<       introduction of the Central Directory Encryption feature 
<       implemented in version 6.2 as part of the Strong Encryption 
<       Specification defines Version 2 of this record structure. 
<       Refer to the section describing the Strong Encryption 
<       Specification for details on the version 2 format for 
<       this record. Refer to the section in this document entitled 
<       "Incorporating PKWARE Proprietary Technology into Your Product"
<       for more information applicable to use of Version 2 of this
<       record.
< 
<       4.3.14.3 Special purpose data MAY reside in the zip64 extensible 
<       data sector field following either a V1 or V2 version of this
<       record.  To ensure identification of this special purpose data
<       it must include an identifying header block consisting of the
<       following:
< 
<          Header ID  -  2 bytes
<          Data Size  -  4 bytes
< 
<       The Header ID field indicates the type of data that is in the 
<       data block that follows.
< 
<       Data Size identifies the number of bytes that follow for this
<       data block type.
< 
<       4.3.14.4 Multiple special purpose data blocks MAY be present. 
<       Each MUST be preceded by a Header ID and Data Size field.  Current
<       mappings of Header ID values supported in this field are as
<       defined in APPENDIX C.
< 
<    4.3.15 Zip64 end of central directory locator
< 
<       zip64 end of central dir locator 
<       signature                       4 bytes  (0x07064b50)
<       number of the disk with the
<       start of the zip64 end of 
<       central directory               4 bytes
<       relative offset of the zip64
<       end of central directory record 8 bytes
<       total number of disks           4 bytes
---
>         The above record structure defines Version 1 of the 
>         zip64 end of central directory record. Version 1 was 
>         implemented in versions of this specification preceding 
>         6.2 in support of the ZIP64 large file feature. The 
>         introduction of the Central Directory Encryption feature 
>         implemented in version 6.2 as part of the Strong Encryption 
>         Specification defines Version 2 of this record structure. 
>         Refer to the section describing the Strong Encryption 
>         Specification for details on the version 2 format for 
>         this record.
> 
>         Special purpose data may reside in the zip64 extensible data
>         sector field following either a V1 or V2 version of this
>         record.  To ensure identification of this special purpose data
>         it must include an identifying header block consisting of the
>         following:
> 
>            Header ID  -  2 bytes
>            Data Size  -  4 bytes
> 
>         The Header ID field indicates the type of data that is in the 
>         data block that follows.
> 
>         Data Size identifies the number of bytes that follow for this
>         data block type.
> 
>         Multiple special purpose data blocks may be present, but each
>         must be preceded by a Header ID and Data Size field.  Current
>         mappings of Header ID values supported in this field are as
>         defined in APPENDIX C.
> 
>   H.  Zip64 end of central directory locator
> 
>         zip64 end of central dir locator 
>         signature                       4 bytes  (0x07064b50)
>         number of the disk with the
>         start of the zip64 end of 
>         central directory               4 bytes
>         relative offset of the zip64
>         end of central directory record 8 bytes
>         total number of disks           4 bytes
578,1381c364
<    4.3.16  End of central directory record:
< 
<       end of central dir signature    4 bytes  (0x06054b50)
<       number of this disk             2 bytes
<       number of the disk with the
<       start of the central directory  2 bytes
<       total number of entries in the
<       central directory on this disk  2 bytes
<       total number of entries in
<       the central directory           2 bytes
<       size of the central directory   4 bytes
<       offset of start of central
<       directory with respect to
<       the starting disk number        4 bytes
<       .ZIP file comment length        2 bytes
<       .ZIP file comment       (variable size)
<                 
< 4.4  Explanation of fields
< --------------------------
<       
<    4.4.1 General notes on fields
< 
<       4.4.1.1  All fields unless otherwise noted are unsigned and stored
<       in Intel low-byte:high-byte, low-word:high-word order.
< 
<       4.4.1.2  String fields are not null terminated, since the length 
<       is given explicitly.
< 
<       4.4.1.3  The entries in the central directory may not necessarily
<       be in the same order that files appear in the .ZIP file.
< 
<       4.4.1.4  If one of the fields in the end of central directory
<       record is too small to hold required data, the field should be 
<       set to -1 (0xFFFF or 0xFFFFFFFF) and the ZIP64 format record 
<       should be created.
< 
<       4.4.1.5  The end of central directory record and the Zip64 end 
<       of central directory locator record MUST reside on the same 
<       disk when splitting or spanning an archive.
< 
<    4.4.2 version made by (2 bytes)
< 
<         4.4.2.1 The upper byte indicates the compatibility of the file
<         attribute information.  If the external file attributes 
<         are compatible with MS-DOS and can be read by PKZIP for 
<         DOS version 2.04g then this value will be zero.  If these 
<         attributes are not compatible, then this value will 
<         identify the host system on which the attributes are 
<         compatible.  Software can use this information to determine
<         the line record format for text files etc.  
< 
<         4.4.2.2 The current mappings are:
< 
<          0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)
<          1 - Amiga                     2 - OpenVMS
<          3 - UNIX                      4 - VM/CMS
<          5 - Atari ST                  6 - OS/2 H.P.F.S.
<          7 - Macintosh                 8 - Z-System
<          9 - CP/M                     10 - Windows NTFS
<         11 - MVS (OS/390 - Z/OS)      12 - VSE
<         13 - Acorn Risc               14 - VFAT
<         15 - alternate MVS            16 - BeOS
<         17 - Tandem                   18 - OS/400
<         19 - OS X (Darwin)            20 thru 255 - unused
< 
<         4.4.2.3 The lower byte indicates the ZIP specification version 
<         (the version of this document) supported by the software 
<         used to encode the file.  The value/10 indicates the major 
<         version number, and the value mod 10 is the minor version 
<         number.  
< 
<    4.4.3 version needed to extract (2 bytes)
< 
<         4.4.3.1 The minimum supported ZIP specification version needed 
<         to extract the file, mapped as above.  This value is based on 
<         the specific format features a ZIP program MUST support to 
<         be able to extract the file.  If multiple features are
<         applied to a file, the minimum version MUST be set to the 
<         feature having the highest value. New features or feature 
<         changes affecting the published format specification will be 
<         implemented using higher version numbers than the last 
<         published value to avoid conflict.
< 
<         4.4.3.2 Current minimum feature versions are as defined below:
< 
<          1.0 - Default value
<          1.1 - File is a volume label
<          2.0 - File is a folder (directory)
<          2.0 - File is compressed using Deflate compression
<          2.0 - File is encrypted using traditional PKWARE encryption
<          2.1 - File is compressed using Deflate64(tm)
<          2.5 - File is compressed using PKWARE DCL Implode 
<          2.7 - File is a patch data set 
<          4.5 - File uses ZIP64 format extensions
<          4.6 - File is compressed using BZIP2 compression*
<          5.0 - File is encrypted using DES
<          5.0 - File is encrypted using 3DES
<          5.0 - File is encrypted using original RC2 encryption
<          5.0 - File is encrypted using RC4 encryption
<          5.1 - File is encrypted using AES encryption
<          5.1 - File is encrypted using corrected RC2 encryption**
<          5.2 - File is encrypted using corrected RC2-64 encryption**
<          6.1 - File is encrypted using non-OAEP key wrapping***
<          6.2 - Central directory encryption
<          6.3 - File is compressed using LZMA
<          6.3 - File is compressed using PPMd+
<          6.3 - File is encrypted using Blowfish
<          6.3 - File is encrypted using Twofish
< 
<         4.4.3.3 Notes on version needed to extract 
< 
<         * Early 7.x (pre-7.2) versions of PKZIP incorrectly set the
<         version needed to extract for BZIP2 compression to be 50
<         when it should have been 46.
< 
<         ** Refer to the section on Strong Encryption Specification
<         for additional information regarding RC2 corrections.
< 
<         *** Certificate encryption using non-OAEP key wrapping is the
<         intended mode of operation for all versions beginning with 6.1.
<         Support for OAEP key wrapping MUST only be used for
<         backward compatibility when sending ZIP files to be opened by
<         versions of PKZIP older than 6.1 (5.0 or 6.0).
< 
<         + Files compressed using PPMd MUST set the version
<         needed to extract field to 6.3, however, not all ZIP 
<         programs enforce this and may be unable to decompress 
<         data files compressed using PPMd if this value is set.
< 
<         When using ZIP64 extensions, the corresponding value in the
<         zip64 end of central directory record MUST also be set.  
<         This field should be set appropriately to indicate whether 
<         Version 1 or Version 2 format is in use. 
< 
< 
<    4.4.4 general purpose bit flag: (2 bytes)
< 
<         Bit 0: If set, indicates that the file is encrypted.
< 
<         (For Method 6 - Imploding)
<         Bit 1: If the compression method used was type 6,
<                Imploding, then this bit, if set, indicates
<                an 8K sliding dictionary was used.  If clear,
<                then a 4K sliding dictionary was used.
< 
<         Bit 2: If the compression method used was type 6,
<                Imploding, then this bit, if set, indicates
<                3 Shannon-Fano trees were used to encode the
<                sliding dictionary output.  If clear, then 2
<                Shannon-Fano trees were used.
< 
<         (For Methods 8 and 9 - Deflating)
<         Bit 2  Bit 1
<           0      0    Normal (-en) compression option was used.
<           0      1    Maximum (-exx/-ex) compression option was used.
<           1      0    Fast (-ef) compression option was used.
<           1      1    Super Fast (-es) compression option was used.
< 
<         (For Method 14 - LZMA)
<         Bit 1: If the compression method used was type 14,
<                LZMA, then this bit, if set, indicates
<                an end-of-stream (EOS) marker is used to
<                mark the end of the compressed data stream.
<                If clear, then an EOS marker is not present
<                and the compressed data size must be known
<                to extract.
< 
<         Note:  Bits 1 and 2 are undefined if the compression
<                method is any other.
< 
<         Bit 3: If this bit is set, the fields crc-32, compressed 
<                size and uncompressed size are set to zero in the 
<                local header.  The correct values are put in the 
<                data descriptor immediately following the compressed
<                data.  (Note: PKZIP version 2.04g for DOS only 
<                recognizes this bit for method 8 compression, newer 
<                versions of PKZIP recognize this bit for any 
<                compression method.)
< 
<         Bit 4: Reserved for use with method 8, for enhanced
<                deflating. 
< 
<         Bit 5: If this bit is set, this indicates that the file is 
<                compressed patched data.  (Note: Requires PKZIP 
<                version 2.70 or greater)
< 
<         Bit 6: Strong encryption.  If this bit is set, you MUST
<                set the version needed to extract value to at least
<                50 and you MUST also set bit 0.  If AES encryption
<                is used, the version needed to extract value MUST 
<                be at least 51. See the section describing the Strong
<                Encryption Specification for details.  Refer to the 
<                section in this document entitled "Incorporating PKWARE 
<                Proprietary Technology into Your Product" for more 
<                information.
< 
<         Bit 7: Currently unused.
< 
<         Bit 8: Currently unused.
< 
<         Bit 9: Currently unused.
< 
<         Bit 10: Currently unused.
< 
<         Bit 11: Language encoding flag (EFS).  If this bit is set,
<                 the filename and comment fields for this file
<                 MUST be encoded using UTF-8. (see APPENDIX D)
< 
<         Bit 12: Reserved by PKWARE for enhanced compression.
< 
<         Bit 13: Set when encrypting the Central Directory to indicate 
<                 selected data values in the Local Header are masked to
<                 hide their actual values.  See the section describing 
<                 the Strong Encryption Specification for details.  Refer
<                 to the section in this document entitled "Incorporating 
<                 PKWARE Proprietary Technology into Your Product" for 
<                 more information.
< 
<         Bit 14: Reserved by PKWARE.
< 
<         Bit 15: Reserved by PKWARE.
< 
<    4.4.5 compression method: (2 bytes)
< 
<         0 - The file is stored (no compression)
<         1 - The file is Shrunk
<         2 - The file is Reduced with compression factor 1
<         3 - The file is Reduced with compression factor 2
<         4 - The file is Reduced with compression factor 3
<         5 - The file is Reduced with compression factor 4
<         6 - The file is Imploded
<         7 - Reserved for Tokenizing compression algorithm
<         8 - The file is Deflated
<         9 - Enhanced Deflating using Deflate64(tm)
<        10 - PKWARE Data Compression Library Imploding (old IBM TERSE)
<        11 - Reserved by PKWARE
<        12 - File is compressed using BZIP2 algorithm
<        13 - Reserved by PKWARE
<        14 - LZMA (EFS)
<        15 - Reserved by PKWARE
<        16 - Reserved by PKWARE
<        17 - Reserved by PKWARE
<        18 - File is compressed using IBM TERSE (new)
<        19 - IBM LZ77 z Architecture (PFS)
<        97 - WavPack compressed data
<        98 - PPMd version I, Rev 1
< 
< 
<    4.4.6 date and time fields: (2 bytes each)
< 
<        The date and time are encoded in standard MS-DOS format.
<        If input came from standard input, the date and time are
<        those at which compression was started for this data. 
<        If encrypting the central directory and general purpose bit 
<        flag 13 is set indicating masking, the value stored in the 
<        Local Header will be zero. 
< 
<    4.4.7 CRC-32: (4 bytes)
< 
<        The CRC-32 algorithm was generously contributed by
<        David Schwaderer and can be found in his excellent
<        book "C Programmers Guide to NetBIOS" published by
<        Howard W. Sams & Co. Inc.  The 'magic number' for
<        the CRC is 0xdebb20e3.  The proper CRC pre and post
<        conditioning is used, meaning that the CRC register
<        is pre-conditioned with all ones (a starting value
<        of 0xffffffff) and the value is post-conditioned by
<        taking the one's complement of the CRC residual.
<        If bit 3 of the general purpose flag is set, this
<        field is set to zero in the local header and the correct
<        value is put in the data descriptor and in the central
<        directory. When encrypting the central directory, if the
<        local header is not in ZIP64 format and general purpose 
<        bit flag 13 is set indicating masking, the value stored 
<        in the Local Header will be zero. 
< 
<    4.4.8 compressed size: (4 bytes)
<    4.4.9 uncompressed size: (4 bytes)
< 
<        The size of the file compressed (4.4.8) and uncompressed,
<        (4.4.9) respectively.  When a decryption header is present it 
<        will be placed in front of the file data and the value of the
<        compressed file size will include the bytes of the decryption
<        header.  If bit 3 of the general purpose bit flag is set, 
<        these fields are set to zero in the local header and the 
<        correct values are put in the data descriptor and
<        in the central directory.  If an archive is in ZIP64 format
<        and the value in this field is 0xFFFFFFFF, the size will be
<        in the corresponding 8 byte ZIP64 extended information 
<        extra field.  When encrypting the central directory, if the
<        local header is not in ZIP64 format and general purpose bit 
<        flag 13 is set indicating masking, the value stored for the 
<        uncompressed size in the Local Header will be zero. 
< 
<    4.4.10 file name length: (2 bytes)
<    4.4.11 extra field length: (2 bytes)
<    4.4.12 file comment length: (2 bytes)
< 
<        The length of the file name, extra field, and comment
<        fields respectively.  The combined length of any
<        directory record and these three fields should not
<        generally exceed 65,535 bytes.  If input came from standard
<        input, the file name length is set to zero.  
< 
< 
<    4.4.13 disk number start: (2 bytes)
< 
<        The number of the disk on which this file begins.  If an 
<        archive is in ZIP64 format and the value in this field is 
<        0xFFFF, the size will be in the corresponding 4 byte zip64 
<        extended information extra field.
< 
<    4.4.14 internal file attributes: (2 bytes)
< 
<        Bits 1 and 2 are reserved for use by PKWARE.
< 
<        4.4.14.1 The lowest bit of this field indicates, if set, 
<        that the file is apparently an ASCII or text file.  If not
<        set, that the file apparently contains binary data.
<        The remaining bits are unused in version 1.0.
< 
<        4.4.14.2 The 0x0002 bit of this field indicates, if set, that 
<        a 4 byte variable record length control field precedes each 
<        logical record indicating the length of the record. The 
<        record length control field is stored in little-endian byte
<        order.  This flag is independent of text control characters, 
<        and if used in conjunction with text data, includes any 
<        control characters in the total length of the record. This 
<        value is provided for mainframe data transfer support.
< 
<    4.4.15 external file attributes: (4 bytes)
< 
<        The mapping of the external attributes is
<        host-system dependent (see 'version made by').  For
<        MS-DOS, the low order byte is the MS-DOS directory
<        attribute byte.  If input came from standard input, this
<        field is set to zero.
< 
<    4.4.16 relative offset of local header: (4 bytes)
< 
<        This is the offset from the start of the first disk on
<        which this file appears, to where the local header should
<        be found.  If an archive is in ZIP64 format and the value
<        in this field is 0xFFFFFFFF, the size will be in the 
<        corresponding 8 byte zip64 extended information extra field.
< 
<    4.4.17 file name: (Variable)
< 
<        4.4.17.1 The name of the file, with optional relative path.
<        The path stored MUST not contain a drive or
<        device letter, or a leading slash.  All slashes
<        MUST be forward slashes '/' as opposed to
<        backwards slashes '\' for compatibility with Amiga
<        and UNIX file systems etc.  If input came from standard
<        input, there is no file name field.  
< 
<        4.4.17.2 If using the Central Directory Encryption Feature and 
<        general purpose bit flag 13 is set indicating masking, the file 
<        name stored in the Local Header will not be the actual file name.  
<        A masking value consisting of a unique hexadecimal value will 
<        be stored.  This value will be sequentially incremented for each 
<        file in the archive. See the section on the Strong Encryption 
<        Specification for details on retrieving the encrypted file name. 
<        Refer to the section in this document entitled "Incorporating PKWARE 
<        Proprietary Technology into Your Product" for more information.
< 
< 
<    4.4.18 file comment: (Variable)
< 
<        The comment for this file.
< 
<    4.4.19 number of this disk: (2 bytes)
< 
<        The number of this disk, which contains central
<        directory end record. If an archive is in ZIP64 format
<        and the value in this field is 0xFFFF, the size will 
<        be in the corresponding 4 byte zip64 end of central 
<        directory field.
< 
< 
<    4.4.20 number of the disk with the start of the central
<             directory: (2 bytes)
< 
<        The number of the disk on which the central
<        directory starts. If an archive is in ZIP64 format
<        and the value in this field is 0xFFFF, the size will 
<        be in the corresponding 4 byte zip64 end of central 
<        directory field.
< 
<    4.4.21 total number of entries in the central dir on 
<           this disk: (2 bytes)
< 
<       The number of central directory entries on this disk.
<       If an archive is in ZIP64 format and the value in 
<       this field is 0xFFFF, the size will be in the 
<       corresponding 8 byte zip64 end of central 
<       directory field.
< 
<    4.4.22 total number of entries in the central dir: (2 bytes)
< 
<       The total number of files in the .ZIP file. If an 
<       archive is in ZIP64 format and the value in this field
<       is 0xFFFF, the size will be in the corresponding 8 byte 
<       zip64 end of central directory field.
< 
<    4.4.23 size of the central directory: (4 bytes)
< 
<       The size (in bytes) of the entire central directory.
<       If an archive is in ZIP64 format and the value in 
<       this field is 0xFFFFFFFF, the size will be in the 
<       corresponding 8 byte zip64 end of central 
<       directory field.
< 
<    4.4.24 offset of start of central directory with respect to
<           the starting disk number:  (4 bytes)
< 
<       Offset of the start of the central directory on the
<       disk on which the central directory starts. If an 
<       archive is in ZIP64 format and the value in this 
<       field is 0xFFFFFFFF, the size will be in the 
<       corresponding 8 byte zip64 end of central 
<       directory field.
< 
<    4.4.25 .ZIP file comment length: (2 bytes)
< 
<       The length of the comment for this .ZIP file.
< 
<    4.4.26 .ZIP file comment: (Variable)
< 
<       The comment for this .ZIP file.  ZIP file comment data
<       is stored unsecured.  No encryption or data authentication
<       is applied to this area at this time.  Confidential information
<       should not be stored in this section.
< 
<    4.4.27 zip64 extensible data sector    (variable size)
< 
<       (currently reserved for use by PKWARE)
< 
< 
<    4.4.28 extra field: (Variable)
< 
<      This SHOULD be used for storage expansion.  If additional 
<      information needs to be stored within a ZIP file for special 
<      application or platform needs, it SHOULD be stored here.  
<      Programs supporting earlier versions of this specification can 
<      then safely skip the file, and find the next file or header.  
<      This field will be 0 length in version 1.0.  
< 
<      Existing extra fields are defined in the section
<      Extensible data fields that follows.
< 
< 4.5 Extensible data fields
< --------------------------
< 
<    4.5.1 In order to allow different programs and different types
<    of information to be stored in the 'extra' field in .ZIP
<    files, the following structure MUST be used for all
<    programs storing data in this field:
< 
<        header1+data1 + header2+data2 . . .
< 
<    Each header should consist of:
< 
<        Header ID - 2 bytes
<        Data Size - 2 bytes
< 
<    Note: all fields stored in Intel low-byte/high-byte order.
< 
<    The Header ID field indicates the type of data that is in
<    the following data block.
< 
<    Header IDs of 0 thru 31 are reserved for use by PKWARE.
<    The remaining IDs can be used by third party vendors for
<    proprietary usage.
< 
<    4.5.2 The current Header ID mappings defined by PKWARE are:
< 
<       0x0001        Zip64 extended information extra field
<       0x0007        AV Info
<       0x0008        Reserved for extended language encoding data (PFS)
<                     (see APPENDIX D)
<       0x0009        OS/2
<       0x000a        NTFS 
<       0x000c        OpenVMS
<       0x000d        UNIX
<       0x000e        Reserved for file stream and fork descriptors
<       0x000f        Patch Descriptor
<       0x0014        PKCS#7 Store for X.509 Certificates
<       0x0015        X.509 Certificate ID and Signature for 
<                     individual file
<       0x0016        X.509 Certificate ID for Central Directory
<       0x0017        Strong Encryption Header
<       0x0018        Record Management Controls
<       0x0019        PKCS#7 Encryption Recipient Certificate List
<       0x0065        IBM S/390 (Z390), AS/400 (I400) attributes 
<                     - uncompressed
<       0x0066        Reserved for IBM S/390 (Z390), AS/400 (I400) 
<                     attributes - compressed
<       0x4690        POSZIP 4690 (reserved) 
< 
< 
<    4.5.3 -Zip64 Extended Information Extra Field (0x0001):
< 
<       The following is the layout of the zip64 extended 
<       information "extra" block. If one of the size or
<       offset fields in the Local or Central directory
<       record is too small to hold the required data,
<       a Zip64 extended information record is created.
<       The order of the fields in the zip64 extended 
<       information record is fixed, but the fields MUST
<       only appear if the corresponding Local or Central
<       directory record field is set to 0xFFFF or 0xFFFFFFFF.
< 
<       Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value      Size       Description
<         -----      ----       -----------
< (ZIP64) 0x0001     2 bytes    Tag for this "extra" block type
<         Size       2 bytes    Size of this "extra" block
<         Original 
<         Size       8 bytes    Original uncompressed file size
<         Compressed
<         Size       8 bytes    Size of compressed data
<         Relative Header
<         Offset     8 bytes    Offset of local header record
<         Disk Start
<         Number     4 bytes    Number of the disk on which
<                               this file starts 
< 
<       This entry in the Local header MUST include BOTH original
<       and compressed file size fields. If encrypting the 
<       central directory and bit 13 of the general purpose bit
<       flag is set indicating masking, the value stored in the
<       Local Header for the original file size will be zero.
< 
< 
<    4.5.4 -OS/2 Extra Field (0x0009):
< 
<       The following is the layout of the OS/2 attributes "extra" 
<       block.  (Last Revision  09/05/95)
< 
<       Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value       Size          Description
<         -----       ----          -----------
< (OS/2)  0x0009      2 bytes       Tag for this "extra" block type
<         TSize       2 bytes       Size for the following data block
<         BSize       4 bytes       Uncompressed Block Size
<         CType       2 bytes       Compression type
<         EACRC       4 bytes       CRC value for uncompress block
<         (var)       variable      Compressed block
< 
<       The OS/2 extended attribute structure (FEA2LIST) is 
<       compressed and then stored in its entirety within this 
<       structure.  There will only ever be one "block" of data in 
<       VarFields[].
< 
<    4.5.5 -NTFS Extra Field (0x000a):
< 
<       The following is the layout of the NTFS attributes 
<       "extra" block. (Note: At this time the Mtime, Atime
<       and Ctime values MAY be used on any WIN32 system.)  
< 
<       Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value      Size       Description
<         -----      ----       -----------
< (NTFS)  0x000a     2 bytes    Tag for this "extra" block type
<         TSize      2 bytes    Size of the total "extra" block
<         Reserved   4 bytes    Reserved for future use
<         Tag1       2 bytes    NTFS attribute tag value #1
<         Size1      2 bytes    Size of attribute #1, in bytes
<         (var)      Size1      Attribute #1 data
<          .
<          .
<          .
<          TagN       2 bytes    NTFS attribute tag value #N
<          SizeN      2 bytes    Size of attribute #N, in bytes
<          (var)      SizeN      Attribute #N data
< 
<        For NTFS, values for Tag1 through TagN are as follows:
<        (currently only one set of attributes is defined for NTFS)
< 
<          Tag        Size       Description
<          -----      ----       -----------
<          0x0001     2 bytes    Tag for attribute #1 
<          Size1      2 bytes    Size of attribute #1, in bytes
<          Mtime      8 bytes    File last modification time
<          Atime      8 bytes    File last access time
<          Ctime      8 bytes    File creation time
< 
<    4.5.6 -OpenVMS Extra Field (0x000c):
< 
<        The following is the layout of the OpenVMS attributes 
<        "extra" block.
< 
<        Note: all fields stored in Intel low-byte/high-byte order.
< 
<          Value      Size       Description
<          -----      ----       -----------
<  (VMS)   0x000c     2 bytes    Tag for this "extra" block type
<          TSize      2 bytes    Size of the total "extra" block
<          CRC        4 bytes    32-bit CRC for remainder of the block
<          Tag1       2 bytes    OpenVMS attribute tag value #1
<          Size1      2 bytes    Size of attribute #1, in bytes
<          (var)      Size1      Attribute #1 data
<          .
<          .
<          .
<          TagN       2 bytes    OpenVMS attribute tag value #N
<          SizeN      2 bytes    Size of attribute #N, in bytes
<          (var)      SizeN      Attribute #N data
< 
<        OpenVMS Extra Field Rules:
< 
<           4.5.6.1. There will be one or more attributes present, which 
<           will each be preceded by the above TagX & SizeX values.  
<           These values are identical to the ATR$C_XXXX and ATR$S_XXXX 
<           constants which are defined in ATR.H under OpenVMS C.  Neither 
<           of these values will ever be zero.
< 
<           4.5.6.2. No word alignment or padding is performed.
< 
<           4.5.6.3. A well-behaved PKZIP/OpenVMS program should never produce
<           more than one sub-block with the same TagX value.  Also, there will 
<           never be more than one "extra" block of type 0x000c in a particular 
<           directory record.
< 
<    4.5.7 -UNIX Extra Field (0x000d):
< 
<         The following is the layout of the UNIX "extra" block.
<         Note: all fields are stored in Intel low-byte/high-byte 
<         order.
< 
<         Value       Size          Description
<         -----       ----          -----------
< (UNIX)  0x000d      2 bytes       Tag for this "extra" block type
<         TSize       2 bytes       Size for the following data block
<         Atime       4 bytes       File last access time
<         Mtime       4 bytes       File last modification time
<         Uid         2 bytes       File user ID
<         Gid         2 bytes       File group ID
<         (var)       variable      Variable length data field
< 
<         The variable length data field will contain file type 
<         specific data.  Currently the only values allowed are
<         the original "linked to" file names for hard or symbolic 
<         links, and the major and minor device node numbers for
<         character and block device nodes.  Since device nodes
<         cannot be either symbolic or hard links, only one set of
<         variable length data is stored.  Link files will have the
<         name of the original file stored.  This name is NOT NULL
<         terminated.  Its size can be determined by checking TSize -
<         12.  Device entries will have eight bytes stored as two 4
<         byte entries (in little endian format).  The first entry
<         will be the major device number, and the second the minor
<         device number.
<                           
<    4.5.8 -PATCH Descriptor Extra Field (0x000f):
< 
<         4.5.8.1 The following is the layout of the Patch Descriptor 
<         "extra" block.
< 
<         Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value     Size     Description
<         -----     ----     -----------
< (Patch) 0x000f    2 bytes  Tag for this "extra" block type
<         TSize     2 bytes  Size of the total "extra" block
<         Version   2 bytes  Version of the descriptor
<         Flags     4 bytes  Actions and reactions (see below) 
<         OldSize   4 bytes  Size of the file about to be patched 
<         OldCRC    4 bytes  32-bit CRC of the file to be patched 
<         NewSize   4 bytes  Size of the resulting file 
<         NewCRC    4 bytes  32-bit CRC of the resulting file 
< 
<         4.5.8.2 Actions and reactions
< 
<         Bits          Description
<         ----          ----------------
<         0             Use for auto detection
<         1             Treat as a self-patch
<         2-3           RESERVED
<         4-5           Action (see below)
<         6-7           RESERVED
<         8-9           Reaction (see below) to absent file 
<         10-11         Reaction (see below) to newer file
<         12-13         Reaction (see below) to unknown file
<         14-15         RESERVED
<         16-31         RESERVED
< 
<            4.5.8.2.1 Actions
< 
<            Action       Value
<            ------       ----- 
<            none         0
<            add          1
<            delete       2
<            patch        3
< 
<            4.5.8.2.2 Reactions
<         
<            Reaction     Value
<            --------     -----
<            ask          0
<            skip         1
<            ignore       2
<            fail         3
< 
<         4.5.8.3 Patch support is provided by PKPatchMaker(tm) technology 
<         and is covered under U.S. Patents and Patents Pending. The use or 
<         implementation in a product of certain technological aspects set
<         forth in the current APPNOTE, including those with regard to 
<         strong encryption or patching requires a license from PKWARE.  
<         Refer to the section in this document entitled "Incorporating 
<         PKWARE Proprietary Technology into Your Product" for more 
<         information. 
< 
<    4.5.9 -PKCS#7 Store for X.509 Certificates (0x0014):
< 
<         This field MUST contain information about each of the certificates 
<         files may be signed with. When the Central Directory Encryption 
<         feature is enabled for a ZIP file, this record will appear in 
<         the Archive Extra Data Record, otherwise it will appear in the 
<         first central directory record and will be ignored in any 
<         other record.  
< 
<                           
<         Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value     Size     Description
<         -----     ----     -----------
< (Store) 0x0014    2 bytes  Tag for this "extra" block type
<         TSize     2 bytes  Size of the store data
<         TData     TSize    Data about the store
< 
< 
<    4.5.10 -X.509 Certificate ID and Signature for individual file (0x0015):
< 
<         This field contains the information about which certificate in 
<         the PKCS#7 store was used to sign a particular file. It also 
<         contains the signature data. This field can appear multiple 
<         times, but can only appear once per certificate.
< 
<         Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value     Size     Description
<         -----     ----     -----------
< (CID)   0x0015    2 bytes  Tag for this "extra" block type
<         TSize     2 bytes  Size of data that follows
<         TData     TSize    Signature Data
< 
<    4.5.11 -X.509 Certificate ID and Signature for central directory (0x0016):
< 
<         This field contains the information about which certificate in 
<         the PKCS#7 store was used to sign the central directory structure.
<         When the Central Directory Encryption feature is enabled for a 
<         ZIP file, this record will appear in the Archive Extra Data Record, 
<         otherwise it will appear in the first central directory record.
< 
<         Note: all fields stored in Intel low-byte/high-byte order.
< 
<         Value     Size     Description
<         -----     ----     -----------
< (CDID)  0x0016    2 bytes  Tag for this "extra" block type
<         TSize     2 bytes  Size of data that follows
<         TData     TSize    Data
< 
<    4.5.12 -Strong Encryption Header (0x0017):
< 
<         Value     Size     Description
<         -----     ----     -----------
<         0x0017    2 bytes  Tag for this "extra" block type
<         TSize     2 bytes  Size of data that follows
<         Format    2 bytes  Format definition for this record
<         AlgID     2 bytes  Encryption algorithm identifier
<         Bitlen    2 bytes  Bit length of encryption key
<         Flags     2 bytes  Processing flags
<         CertData  TSize-8  Certificate decryption extra field data
<                            (refer to the explanation for CertData
<                             in the section describing the 
<                             Certificate Processing Method under 
<                             the Strong Encryption Specification)
< 
<         See the section describing the Strong Encryption Specification 
<         for details.  Refer to the section in this document entitled 
<         "Incorporating PKWARE Proprietary Technology into Your Product" 
<         for more information.
< 
<    4.5.13 -Record Management Controls (0x0018):
< 
<           Value     Size     Description
<           -----     ----     -----------
< (Rec-CTL) 0x0018    2 bytes  Tag for this "extra" block type
<           CSize     2 bytes  Size of total extra block data
<           Tag1      2 bytes  Record control attribute 1
<           Size1     2 bytes  Size of attribute 1, in bytes
<           Data1     Size1    Attribute 1 data
<           .
<           .
<           .
<           TagN      2 bytes  Record control attribute N
<           SizeN     2 bytes  Size of attribute N, in bytes
<           DataN     SizeN    Attribute N data
---
>   I.  End of central directory record:
1382a366,749
>         end of central dir signature    4 bytes  (0x06054b50)
>         number of this disk             2 bytes
>         number of the disk with the
>         start of the central directory  2 bytes
>         total number of entries in the
>         central directory on this disk  2 bytes
>         total number of entries in
>         the central directory           2 bytes
>         size of the central directory   4 bytes
>         offset of start of central
>         directory with respect to
>         the starting disk number        4 bytes
>         .ZIP file comment length        2 bytes
>         .ZIP file comment       (variable size)
> 
>   J.  Explanation of fields:
> 
>       version made by (2 bytes)
> 
>           The upper byte indicates the compatibility of the file
>           attribute information.  If the external file attributes 
>           are compatible with MS-DOS and can be read by PKZIP for 
>           DOS version 2.04g then this value will be zero.  If these 
>           attributes are not compatible, then this value will 
>           identify the host system on which the attributes are 
>           compatible.  Software can use this information to determine
>           the line record format for text files etc.  The current
>           mappings are:
> 
>           0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)
>           1 - Amiga                     2 - OpenVMS
>           3 - UNIX                      4 - VM/CMS
>           5 - Atari ST                  6 - OS/2 H.P.F.S.
>           7 - Macintosh                 8 - Z-System
>           9 - CP/M                     10 - Windows NTFS
>          11 - MVS (OS/390 - Z/OS)      12 - VSE
>          13 - Acorn Risc               14 - VFAT
>          15 - alternate MVS            16 - BeOS
>          17 - Tandem                   18 - OS/400
>          19 - OS/X (Darwin)            20 thru 255 - unused
> 
>           The lower byte indicates the ZIP specification version 
>           (the version of this document) supported by the software 
>           used to encode the file.  The value/10 indicates the major 
>           version number, and the value mod 10 is the minor version 
>           number.  
> 
>       version needed to extract (2 bytes)
> 
>           The minimum supported ZIP specification version needed to 
>           extract the file, mapped as above.  This value is based on 
>           the specific format features a ZIP program must support to 
>           be able to extract the file.  If multiple features are
>           applied to a file, the minimum version should be set to the 
>           feature having the highest value. New features or feature 
>           changes affecting the published format specification will be 
>           implemented using higher version numbers than the last 
>           published value to avoid conflict.
> 
>           Current minimum feature versions are as defined below:
> 
>           1.0 - Default value
>           1.1 - File is a volume label
>           2.0 - File is a folder (directory)
>           2.0 - File is compressed using Deflate compression
>           2.0 - File is encrypted using traditional PKWARE encryption
>           2.1 - File is compressed using Deflate64(tm)
>           2.5 - File is compressed using PKWARE DCL Implode 
>           2.7 - File is a patch data set 
>           4.5 - File uses ZIP64 format extensions
>           4.6 - File is compressed using BZIP2 compression*
>           5.0 - File is encrypted using DES
>           5.0 - File is encrypted using 3DES
>           5.0 - File is encrypted using original RC2 encryption
>           5.0 - File is encrypted using RC4 encryption
>           5.1 - File is encrypted using AES encryption
>           5.1 - File is encrypted using corrected RC2 encryption**
>           5.2 - File is encrypted using corrected RC2-64 encryption**
>           6.1 - File is encrypted using non-OAEP key wrapping***
>           6.2 - Central directory encryption
>           6.3 - File is compressed using LZMA
>           6.3 - File is compressed using PPMd+
>           6.3 - File is encrypted using Blowfish
>           6.3 - File is encrypted using Twofish
> 
> 
>           * Early 7.x (pre-7.2) versions of PKZIP incorrectly set the
>           version needed to extract for BZIP2 compression to be 50
>           when it should have been 46.
> 
>           ** Refer to the section on Strong Encryption Specification
>           for additional information regarding RC2 corrections.
> 
>           *** Certificate encryption using non-OAEP key wrapping is the
>           intended mode of operation for all versions beginning with 6.1.
>           Support for OAEP key wrapping should only be used for
>           backward compatibility when sending ZIP files to be opened by
>           versions of PKZIP older than 6.1 (5.0 or 6.0).
> 
>           + Files compressed using PPMd should set the version
>           needed to extract field to 6.3, however, not all ZIP 
>           programs enforce this and may be unable to decompress 
>           data files compressed using PPMd if this value is set.
> 
>           When using ZIP64 extensions, the corresponding value in the
>           zip64 end of central directory record should also be set.  
>           This field should be set appropriately to indicate whether 
>           Version 1 or Version 2 format is in use. 
> 
>       general purpose bit flag: (2 bytes)
> 
>           Bit 0: If set, indicates that the file is encrypted.
> 
>           (For Method 6 - Imploding)
>           Bit 1: If the compression method used was type 6,
>                  Imploding, then this bit, if set, indicates
>                  an 8K sliding dictionary was used.  If clear,
>                  then a 4K sliding dictionary was used.
>           Bit 2: If the compression method used was type 6,
>                  Imploding, then this bit, if set, indicates
>                  3 Shannon-Fano trees were used to encode the
>                  sliding dictionary output.  If clear, then 2
>                  Shannon-Fano trees were used.
> 
>           (For Methods 8 and 9 - Deflating)
>           Bit 2  Bit 1
>             0      0    Normal (-en) compression option was used.
>             0      1    Maximum (-exx/-ex) compression option was used.
>             1      0    Fast (-ef) compression option was used.
>             1      1    Super Fast (-es) compression option was used.
> 
>           (For Method 14 - LZMA)
>           Bit 1: If the compression method used was type 14,
>                  LZMA, then this bit, if set, indicates
>                  an end-of-stream (EOS) marker is used to
>                  mark the end of the compressed data stream.
>                  If clear, then an EOS marker is not present
>                  and the compressed data size must be known
>                  to extract.
> 
>           Note:  Bits 1 and 2 are undefined if the compression
>                  method is any other.
> 
>           Bit 3: If this bit is set, the fields crc-32, compressed 
>                  size and uncompressed size are set to zero in the 
>                  local header.  The correct values are put in the 
>                  data descriptor immediately following the compressed
>                  data.  (Note: PKZIP version 2.04g for DOS only 
>                  recognizes this bit for method 8 compression, newer 
>                  versions of PKZIP recognize this bit for any 
>                  compression method.)
> 
>           Bit 4: Reserved for use with method 8, for enhanced
>                  deflating. 
> 
>           Bit 5: If this bit is set, this indicates that the file is 
>                  compressed patched data.  (Note: Requires PKZIP 
>                  version 2.70 or greater)
> 
>           Bit 6: Strong encryption.  If this bit is set, you should
>                  set the version needed to extract value to at least
>                  50 and you must also set bit 0.  If AES encryption
>                  is used, the version needed to extract value must 
>                  be at least 51.
> 
>           Bit 7: Currently unused.
> 
>           Bit 8: Currently unused.
> 
>           Bit 9: Currently unused.
> 
>           Bit 10: Currently unused.
> 
>           Bit 11: Language encoding flag (EFS).  If this bit is set,
>                   the filename and comment fields for this file
>                   must be encoded using UTF-8. (see APPENDIX D)
> 
>           Bit 12: Reserved by PKWARE for enhanced compression.
> 
>           Bit 13: Used when encrypting the Central Directory to indicate 
>                   selected data values in the Local Header are masked to
>                   hide their actual values.  See the section describing 
>                   the Strong Encryption Specification for details.
> 
>           Bit 14: Reserved by PKWARE.
> 
>           Bit 15: Reserved by PKWARE.
> 
>       compression method: (2 bytes)
> 
>           (see accompanying documentation for algorithm
>           descriptions)
> 
>           0 - The file is stored (no compression)
>           1 - The file is Shrunk
>           2 - The file is Reduced with compression factor 1
>           3 - The file is Reduced with compression factor 2
>           4 - The file is Reduced with compression factor 3
>           5 - The file is Reduced with compression factor 4
>           6 - The file is Imploded
>           7 - Reserved for Tokenizing compression algorithm
>           8 - The file is Deflated
>           9 - Enhanced Deflating using Deflate64(tm)
>          10 - PKWARE Data Compression Library Imploding (old IBM TERSE)
>          11 - Reserved by PKWARE
>          12 - File is compressed using BZIP2 algorithm
>          13 - Reserved by PKWARE
>          14 - LZMA (EFS)
>          15 - Reserved by PKWARE
>          16 - Reserved by PKWARE
>          17 - Reserved by PKWARE
>          18 - File is compressed using IBM TERSE (new)
>          19 - IBM LZ77 z Architecture (PFS)
>          97 - WavPack compressed data
>          98 - PPMd version I, Rev 1
> 
>       date and time fields: (2 bytes each)
> 
>           The date and time are encoded in standard MS-DOS format.
>           If input came from standard input, the date and time are
>           those at which compression was started for this data. 
>           If encrypting the central directory and general purpose bit 
>           flag 13 is set indicating masking, the value stored in the 
>           Local Header will be zero. 
> 
>       CRC-32: (4 bytes)
> 
>           The CRC-32 algorithm was generously contributed by
>           David Schwaderer and can be found in his excellent
>           book "C Programmers Guide to NetBIOS" published by
>           Howard W. Sams & Co. Inc.  The 'magic number' for
>           the CRC is 0xdebb20e3.  The proper CRC pre and post
>           conditioning is used, meaning that the CRC register
>           is pre-conditioned with all ones (a starting value
>           of 0xffffffff) and the value is post-conditioned by
>           taking the one's complement of the CRC residual.
>           If bit 3 of the general purpose flag is set, this
>           field is set to zero in the local header and the correct
>           value is put in the data descriptor and in the central
>           directory. When encrypting the central directory, if the
>           local header is not in ZIP64 format and general purpose 
>           bit flag 13 is set indicating masking, the value stored 
>           in the Local Header will be zero. 
> 
>       compressed size: (4 bytes)
>       uncompressed size: (4 bytes)
> 
>           The size of the file compressed and uncompressed,
>           respectively.  When a decryption header is present it will
>           be placed in front of the file data and the value of the
>           compressed file size will include the bytes of the decryption
>           header.  If bit 3 of the general purpose bit flag is set, 
>           these fields are set to zero in the local header and the 
>           correct values are put in the data descriptor and
>           in the central directory.  If an archive is in ZIP64 format
>           and the value in this field is 0xFFFFFFFF, the size will be
>           in the corresponding 8 byte ZIP64 extended information 
>           extra field.  When encrypting the central directory, if the
>           local header is not in ZIP64 format and general purpose bit 
>           flag 13 is set indicating masking, the value stored for the 
>           uncompressed size in the Local Header will be zero. 
> 
>       file name length: (2 bytes)
>       extra field length: (2 bytes)
>       file comment length: (2 bytes)
> 
>           The length of the file name, extra field, and comment
>           fields respectively.  The combined length of any
>           directory record and these three fields should not
>           generally exceed 65,535 bytes.  If input came from standard
>           input, the file name length is set to zero.  
> 
>       disk number start: (2 bytes)
> 
>           The number of the disk on which this file begins.  If an 
>           archive is in ZIP64 format and the value in this field is 
>           0xFFFF, the size will be in the corresponding 4 byte zip64 
>           extended information extra field.
> 
>       internal file attributes: (2 bytes)
> 
>           Bits 1 and 2 are reserved for use by PKWARE.
> 
>           The lowest bit of this field indicates, if set, that
>           the file is apparently an ASCII or text file.  If not
>           set, that the file apparently contains binary data.
>           The remaining bits are unused in version 1.0.
> 
>           The 0x0002 bit of this field indicates, if set, that a 
>           4 byte variable record length control field precedes each 
>           logical record indicating the length of the record. The 
>           record length control field is stored in little-endian byte
>           order.  This flag is independent of text control characters, 
>           and if used in conjunction with text data, includes any 
>           control characters in the total length of the record. This 
>           value is provided for mainframe data transfer support.
> 
>       external file attributes: (4 bytes)
> 
>           The mapping of the external attributes is
>           host-system dependent (see 'version made by').  For
>           MS-DOS, the low order byte is the MS-DOS directory
>           attribute byte.  If input came from standard input, this
>           field is set to zero.
> 
>       relative offset of local header: (4 bytes)
> 
>           This is the offset from the start of the first disk on
>           which this file appears, to where the local header should
>           be found.  If an archive is in ZIP64 format and the value
>           in this field is 0xFFFFFFFF, the size will be in the 
>           corresponding 8 byte zip64 extended information extra field.
> 
>       file name: (Variable)
> 
>           The name of the file, with optional relative path.
>           The path stored should not contain a drive or
>           device letter, or a leading slash.  All slashes
>           should be forward slashes '/' as opposed to
>           backwards slashes '\' for compatibility with Amiga
>           and UNIX file systems etc.  If input came from standard
>           input, there is no file name field.  If encrypting
>           the central directory and general purpose bit flag 13 is set 
>           indicating masking, the file name stored in the Local Header 
>           will not be the actual file name.  A masking value consisting 
>           of a unique hexadecimal value will be stored.  This value will 
>           be sequentially incremented for each file in the archive. See
>           the section on the Strong Encryption Specification for details 
>           on retrieving the encrypted file name. 
> 
>       extra field: (Variable)
> 
>           This is for expansion.  If additional information
>           needs to be stored for special needs or for specific 
>           platforms, it should be stored here.  Earlier versions 
>           of the software can then safely skip this file, and 
>           find the next file or header.  This field will be 0 
>           length in version 1.0.
> 
>           In order to allow different programs and different types
>           of information to be stored in the 'extra' field in .ZIP
>           files, the following structure should be used for all
>           programs storing data in this field:
> 
>           header1+data1 + header2+data2 . . .
> 
>           Each header should consist of:
> 
>             Header ID - 2 bytes
>             Data Size - 2 bytes
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           The Header ID field indicates the type of data that is in
>           the following data block.
> 
>           Header ID's of 0 thru 31 are reserved for use by PKWARE.
>           The remaining ID's can be used by third party vendors for
>           proprietary usage.
> 
>           The current Header ID mappings defined by PKWARE are:
> 
>           0x0001        Zip64 extended information extra field
>           0x0007        AV Info
>           0x0008        Reserved for extended language encoding data (PFS)
>                         (see APPENDIX D)
>           0x0009        OS/2
>           0x000a        NTFS 
>           0x000c        OpenVMS
>           0x000d        UNIX
>           0x000e        Reserved for file stream and fork descriptors
>           0x000f        Patch Descriptor
>           0x0014        PKCS#7 Store for X.509 Certificates
>           0x0015        X.509 Certificate ID and Signature for 
>                         individual file
>           0x0016        X.509 Certificate ID for Central Directory
>           0x0017        Strong Encryption Header
>           0x0018        Record Management Controls
>           0x0019        PKCS#7 Encryption Recipient Certificate List
>           0x0065        IBM S/390 (Z390), AS/400 (I400) attributes 
>                         - uncompressed
>           0x0066        Reserved for IBM S/390 (Z390), AS/400 (I400) 
>                         attributes - compressed
>           0x4690        POSZIP 4690 (reserved) 
1384c751
<    4.5.14 -PKCS#7 Encryption Recipient Certificate List (0x0019): 
---
>           Third party mappings commonly used are:
1386,1446d752
<         This field MAY contain information about each of the certificates
<         used in encryption processing and it can be used to identify who is
<         allowed to decrypt encrypted files.  This field should only appear 
<         in the archive extra data record. This field is not required and 
<         serves only to aid archive modifications by preserving public 
<         encryption key data. Individual security requirements may dictate 
<         that this data be omitted to deter information exposure.
< 
<         Note: all fields stored in Intel low-byte/high-byte order.
< 
<          Value     Size     Description
<          -----     ----     -----------
< (CStore) 0x0019    2 bytes  Tag for this "extra" block type
<          TSize     2 bytes  Size of the store data
<          TData     TSize    Data about the store
< 
<          TData:
< 
<          Value     Size     Description
<          -----     ----     -----------
<          Version   2 bytes  Format version number - must 0x0001 at this time
<          CStore    (var)    PKCS#7 data blob
< 
<          See the section describing the Strong Encryption Specification 
<          for details.  Refer to the section in this document entitled 
<          "Incorporating PKWARE Proprietary Technology into Your Product" 
<          for more information.
< 
<    4.5.15 -MVS Extra Field (0x0065):
< 
<         The following is the layout of the MVS "extra" block.
<         Note: Some fields are stored in Big Endian format.
<         All text is in EBCDIC format unless otherwise specified.
< 
<         Value     Size      Description
<         -----     ----      -----------
< (MVS)   0x0065    2 bytes   Tag for this "extra" block type
<         TSize     2 bytes   Size for the following data block
<         ID        4 bytes   EBCDIC "Z390" 0xE9F3F9F0 or
<                             "T4MV" for TargetFour
<         (var)     TSize-4   Attribute data (see APPENDIX B)
< 
< 
<    4.5.16 -OS/400 Extra Field (0x0065):
< 
<         The following is the layout of the OS/400 "extra" block.
<         Note: Some fields are stored in Big Endian format.
<         All text is in EBCDIC format unless otherwise specified.
< 
<         Value     Size       Description
<         -----     ----       -----------
< (OS400) 0x0065    2 bytes    Tag for this "extra" block type
<         TSize     2 bytes    Size for the following data block
<         ID        4 bytes    EBCDIC "I400" 0xC9F4F0F0 or
<                              "T4MV" for TargetFour
<         (var)     TSize-4    Attribute data (see APPENDIX A)
< 
< 4.6 Third Party Mappings
< ------------------------
<                  
<    4.6.1 Third party mappings commonly used are:
1473,1501c779,1026
<    Detailed descriptions of Extra Fields defined by third 
<    party mappings will be documented as information on
<    these data structures is made available to PKWARE.  
<    PKWARE does not guarantee the accuracy of any published
<    third party data.
< 
<    4.6.2 Third-party Extra Fields must include a Header ID using
<    the format defined in the section of this document 
<    titled Extensible Data Fields (section 4.5).
< 
<    The Data Size field indicates the size of the following
<    data block. Programs can use this value to skip to the
<    next header block, passing over any data blocks that are
<    not of interest.
< 
<    Note: As stated above, the size of the entire .ZIP file
<          header, including the file name, comment, and extra
<          field should not exceed 64K in size.
< 
<    4.6.3 In case two different programs should appropriate the same
<    Header ID value, it is strongly recommended that each
<    program SHOULD place a unique signature of at least two bytes in
<    size (and preferably 4 bytes or bigger) at the start of
<    each data area.  Every program SHOULD verify that its
<    unique signature is present, in addition to the Header ID
<    value being correct, before assuming that it is a block of
<    known type.
<          
<    Third-party Mappings:
---
>           Detailed descriptions of Extra Fields defined by third 
>           party mappings will be documented as information on
>           these data structures is made available to PKWARE.  
>           PKWARE does not guarantee the accuracy of any published
>           third party data.
> 
>           The Data Size field indicates the size of the following
>           data block. Programs can use this value to skip to the
>           next header block, passing over any data blocks that are
>           not of interest.
> 
>           Note: As stated above, the size of the entire .ZIP file
>                 header, including the file name, comment, and extra
>                 field should not exceed 64K in size.
> 
>           In case two different programs should appropriate the same
>           Header ID value, it is strongly recommended that each
>           program place a unique signature of at least two bytes in
>           size (and preferably 4 bytes or bigger) at the start of
>           each data area.  Every program should verify that its
>           unique signature is present, in addition to the Header ID
>           value being correct, before assuming that it is a block of
>           known type.
> 
>          -Zip64 Extended Information Extra Field (0x0001):
> 
>           The following is the layout of the zip64 extended 
>           information "extra" block. If one of the size or
>           offset fields in the Local or Central directory
>           record is too small to hold the required data,
>           a Zip64 extended information record is created.
>           The order of the fields in the zip64 extended 
>           information record is fixed, but the fields will
>           only appear if the corresponding Local or Central
>           directory record field is set to 0xFFFF or 0xFFFFFFFF.
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value      Size       Description
>           -----      ----       -----------
>   (ZIP64) 0x0001     2 bytes    Tag for this "extra" block type
>           Size       2 bytes    Size of this "extra" block
>           Original 
>           Size       8 bytes    Original uncompressed file size
>           Compressed
>           Size       8 bytes    Size of compressed data
>           Relative Header
>           Offset     8 bytes    Offset of local header record
>           Disk Start
>           Number     4 bytes    Number of the disk on which
>                                 this file starts 
> 
>           This entry in the Local header must include BOTH original
>           and compressed file size fields. If encrypting the 
>           central directory and bit 13 of the general purpose bit
>           flag is set indicating masking, the value stored in the
>           Local Header for the original file size will be zero.
> 
> 
>          -OS/2 Extra Field (0x0009):
> 
>           The following is the layout of the OS/2 attributes "extra" 
>           block.  (Last Revision  09/05/95)
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value       Size          Description
>           -----       ----          -----------
>   (OS/2)  0x0009      2 bytes       Tag for this "extra" block type
>           TSize       2 bytes       Size for the following data block
>           BSize       4 bytes       Uncompressed Block Size
>           CType       2 bytes       Compression type
>           EACRC       4 bytes       CRC value for uncompress block
>           (var)       variable      Compressed block
> 
>           The OS/2 extended attribute structure (FEA2LIST) is 
>           compressed and then stored in it's entirety within this 
>           structure.  There will only ever be one "block" of data in 
>           VarFields[].
> 
>          -NTFS Extra Field (0x000a):
> 
>           The following is the layout of the NTFS attributes 
>           "extra" block. (Note: At this time the Mtime, Atime
>           and Ctime values may be used on any WIN32 system.)  
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value      Size       Description
>           -----      ----       -----------
>   (NTFS)  0x000a     2 bytes    Tag for this "extra" block type
>           TSize      2 bytes    Size of the total "extra" block
>           Reserved   4 bytes    Reserved for future use
>           Tag1       2 bytes    NTFS attribute tag value #1
>           Size1      2 bytes    Size of attribute #1, in bytes
>           (var.)     Size1      Attribute #1 data
>           .
>           .
>           .
>           TagN       2 bytes    NTFS attribute tag value #N
>           SizeN      2 bytes    Size of attribute #N, in bytes
>           (var.)     SizeN      Attribute #N data
> 
>           For NTFS, values for Tag1 through TagN are as follows:
>           (currently only one set of attributes is defined for NTFS)
> 
>           Tag        Size       Description
>           -----      ----       -----------
>           0x0001     2 bytes    Tag for attribute #1 
>           Size1      2 bytes    Size of attribute #1, in bytes
>           Mtime      8 bytes    File last modification time
>           Atime      8 bytes    File last access time
>           Ctime      8 bytes    File creation time
> 
>          -OpenVMS Extra Field (0x000c):
> 
>           The following is the layout of the OpenVMS attributes 
>           "extra" block.
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value      Size       Description
>           -----      ----       -----------
>   (VMS)   0x000c     2 bytes    Tag for this "extra" block type
>           TSize      2 bytes    Size of the total "extra" block
>           CRC        4 bytes    32-bit CRC for remainder of the block
>           Tag1       2 bytes    OpenVMS attribute tag value #1
>           Size1      2 bytes    Size of attribute #1, in bytes
>           (var.)     Size1      Attribute #1 data
>           .
>           .
>           .
>           TagN       2 bytes    OpenVMS attribute tag value #N
>           SizeN      2 bytes    Size of attribute #N, in bytes
>           (var.)     SizeN      Attribute #N data
> 
>           Rules:
> 
>           1. There will be one or more of attributes present, which 
>              will each be preceded by the above TagX & SizeX values.  
>              These values are identical to the ATR$C_XXXX and 
>              ATR$S_XXXX constants which are defined in ATR.H under 
>              OpenVMS C.  Neither of these values will ever be zero.
> 
>           2. No word alignment or padding is performed.
> 
>           3. A well-behaved PKZIP/OpenVMS program should never produce
>              more than one sub-block with the same TagX value.  Also,
>              there will never be more than one "extra" block of type
>              0x000c in a particular directory record.
> 
>          -UNIX Extra Field (0x000d):
> 
>           The following is the layout of the UNIX "extra" block.
>           Note: all fields are stored in Intel low-byte/high-byte 
>           order.
> 
>           Value       Size          Description
>           -----       ----          -----------
>   (UNIX)  0x000d      2 bytes       Tag for this "extra" block type
>           TSize       2 bytes       Size for the following data block
>           Atime       4 bytes       File last access time
>           Mtime       4 bytes       File last modification time
>           Uid         2 bytes       File user ID
>           Gid         2 bytes       File group ID
>           (var)       variable      Variable length data field
> 
>           The variable length data field will contain file type 
>           specific data.  Currently the only values allowed are
>           the original "linked to" file names for hard or symbolic 
>           links, and the major and minor device node numbers for
>           character and block device nodes.  Since device nodes
>           cannot be either symbolic or hard links, only one set of
>           variable length data is stored.  Link files will have the
>           name of the original file stored.  This name is NOT NULL
>           terminated.  Its size can be determined by checking TSize -
>           12.  Device entries will have eight bytes stored as two 4
>           byte entries (in little endian format).  The first entry
>           will be the major device number, and the second the minor
>           device number.
>           
>          -PATCH Descriptor Extra Field (0x000f):
> 
>           The following is the layout of the Patch Descriptor "extra"
>           block.
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value     Size     Description
>           -----     ----     -----------
>   (Patch) 0x000f    2 bytes  Tag for this "extra" block type
>           TSize     2 bytes  Size of the total "extra" block
>           Version   2 bytes  Version of the descriptor
>           Flags     4 bytes  Actions and reactions (see below) 
>           OldSize   4 bytes  Size of the file about to be patched 
>           OldCRC    4 bytes  32-bit CRC of the file to be patched 
>           NewSize   4 bytes  Size of the resulting file 
>           NewCRC    4 bytes  32-bit CRC of the resulting file 
> 
>           Actions and reactions
> 
>           Bits          Description
>           ----          ----------------
>           0             Use for auto detection
>           1             Treat as a self-patch
>           2-3           RESERVED
>           4-5           Action (see below)
>           6-7           RESERVED
>           8-9           Reaction (see below) to absent file 
>           10-11         Reaction (see below) to newer file
>           12-13         Reaction (see below) to unknown file
>           14-15         RESERVED
>           16-31         RESERVED
> 
>           Actions
> 
>           Action       Value
>           ------       ----- 
>           none         0
>           add          1
>           delete       2
>           patch        3
> 
>           Reactions
>  
>           Reaction     Value
>           --------     -----
>           ask          0
>           skip         1
>           ignore       2
>           fail         3
> 
>           Patch support is provided by PKPatchMaker(tm) technology and is 
>           covered under U.S. Patents and Patents Pending. The use or 
>           implementation in a product of certain technological aspects set
>           forth in the current APPNOTE, including those with regard to 
>           strong encryption, patching, or extended tape operations requires
>           a license from PKWARE.  Please contact PKWARE with regard to 
>           acquiring a license. 
> 
>          -PKCS#7 Store for X.509 Certificates (0x0014):
> 
>           This field contains information about each of the certificates 
>           files may be signed with. When the Central Directory Encryption 
>           feature is enabled for a ZIP file, this record will appear in 
>           the Archive Extra Data Record, otherwise it will appear in the 
>           first central directory record and will be ignored in any 
>           other record.
1503c1028,1126
<    4.6.4 -ZipIt Macintosh Extra Field (long) (0x2605):
---
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value     Size     Description
>           -----     ----     -----------
>   (Store) 0x0014    2 bytes  Tag for this "extra" block type
>           TSize     2 bytes  Size of the store data
>           TData     TSize    Data about the store
> 
> 
>          -X.509 Certificate ID and Signature for individual file (0x0015):
> 
>           This field contains the information about which certificate in 
>           the PKCS#7 store was used to sign a particular file. It also 
>           contains the signature data. This field can appear multiple 
>           times, but can only appear once per certificate.
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value     Size     Description
>           -----     ----     -----------
>   (CID)   0x0015    2 bytes  Tag for this "extra" block type
>           TSize     2 bytes  Size of data that follows
>           TData     TSize    Signature Data
> 
>          -X.509 Certificate ID and Signature for central directory (0x0016):
> 
>           This field contains the information about which certificate in 
>           the PKCS#7 store was used to sign the central directory structure.
>           When the Central Directory Encryption feature is enabled for a 
>           ZIP file, this record will appear in the Archive Extra Data Record, 
>           otherwise it will appear in the first central directory record.
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value     Size     Description
>           -----     ----     -----------
>   (CDID)  0x0016    2 bytes  Tag for this "extra" block type
>           TSize     2 bytes  Size of data that follows
>           TData     TSize    Data
> 
>          -Strong Encryption Header (0x0017):
> 
>           Value     Size     Description
>           -----     ----     -----------
>           0x0017    2 bytes  Tag for this "extra" block type
>           TSize     2 bytes  Size of data that follows
>           Format    2 bytes  Format definition for this record
>           AlgID     2 bytes  Encryption algorithm identifier
>           Bitlen    2 bytes  Bit length of encryption key
>           Flags     2 bytes  Processing flags
>           CertData  TSize-8  Certificate decryption extra field data
>                              (refer to the explanation for CertData
>                               in the section describing the 
>                               Certificate Processing Method under 
>                               the Strong Encryption Specification)
> 
> 
>          -Record Management Controls (0x0018):
> 
>           Value     Size     Description
>           -----     ----     -----------
> (Rec-CTL) 0x0018    2 bytes  Tag for this "extra" block type
>           CSize     2 bytes  Size of total extra block data
>           Tag1      2 bytes  Record control attribute 1
>           Size1     2 bytes  Size of attribute 1, in bytes
>           Data1     Size1    Attribute 1 data
>             .
>             .
>             .
>           TagN      2 bytes  Record control attribute N
>           SizeN     2 bytes  Size of attribute N, in bytes
>           DataN     SizeN    Attribute N data
> 
> 
>          -PKCS#7 Encryption Recipient Certificate List (0x0019): 
> 
>           This field contains information about each of the certificates
>           used in encryption processing and it can be used to identify who is
>           allowed to decrypt encrypted files.  This field should only appear 
>           in the archive extra data record. This field is not required and 
>           serves only to aide archive modifications by preserving public 
>           encryption key data. Individual security requirements may dictate 
>           that this data be omitted to deter information exposure.
> 
>           Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value     Size     Description
>           -----     ----     -----------
>  (CStore) 0x0019    2 bytes  Tag for this "extra" block type
>           TSize     2 bytes  Size of the store data
>           TData     TSize    Data about the store
> 
>           TData:
> 
>           Value     Size     Description
>           -----     ----     -----------
>           Version   2 bytes  Format version number - must 0x0001 at this time
>           CStore    (var)    PKCS#7 data blob
> 
1505,1509c1128,1166
<       The following is the layout of the ZipIt extra block 
<       for Macintosh. The local-header and central-header versions 
<       are identical. This block must be present if the file is 
<       stored MacBinary-encoded and it should not be used if the file 
<       is not stored MacBinary-encoded.
---
>          -MVS Extra Field (0x0065):
> 
>           The following is the layout of the MVS "extra" block.
>           Note: Some fields are stored in Big Endian format.
>           All text is in EBCDIC format unless otherwise specified.
> 
>           Value       Size          Description
>           -----       ----          -----------
>   (MVS)   0x0065      2 bytes       Tag for this "extra" block type
>           TSize       2 bytes       Size for the following data block
>           ID          4 bytes       EBCDIC "Z390" 0xE9F3F9F0 or
>                                     "T4MV" for TargetFour
>           (var)       TSize-4       Attribute data (see APPENDIX B)
> 
> 
>          -OS/400 Extra Field (0x0065):
> 
>           The following is the layout of the OS/400 "extra" block.
>           Note: Some fields are stored in Big Endian format.
>           All text is in EBCDIC format unless otherwise specified.
> 
>           Value       Size          Description
>           -----       ----          -----------
>   (OS400) 0x0065      2 bytes       Tag for this "extra" block type
>           TSize       2 bytes       Size for the following data block
>           ID          4 bytes       EBCDIC "I400" 0xC9F4F0F0 or
>                                     "T4MV" for TargetFour
>           (var)       TSize-4       Attribute data (see APPENDIX A)
> 
> 
>           Third-party Mappings:
>           
>          -ZipIt Macintosh Extra Field (long) (0x2605):
> 
>           The following is the layout of the ZipIt extra block 
>           for Macintosh. The local-header and central-header versions 
>           are identical. This block must be present if the file is 
>           stored MacBinary-encoded and it should not be used if the file 
>           is not stored MacBinary-encoded.
1522c1179
<    4.6.5 -ZipIt Macintosh Extra Field (short, for files) (0x2705):
---
>          -ZipIt Macintosh Extra Field (short, for files) (0x2705):
1524,1573c1181,1230
<       The following is the layout of a shortened variant of the
<       ZipIt extra block for Macintosh (without "full name" entry).
<       This variant is used by ZipIt 1.3.5 and newer for entries of
<       files (not directories) that do not have a MacBinary encoded
<       file. The local-header and central-header versions are identical.
< 
<          Value         Size        Description
<          -----         ----        -----------
<  (Mac2b) 0x2705        Short       tag for this extra block type
<          TSize         Short       total data size for this block (12)
<          "ZPIT"        beLong      extra-field signature
<          FileType      Byte[4]     four-byte Mac file type string
<          Creator       Byte[4]     four-byte Mac creator string
<          fdFlags       beShort     attributes from FInfo.frFlags,
<                                    may be omitted
<          0x0000        beShort     reserved, may be omitted
< 
< 
<    4.6.6 -ZipIt Macintosh Extra Field (short, for directories) (0x2805):
< 
<       The following is the layout of a shortened variant of the
<       ZipIt extra block for Macintosh used only for directory
<       entries. This variant is used by ZipIt 1.3.5 and newer to 
<       save some optional Mac-specific information about directories.
<       The local-header and central-header versions are identical.
< 
<          Value         Size        Description
<          -----         ----        -----------
<  (Mac2c) 0x2805        Short       tag for this extra block type
<          TSize         Short       total data size for this block (12)
<          "ZPIT"        beLong      extra-field signature
<          frFlags       beShort     attributes from DInfo.frFlags, may
<                                    be omitted
<          View          beShort     ZipIt view flag, may be omitted
< 
< 
<      The View field specifies ZipIt-internal settings as follows:
< 
<      Bits of the Flags:
<         bit 0           if set, the folder is shown expanded (open)
<                         when the archive contents are viewed in ZipIt.
<         bits 1-15       reserved, zero;
< 
< 
<    4.6.7 -FWKCS MD5 Extra Field (0x4b46):
< 
<       The FWKCS Contents_Signature System, used in
<       automatically identifying files independent of file name,
<       optionally adds and uses an extra field to support the
<       rapid creation of an enhanced contents_signature:
---
>           The following is the layout of a shortened variant of the
>           ZipIt extra block for Macintosh (without "full name" entry).
>           This variant is used by ZipIt 1.3.5 and newer for entries of
>           files (not directories) that do not have a MacBinary encoded
>           file. The local-header and central-header versions are identical.
> 
>           Value         Size        Description
>           -----         ----        -----------
>   (Mac2b) 0x2705        Short       tag for this extra block type
>           TSize         Short       total data size for this block (12)
>           "ZPIT"        beLong      extra-field signature
>           FileType      Byte[4]     four-byte Mac file type string
>           Creator       Byte[4]     four-byte Mac creator string
>           fdFlags       beShort     attributes from FInfo.frFlags,
>                                     may be omitted
>           0x0000        beShort     reserved, may be omitted
> 
> 
>          -ZipIt Macintosh Extra Field (short, for directories) (0x2805):
> 
>           The following is the layout of a shortened variant of the
>           ZipIt extra block for Macintosh used only for directory
>           entries. This variant is used by ZipIt 1.3.5 and newer to 
>           save some optional Mac-specific information about directories.
>           The local-header and central-header versions are identical.
> 
>           Value         Size        Description
>           -----         ----        -----------
>   (Mac2c) 0x2805        Short       tag for this extra block type
>           TSize         Short       total data size for this block (12)
>           "ZPIT"        beLong      extra-field signature
>           frFlags       beShort     attributes from DInfo.frFlags, may
>                                     be omitted
>           View          beShort     ZipIt view flag, may be omitted
> 
> 
>           The View field specifies ZipIt-internal settings as follows:
> 
>           Bits of the Flags:
>               bit 0           if set, the folder is shown expanded (open)
>                               when the archive contents are viewed in ZipIt.
>               bits 1-15       reserved, zero;
> 
> 
>          -FWKCS MD5 Extra Field (0x4b46):
> 
>           The FWKCS Contents_Signature System, used in
>           automatically identifying files independent of file name,
>           optionally adds and uses an extra field to support the
>           rapid creation of an enhanced contents_signature:
1581,1683c1238,1340
<       When FWKCS revises a .ZIP file central directory to add
<       this extra field for a file, it also replaces the
<       central directory entry for that file's uncompressed
<       file length with a measured value.
< 
<       FWKCS provides an option to strip this extra field, if
<       present, from a .ZIP file central directory. In adding
<       this extra field, FWKCS preserves .ZIP file Authenticity
<       Verification; if stripping this extra field, FWKCS
<       preserves all versions of AV through PKZIP version 2.04g.
< 
<       FWKCS, and FWKCS Contents_Signature System, are
<       trademarks of Frederick W. Kantor.
< 
<       (1) R. Rivest, RFC1321.TXT, MIT Laboratory for Computer
<           Science and RSA Data Security, Inc., April 1992.
<           ll.76-77: "The MD5 algorithm is being placed in the
<           public domain for review and possible adoption as a
<           standard."
< 
< 
<    4.6.8 -Info-ZIP Unicode Comment Extra Field (0x6375):
< 
<       Stores the UTF-8 version of the file comment as stored in the
<       central directory header. (Last Revision 20070912)
< 
<          Value         Size        Description
<          -----         ----        -----------
<   (UCom) 0x6375        Short       tag for this extra block type ("uc")
<          TSize         Short       total data size for this block
<          Version       1 byte      version of this extra field, currently 1
<          ComCRC32      4 bytes     Comment Field CRC32 Checksum
<          UnicodeCom    Variable    UTF-8 version of the entry comment
< 
<        Currently Version is set to the number 1.  If there is a need
<        to change this field, the version will be incremented.  Changes
<        may not be backward compatible so this extra field should not be
<        used if the version is not recognized.
< 
<        The ComCRC32 is the standard zip CRC32 checksum of the File Comment
<        field in the central directory header.  This is used to verify that
<        the comment field has not changed since the Unicode Comment extra field
<        was created.  This can happen if a utility changes the File Comment 
<        field but does not update the UTF-8 Comment extra field.  If the CRC 
<        check fails, this Unicode Comment extra field should be ignored and 
<        the File Comment field in the header should be used instead.
< 
<        The UnicodeCom field is the UTF-8 version of the File Comment field
<        in the header.  As UnicodeCom is defined to be UTF-8, no UTF-8 byte
<        order mark (BOM) is used.  The length of this field is determined by
<        subtracting the size of the previous fields from TSize.  If both the
<        File Name and Comment fields are UTF-8, the new General Purpose Bit
<        Flag, bit 11 (Language encoding flag (EFS)), can be used to indicate
<        both the header File Name and Comment fields are UTF-8 and, in this
<        case, the Unicode Path and Unicode Comment extra fields are not
<        needed and should not be created.  Note that, for backward
<        compatibility, bit 11 should only be used if the native character set
<        of the paths and comments being zipped up are already in UTF-8. It is
<        expected that the same file comment storage method, either general
<        purpose bit 11 or extra fields, be used in both the Local and Central
<        Directory Header for a file.
< 
< 
<    4.6.9 -Info-ZIP Unicode Path Extra Field (0x7075):
< 
<        Stores the UTF-8 version of the file name field as stored in the
<        local header and central directory header. (Last Revision 20070912)
< 
<          Value         Size        Description
<          -----         ----        -----------
<  (UPath) 0x7075        Short       tag for this extra block type ("up")
<          TSize         Short       total data size for this block
<          Version       1 byte      version of this extra field, currently 1
<          NameCRC32     4 bytes     File Name Field CRC32 Checksum
<          UnicodeName   Variable    UTF-8 version of the entry File Name
< 
<       Currently Version is set to the number 1.  If there is a need
<       to change this field, the version will be incremented.  Changes
<       may not be backward compatible so this extra field should not be
<       used if the version is not recognized.
< 
<       The NameCRC32 is the standard zip CRC32 checksum of the File Name
<       field in the header.  This is used to verify that the header
<       File Name field has not changed since the Unicode Path extra field
<       was created.  This can happen if a utility renames the File Name but
<       does not update the UTF-8 path extra field.  If the CRC check fails,
<       this UTF-8 Path Extra Field should be ignored and the File Name field
<       in the header should be used instead.
< 
<       The UnicodeName is the UTF-8 version of the contents of the File Name
<       field in the header.  As UnicodeName is defined to be UTF-8, no UTF-8
<       byte order mark (BOM) is used.  The length of this field is determined
<       by subtracting the size of the previous fields from TSize.  If both
<       the File Name and Comment fields are UTF-8, the new General Purpose
<       Bit Flag, bit 11 (Language encoding flag (EFS)), can be used to
<       indicate that both the header File Name and Comment fields are UTF-8
<       and, in this case, the Unicode Path and Unicode Comment extra fields
<       are not needed and should not be created.  Note that, for backward
<       compatibility, bit 11 should only be used if the native character set
<       of the paths and comments being zipped up are already in UTF-8. It is
<       expected that the same file name storage method, either general
<       purpose bit 11 or extra fields, be used in both the Local and Central
<       Directory Header for a file.
---
>           When FWKCS revises a .ZIP file central directory to add
>           this extra field for a file, it also replaces the
>           central directory entry for that file's uncompressed
>           file length with a measured value.
> 
>           FWKCS provides an option to strip this extra field, if
>           present, from a .ZIP file central directory. In adding
>           this extra field, FWKCS preserves .ZIP file Authenticity
>           Verification; if stripping this extra field, FWKCS
>           preserves all versions of AV through PKZIP version 2.04g.
> 
>           FWKCS, and FWKCS Contents_Signature System, are
>           trademarks of Frederick W. Kantor.
> 
>           (1) R. Rivest, RFC1321.TXT, MIT Laboratory for Computer
>               Science and RSA Data Security, Inc., April 1992.
>               ll.76-77: "The MD5 algorithm is being placed in the
>               public domain for review and possible adoption as a
>               standard."
> 
> 
>          -Info-ZIP Unicode Comment Extra Field (0x6375):
> 
>           Stores the UTF-8 version of the file comment as stored in the
>           central directory header. (Last Revision 20070912)
> 
>           Value         Size        Description
>           -----         ----        -----------
>    (UCom) 0x6375        Short       tag for this extra block type ("uc")
>           TSize         Short       total data size for this block
>           Version       1 byte      version of this extra field, currently 1
>           ComCRC32      4 bytes     Comment Field CRC32 Checksum
>           UnicodeCom    Variable    UTF-8 version of the entry comment
> 
>           Currently Version is set to the number 1.  If there is a need
>           to change this field, the version will be incremented.  Changes
>           may not be backward compatible so this extra field should not be
>           used if the version is not recognized.
> 
>           The ComCRC32 is the standard zip CRC32 checksum of the File Comment
>           field in the central directory header.  This is used to verify that
>           the comment field has not changed since the Unicode Comment extra field
>           was created.  This can happen if a utility changes the File Comment 
>           field but does not update the UTF-8 Comment extra field.  If the CRC 
>           check fails, this Unicode Comment extra field should be ignored and 
>           the File Comment field in the header should be used instead.
> 
>           The UnicodeCom field is the UTF-8 version of the File Comment field
>           in the header.  As UnicodeCom is defined to be UTF-8, no UTF-8 byte
>           order mark (BOM) is used.  The length of this field is determined by
>           subtracting the size of the previous fields from TSize.  If both the
>           File Name and Comment fields are UTF-8, the new General Purpose Bit
>           Flag, bit 11 (Language encoding flag (EFS)), can be used to indicate
>           both the header File Name and Comment fields are UTF-8 and, in this
>           case, the Unicode Path and Unicode Comment extra fields are not
>           needed and should not be created.  Note that, for backward
>           compatibility, bit 11 should only be used if the native character set
>           of the paths and comments being zipped up are already in UTF-8. It is
>           expected that the same file comment storage method, either general
>           purpose bit 11 or extra fields, be used in both the Local and Central
>           Directory Header for a file.
> 
> 
>          -Info-ZIP Unicode Path Extra Field (0x7075):
> 
>           Stores the UTF-8 version of the file name field as stored in the
>           local header and central directory header. (Last Revision 20070912)
> 
>           Value         Size        Description
>           -----         ----        -----------
>   (UPath) 0x7075        Short       tag for this extra block type ("up")
>           TSize         Short       total data size for this block
>           Version       1 byte      version of this extra field, currently 1
>           NameCRC32     4 bytes     File Name Field CRC32 Checksum
>           UnicodeName   Variable    UTF-8 version of the entry File Name
> 
>           Currently Version is set to the number 1.  If there is a need
>           to change this field, the version will be incremented.  Changes
>           may not be backward compatible so this extra field should not be
>           used if the version is not recognized.
> 
>           The NameCRC32 is the standard zip CRC32 checksum of the File Name
>           field in the header.  This is used to verify that the header
>           File Name field has not changed since the Unicode Path extra field
>           was created.  This can happen if a utility renames the File Name but
>           does not update the UTF-8 path extra field.  If the CRC check fails,
>           this UTF-8 Path Extra Field should be ignored and the File Name field
>           in the header should be used instead.
> 
>           The UnicodeName is the UTF-8 version of the contents of the File Name
>           field in the header.  As UnicodeName is defined to be UTF-8, no UTF-8
>           byte order mark (BOM) is used.  The length of this field is determined
>           by subtracting the size of the previous fields from TSize.  If both
>           the File Name and Comment fields are UTF-8, the new General Purpose
>           Bit Flag, bit 11 (Language encoding flag (EFS)), can be used to
>           indicate that both the header File Name and Comment fields are UTF-8
>           and, in this case, the Unicode Path and Unicode Comment extra fields
>           are not needed and should not be created.  Note that, for backward
>           compatibility, bit 11 should only be used if the native character set
>           of the paths and comments being zipped up are already in UTF-8. It is
>           expected that the same file name storage method, either general
>           purpose bit 11 or extra fields, be used in both the Local and Central
>           Directory Header for a file.
1686c1343
<    4.6.10 -Microsoft Open Packaging Growth Hint (0xa220):
---
>         -Microsoft Open Packaging Growth Hint (0xa220):
1696,1697d1352
< 4.7 Manifest Files
< ------------------
1699,1714c1354
<     4.7.1 Applications using ZIP files may have a need for additional 
<     information that must be included with the files placed into
<     a ZIP file. Application specific information that cannot be
<     stored using the defined ZIP storage records SHOULD be stored 
<     using the extensible Extra Field convention defined in this 
<     document.  However, some applications may use a manifest
<     file as a means for storing additional information.  One
<     example is the META-INF/MANIFEST.MF file used in ZIP formatted
<     files having the .JAR extension (JAR files).  
< 
<     4.7.2 A manifest file is a file created for the application process
<     that requires this information.  A manifest file MAY be of any 
<     file type required by the defining application process.  It is 
<     placed within the same ZIP file as files to which this information 
<     applies. By convention, this file is typically the first file placed
<     into the ZIP file and it may include a defined directory path.
---
>       file comment: (Variable)
1716,1717c1356
<     4.7.3 Manifest files may be compressed or encrypted as needed for
<     application processing of the files inside the ZIP files.
---
>           The comment for this file.
1719c1358
<     Manifest files are outside of the scope of this specification.
---
>       number of this disk: (2 bytes)
1720a1360,1364
>           The number of this disk, which contains central
>           directory end record. If an archive is in ZIP64 format
>           and the value in this field is 0xFFFF, the size will 
>           be in the corresponding 4 byte zip64 end of central 
>           directory field.
1722,1723d1365
< 5.0 Explanation of compression methods
< --------------------------------------
1724a1367,1408
>       number of the disk with the start of the central
>       directory: (2 bytes)
> 
>           The number of the disk on which the central
>           directory starts. If an archive is in ZIP64 format
>           and the value in this field is 0xFFFF, the size will 
>           be in the corresponding 4 byte zip64 end of central 
>           directory field.
> 
>       total number of entries in the central dir on 
>       this disk: (2 bytes)
> 
>           The number of central directory entries on this disk.
>           If an archive is in ZIP64 format and the value in 
>           this field is 0xFFFF, the size will be in the 
>           corresponding 8 byte zip64 end of central 
>           directory field.
> 
>       total number of entries in the central dir: (2 bytes)
> 
>           The total number of files in the .ZIP file. If an 
>           archive is in ZIP64 format and the value in this field
>           is 0xFFFF, the size will be in the corresponding 8 byte 
>           zip64 end of central directory field.
> 
>       size of the central directory: (4 bytes)
> 
>           The size (in bytes) of the entire central directory.
>           If an archive is in ZIP64 format and the value in 
>           this field is 0xFFFFFFFF, the size will be in the 
>           corresponding 8 byte zip64 end of central 
>           directory field.
> 
>       offset of start of central directory with respect to
>       the starting disk number:  (4 bytes)
> 
>           Offset of the start of the central directory on the
>           disk on which the central directory starts. If an 
>           archive is in ZIP64 format and the value in this 
>           field is 0xFFFFFFFF, the size will be in the 
>           corresponding 8 byte zip64 end of central 
>           directory field.
1726,1727c1410
< 5.1 UnShrinking - Method 1
< --------------------------
---
>       .ZIP file comment length: (2 bytes)
1729,1732c1412
<     5.1.1 Shrinking is a Dynamic Ziv-Lempel-Welch compression algorithm
<     with partial clearing.  The initial code size is 9 bits, and the 
<     maximum code size is 13 bits.  Shrinking differs from conventional 
<     Dynamic Ziv-Lempel-Welch implementations in several respects:
---
>           The length of the comment for this .ZIP file.
1734,1735c1414,1546
<     5.1.2 The code size is controlled by the compressor, and is 
<     not automatically increased when codes larger than the current
---
>       .ZIP file comment: (Variable)
> 
>           The comment for this .ZIP file.  ZIP file comment data
>           is stored unsecured.  No encryption or data authentication
>           is applied to this area at this time.  Confidential information
>           should not be stored in this section.
> 
>       zip64 extensible data sector    (variable size)
> 
>           (currently reserved for use by PKWARE)
> 
> 
>   K.  Splitting and Spanning ZIP files
> 
>           Spanning is the process of segmenting a ZIP file across 
>           multiple removable media. This support has typically only 
>           been provided for DOS formatted floppy diskettes. 
> 
>           File splitting is a newer derivative of spanning.  
>           Splitting follows the same segmentation process as
>           spanning, however, it does not require writing each
>           segment to a unique removable medium and instead supports
>           placing all pieces onto local or non-removable locations
>           such as file systems, local drives, folders, etc...
> 
>           A key difference between spanned and split ZIP files is
>           that all pieces of a spanned ZIP file have the same name.  
>           Since each piece is written to a separate volume, no name 
>           collisions occur and each segment can reuse the original 
>           .ZIP file name given to the archive.
> 
>           Sequence ordering for DOS spanned archives uses the DOS 
>           volume label to determine segment numbers.  Volume labels
>           for each segment are written using the form PKBACK#xxx, 
>           where xxx is the segment number written as a decimal 
>           value from 001 - nnn.
> 
>           Split ZIP files are typically written to the same location
>           and are subject to name collisions if the spanned name
>           format is used since each segment will reside on the same 
>           drive. To avoid name collisions, split archives are named 
>           as follows.
> 
>           Segment 1   = filename.z01
>           Segment n-1 = filename.z(n-1)
>           Segment n   = filename.zip
> 
>           The .ZIP extension is used on the last segment to support
>           quickly reading the central directory.  The segment number
>           n should be a decimal value.
> 
>           Spanned ZIP files may be PKSFX Self-extracting ZIP files.
>           PKSFX files may also be split, however, in this case
>           the first segment must be named filename.exe.  The first
>           segment of a split PKSFX archive must be large enough to
>           include the entire executable program.
> 
>           Capacities for split archives are as follows.
> 
>           Maximum number of segments = 4,294,967,295 - 1
>           Maximum .ZIP segment size = 4,294,967,295 bytes
>           Minimum segment size = 64K
>           Maximum PKSFX segment size = 2,147,483,647 bytes
>           
>           Segment sizes may be different however by convention, all 
>           segment sizes should be the same with the exception of the 
>           last, which may be smaller.  Local and central directory 
>           header records must never be split across a segment boundary. 
>           When writing a header record, if the number of bytes remaining 
>           within a segment is less than the size of the header record,
>           end the current segment and write the header at the start
>           of the next segment.  The central directory may span segment
>           boundaries, but no single record in the central directory
>           should be split across segments.
> 
>           Spanned/Split archives created using PKZIP for Windows
>           (V2.50 or greater), PKZIP Command Line (V2.50 or greater),
>           or PKZIP Explorer will include a special spanning 
>           signature as the first 4 bytes of the first segment of
>           the archive.  This signature (0x08074b50) will be 
>           followed immediately by the local header signature for
>           the first file in the archive.  
> 
>           A special spanning marker may also appear in spanned/split 
>           archives if the spanning or splitting process starts but 
>           only requires one segment.  In this case the 0x08074b50 
>           signature will be replaced with the temporary spanning 
>           marker signature of 0x30304b50.  Split archives can
>           only be uncompressed by other versions of PKZIP that
>           know how to create a split archive.
> 
>           The signature value 0x08074b50 is also used by some
>           ZIP implementations as a marker for the Data Descriptor 
>           record.  Conflict in this alternate assignment can be
>           avoided by ensuring the position of the signature
>           within the ZIP file to determine the use for which it
>           is intended.  
> 
>   L.  General notes:
> 
>       1)  All fields unless otherwise noted are unsigned and stored
>           in Intel low-byte:high-byte, low-word:high-word order.
> 
>       2)  String fields are not null terminated, since the
>           length is given explicitly.
> 
>       3)  The entries in the central directory may not necessarily
>           be in the same order that files appear in the .ZIP file.
> 
>       4)  If one of the fields in the end of central directory
>           record is too small to hold required data, the field
>           should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
>           ZIP64 format record should be created.
> 
>       5)  The end of central directory record and the
>           Zip64 end of central directory locator record must
>           reside on the same disk when splitting or spanning
>           an archive.
> 
> VI. Explanation of compression methods
> --------------------------------------
> 
> UnShrinking - Method 1
> ----------------------
> 
> Shrinking is a Dynamic Ziv-Lempel-Welch compression algorithm
> with partial clearing.  The initial code size is 9 bits, and
> the maximum code size is 13 bits.  Shrinking differs from
> conventional Dynamic Ziv-Lempel-Welch implementations in several
> respects:
> 
> 1)  The code size is controlled by the compressor, and is not
>     automatically increased when codes larger than the current
1747c1558
<     5.1.3 When the table becomes full, total clearing is not
---
> 2)  When the table becomes full, total clearing is not
1757,1758c1568,1569
< 5.2 Expanding - Methods 2-5
< ---------------------------
---
> Expanding - Methods 2-5
> -----------------------
1760,1788c1571,1604
<     5.2.1 The Reducing algorithm is actually a combination of two
<     distinct algorithms.  The first algorithm compresses repeated
<     byte sequences, and the second algorithm takes the compressed
<     stream from the first algorithm and applies a probabilistic
<     compression method.
< 
<     5.2.2 The probabilistic compression stores an array of 'follower
<     sets' S(j), for j=0 to 255, corresponding to each possible
<     ASCII character.  Each set contains between 0 and 32
<     characters, to be denoted as S(j)[0],...,S(j)[m], where m<32.
<     The sets are stored at the beginning of the data area for a
<     Reduced file, in reverse order, with S(255) first, and S(0)
<     last.
< 
<     5.2.3 The sets are encoded as { N(j), S(j)[0],...,S(j)[N(j)-1] },
<     where N(j) is the size of set S(j).  N(j) can be 0, in which
<     case the follower set for S(j) is empty.  Each N(j) value is
<     encoded in 6 bits, followed by N(j) eight bit character values
<     corresponding to S(j)[0] to S(j)[N(j)-1] respectively.  If
<     N(j) is 0, then no values for S(j) are stored, and the value
<     for N(j-1) immediately follows.
< 
<     5.2.4 Immediately after the follower sets, is the compressed data
<     stream.  The compressed data stream can be interpreted for the
<     probabilistic decompression as follows:
< 
<     let Last-Character <- 0.
<     loop until done
<         if the follower set S(Last-Character) is empty then
---
> The Reducing algorithm is actually a combination of two
> distinct algorithms.  The first algorithm compresses repeated
> byte sequences, and the second algorithm takes the compressed
> stream from the first algorithm and applies a probabilistic
> compression method.
> 
> The probabilistic compression stores an array of 'follower
> sets' S(j), for j=0 to 255, corresponding to each possible
> ASCII character.  Each set contains between 0 and 32
> characters, to be denoted as S(j)[0],...,S(j)[m], where m<32.
> The sets are stored at the beginning of the data area for a
> Reduced file, in reverse order, with S(255) first, and S(0)
> last.
> 
> The sets are encoded as { N(j), S(j)[0],...,S(j)[N(j)-1] },
> where N(j) is the size of set S(j).  N(j) can be 0, in which
> case the follower set for S(j) is empty.  Each N(j) value is
> encoded in 6 bits, followed by N(j) eight bit character values
> corresponding to S(j)[0] to S(j)[N(j)-1] respectively.  If
> N(j) is 0, then no values for S(j) are stored, and the value
> for N(j-1) immediately follows.
> 
> Immediately after the follower sets, is the compressed data
> stream.  The compressed data stream can be interpreted for the
> probabilistic decompression as follows:
> 
> let Last-Character <- 0.
> loop until done
>     if the follower set S(Last-Character) is empty then
>         read 8 bits from the input stream, and copy this
>         value to the output stream.
>     otherwise if the follower set S(Last-Character) is non-empty then
>         read 1 bit from the input stream.
>         if this bit is not zero then
1791,1800c1607,1671
<         otherwise if the follower set S(Last-Character) is non-empty then
<             read 1 bit from the input stream.
<             if this bit is not zero then
<                 read 8 bits from the input stream, and copy this
<                 value to the output stream.
<             otherwise if this bit is zero then
<                 read B(N(Last-Character)) bits from the input
<                 stream, and assign this value to I.
<                 Copy the value of S(Last-Character)[I] to the
<                 output stream.
---
>         otherwise if this bit is zero then
>             read B(N(Last-Character)) bits from the input
>             stream, and assign this value to I.
>             Copy the value of S(Last-Character)[I] to the
>             output stream.
> 
>     assign the last value placed on the output stream to
>     Last-Character.
> end loop
> 
> B(N(j)) is defined as the minimal number of bits required to
> encode the value N(j)-1.
> 
> The decompressed stream from above can then be expanded to
> re-create the original file as follows:
> 
> let State <- 0.
> 
> loop until done
>     read 8 bits from the input stream into C.
>     case State of
>         0:  if C is not equal to DLE (144 decimal) then
>                 copy C to the output stream.
>             otherwise if C is equal to DLE then
>                 let State <- 1.
> 
>         1:  if C is non-zero then
>                 let V <- C.
>                 let Len <- L(V)
>                 let State <- F(Len).
>             otherwise if C is zero then
>                 copy the value 144 (decimal) to the output stream.
>                 let State <- 0
> 
>         2:  let Len <- Len + C
>             let State <- 3.
> 
>         3:  move backwards D(V,C) bytes in the output stream
>             (if this position is before the start of the output
>             stream, then assume that all the data before the
>             start of the output stream is filled with zeros).
>             copy Len+3 bytes from this position to the output stream.
>             let State <- 0.
>     end case
> end loop
> 
> The functions F,L, and D are dependent on the 'compression
> factor', 1 through 4, and are defined as follows:
> 
> For compression factor 1:
>     L(X) equals the lower 7 bits of X.
>     F(X) equals 2 if X equals 127 otherwise F(X) equals 3.
>     D(X,Y) equals the (upper 1 bit of X) * 256 + Y + 1.
> For compression factor 2:
>     L(X) equals the lower 6 bits of X.
>     F(X) equals 2 if X equals 63 otherwise F(X) equals 3.
>     D(X,Y) equals the (upper 2 bits of X) * 256 + Y + 1.
> For compression factor 3:
>     L(X) equals the lower 5 bits of X.
>     F(X) equals 2 if X equals 31 otherwise F(X) equals 3.
>     D(X,Y) equals the (upper 3 bits of X) * 256 + Y + 1.
> For compression factor 4:
>     L(X) equals the lower 4 bits of X.
>     F(X) equals 2 if X equals 15 otherwise F(X) equals 3.
>     D(X,Y) equals the (upper 4 bits of X) * 256 + Y + 1.
1802,1812c1673,1674
<         assign the last value placed on the output stream to
<         Last-Character.
<     end loop
< 
<     B(N(j)) is defined as the minimal number of bits required to
<     encode the value N(j)-1.
< 
<     5.2.5 The decompressed stream from above can then be expanded to
<     re-create the original file as follows:
< 
<     let State <- 0.
---
> Imploding - Method 6
> --------------------
1814,1839c1676,1744
<     loop until done
<         read 8 bits from the input stream into C.
<         case State of
<             0:  if C is not equal to DLE (144 decimal) then
<                    copy C to the output stream.
<                  otherwise if C is equal to DLE then
<                    let State <- 1.
< 
<             1:  if C is non-zero then
<                    let V <- C.
<                    let Len <- L(V)
<                    let State <- F(Len).
<                  otherwise if C is zero then
<                    copy the value 144 (decimal) to the output stream.
<                    let State <- 0
< 
<             2:  let Len <- Len + C
<                     let State <- 3.
< 
<             3:  move backwards D(V,C) bytes in the output stream
<                     (if this position is before the start of the output
<                     stream, then assume that all the data before the
<                     start of the output stream is filled with zeros).
<                     copy Len+3 bytes from this position to the output stream.
<                     let State <- 0.
<           end case
---
> The Imploding algorithm is actually a combination of two distinct
> algorithms.  The first algorithm compresses repeated byte
> sequences using a sliding dictionary.  The second algorithm is
> used to compress the encoding of the sliding dictionary output,
> using multiple Shannon-Fano trees.
> 
> The Imploding algorithm can use a 4K or 8K sliding dictionary
> size. The dictionary size used can be determined by bit 1 in the
> general purpose flag word; a 0 bit indicates a 4K dictionary
> while a 1 bit indicates an 8K dictionary.
> 
> The Shannon-Fano trees are stored at the start of the compressed
> file. The number of trees stored is defined by bit 2 in the
> general purpose flag word; a 0 bit indicates two trees stored, a
> 1 bit indicates three trees are stored.  If 3 trees are stored,
> the first Shannon-Fano tree represents the encoding of the
> Literal characters, the second tree represents the encoding of
> the Length information, the third represents the encoding of the
> Distance information.  When 2 Shannon-Fano trees are stored, the
> Length tree is stored first, followed by the Distance tree.
> 
> The Literal Shannon-Fano tree, if present is used to represent
> the entire ASCII character set, and contains 256 values.  This
> tree is used to compress any data not compressed by the sliding
> dictionary algorithm.  When this tree is present, the Minimum
> Match Length for the sliding dictionary is 3.  If this tree is
> not present, the Minimum Match Length is 2.
> 
> The Length Shannon-Fano tree is used to compress the Length part
> of the (length,distance) pairs from the sliding dictionary
> output.  The Length tree contains 64 values, ranging from the
> Minimum Match Length, to 63 plus the Minimum Match Length.
> 
> The Distance Shannon-Fano tree is used to compress the Distance
> part of the (length,distance) pairs from the sliding dictionary
> output. The Distance tree contains 64 values, ranging from 0 to
> 63, representing the upper 6 bits of the distance value.  The
> distance values themselves will be between 0 and the sliding
> dictionary size, either 4K or 8K.
> 
> The Shannon-Fano trees themselves are stored in a compressed
> format. The first byte of the tree data represents the number of
> bytes of data representing the (compressed) Shannon-Fano tree
> minus 1.  The remaining bytes represent the Shannon-Fano tree
> data encoded as:
> 
>     High 4 bits: Number of values at this bit length + 1. (1 - 16)
>     Low  4 bits: Bit Length needed to represent value + 1. (1 - 16)
> 
> The Shannon-Fano codes can be constructed from the bit lengths
> using the following algorithm:
> 
> 1)  Sort the Bit Lengths in ascending order, while retaining the
>     order of the original lengths stored in the file.
> 
> 2)  Generate the Shannon-Fano trees:
> 
>     Code <- 0
>     CodeIncrement <- 0
>     LastBitLength <- 0
>     i <- number of Shannon-Fano codes - 1   (either 255 or 63)
> 
>     loop while i >= 0
>         Code = Code + CodeIncrement
>         if BitLength(i) <> LastBitLength then
>             LastBitLength=BitLength(i)
>             CodeIncrement = 1 shifted left (16 - LastBitLength)
>         ShannonCode(i) = Code
>         i <- i - 1
1842,1843c1747,1832
<     The functions F,L, and D are dependent on the 'compression
<     factor', 1 through 4, and are defined as follows:
---
> 3)  Reverse the order of all the bits in the above ShannonCode()
>     vector, so that the most significant bit becomes the least
>     significant bit.  For example, the value 0x1234 (hex) would
>     become 0x2C48 (hex).
> 
> 4)  Restore the order of Shannon-Fano codes as originally stored
>     within the file.
> 
> Example:
> 
>     This example will show the encoding of a Shannon-Fano tree
>     of size 8.  Notice that the actual Shannon-Fano trees used
>     for Imploding are either 64 or 256 entries in size.
> 
> Example:   0x02, 0x42, 0x01, 0x13
> 
>     The first byte indicates 3 values in this table.  Decoding the
>     bytes:
>             0x42 = 5 codes of 3 bits long
>             0x01 = 1 code  of 2 bits long
>             0x13 = 2 codes of 4 bits long
> 
>     This would generate the original bit length array of:
>     (3, 3, 3, 3, 3, 2, 4, 4)
> 
>     There are 8 codes in this table for the values 0 thru 7.  Using 
>     the algorithm to obtain the Shannon-Fano codes produces:
> 
>                                   Reversed     Order     Original
> Val  Sorted   Constructed Code      Value     Restored    Length
> ---  ------   -----------------   --------    --------    ------
> 0:     2      1100000000000000        11       101          3
> 1:     3      1010000000000000       101       001          3
> 2:     3      1000000000000000       001       110          3
> 3:     3      0110000000000000       110       010          3
> 4:     3      0100000000000000       010       100          3
> 5:     3      0010000000000000       100        11          2
> 6:     4      0001000000000000      1000      1000          4
> 7:     4      0000000000000000      0000      0000          4
> 
> The values in the Val, Order Restored and Original Length columns
> now represent the Shannon-Fano encoding tree that can be used for
> decoding the Shannon-Fano encoded data.  How to parse the
> variable length Shannon-Fano values from the data stream is beyond
> the scope of this document.  (See the references listed at the end of
> this document for more information.)  However, traditional decoding
> schemes used for Huffman variable length decoding, such as the
> Greenlaw algorithm, can be successfully applied.
> 
> The compressed data stream begins immediately after the
> compressed Shannon-Fano data.  The compressed data stream can be
> interpreted as follows:
> 
> loop until done
>     read 1 bit from input stream.
> 
>     if this bit is non-zero then       (encoded data is literal data)
>         if Literal Shannon-Fano tree is present
>             read and decode character using Literal Shannon-Fano tree.
>         otherwise
>             read 8 bits from input stream.
>         copy character to the output stream.
>     otherwise              (encoded data is sliding dictionary match)
>         if 8K dictionary size
>             read 7 bits for offset Distance (lower 7 bits of offset).
>         otherwise
>             read 6 bits for offset Distance (lower 6 bits of offset).
> 
>         using the Distance Shannon-Fano tree, read and decode the
>           upper 6 bits of the Distance value.
> 
>         using the Length Shannon-Fano tree, read and decode
>           the Length value.
> 
>         Length <- Length + Minimum Match Length
> 
>         if Length = 63 + Minimum Match Length
>             read 8 bits from the input stream,
>             add this value to Length.
> 
>         move backwards Distance+1 bytes in the output stream, and
>         copy Length characters from this position to the output
>         stream.  (if this position is before the start of the output
>         stream, then assume that all the data before the start of
>         the output stream is filled with zeros).
> end loop
1845,2002c1834,1835
<     For compression factor 1:
<         L(X) equals the lower 7 bits of X.
<         F(X) equals 2 if X equals 127 otherwise F(X) equals 3.
<         D(X,Y) equals the (upper 1 bit of X) * 256 + Y + 1.
<     For compression factor 2:
<         L(X) equals the lower 6 bits of X.
<         F(X) equals 2 if X equals 63 otherwise F(X) equals 3.
<         D(X,Y) equals the (upper 2 bits of X) * 256 + Y + 1.
<     For compression factor 3:
<         L(X) equals the lower 5 bits of X.
<         F(X) equals 2 if X equals 31 otherwise F(X) equals 3.
<         D(X,Y) equals the (upper 3 bits of X) * 256 + Y + 1.
<     For compression factor 4:
<         L(X) equals the lower 4 bits of X.
<         F(X) equals 2 if X equals 15 otherwise F(X) equals 3.
<         D(X,Y) equals the (upper 4 bits of X) * 256 + Y + 1.
< 
< 5.3 Imploding - Method 6
< ------------------------
< 
<     5.3.1 The Imploding algorithm is actually a combination of two 
<     distinct algorithms.  The first algorithm compresses repeated byte
<     sequences using a sliding dictionary.  The second algorithm is
<     used to compress the encoding of the sliding dictionary output,
<     using multiple Shannon-Fano trees.
< 
<     5.3.2 The Imploding algorithm can use a 4K or 8K sliding dictionary
<     size. The dictionary size used can be determined by bit 1 in the
<     general purpose flag word; a 0 bit indicates a 4K dictionary
<     while a 1 bit indicates an 8K dictionary.
< 
<     5.3.3 The Shannon-Fano trees are stored at the start of the 
<     compressed file. The number of trees stored is defined by bit 2 in 
<     the general purpose flag word; a 0 bit indicates two trees stored, 
<     a 1 bit indicates three trees are stored.  If 3 trees are stored,
<     the first Shannon-Fano tree represents the encoding of the
<     Literal characters, the second tree represents the encoding of
<     the Length information, the third represents the encoding of the
<     Distance information.  When 2 Shannon-Fano trees are stored, the
<     Length tree is stored first, followed by the Distance tree.
< 
<     5.3.4 The Literal Shannon-Fano tree, if present is used to represent
<     the entire ASCII character set, and contains 256 values.  This
<     tree is used to compress any data not compressed by the sliding
<     dictionary algorithm.  When this tree is present, the Minimum
<     Match Length for the sliding dictionary is 3.  If this tree is
<     not present, the Minimum Match Length is 2.
< 
<     5.3.5 The Length Shannon-Fano tree is used to compress the Length 
<     part of the (length,distance) pairs from the sliding dictionary
<     output.  The Length tree contains 64 values, ranging from the
<     Minimum Match Length, to 63 plus the Minimum Match Length.
< 
<     5.3.6 The Distance Shannon-Fano tree is used to compress the Distance
<     part of the (length,distance) pairs from the sliding dictionary
<     output. The Distance tree contains 64 values, ranging from 0 to
<     63, representing the upper 6 bits of the distance value.  The
<     distance values themselves will be between 0 and the sliding
<     dictionary size, either 4K or 8K.
< 
<     5.3.7 The Shannon-Fano trees themselves are stored in a compressed
<     format. The first byte of the tree data represents the number of
<     bytes of data representing the (compressed) Shannon-Fano tree
<     minus 1.  The remaining bytes represent the Shannon-Fano tree
<     data encoded as:
< 
<         High 4 bits: Number of values at this bit length + 1. (1 - 16)
<         Low  4 bits: Bit Length needed to represent value + 1. (1 - 16)
< 
<     5.3.8 The Shannon-Fano codes can be constructed from the bit lengths
<     using the following algorithm:
< 
<     1)  Sort the Bit Lengths in ascending order, while retaining the
<         order of the original lengths stored in the file.
< 
<     2)  Generate the Shannon-Fano trees:
< 
<         Code <- 0
<         CodeIncrement <- 0
<         LastBitLength <- 0
<         i <- number of Shannon-Fano codes - 1   (either 255 or 63)
< 
<         loop while i >= 0
<             Code = Code + CodeIncrement
<             if BitLength(i) <> LastBitLength then
<                 LastBitLength=BitLength(i)
<                 CodeIncrement = 1 shifted left (16 - LastBitLength)
<             ShannonCode(i) = Code
<             i <- i - 1
<         end loop
< 
<     3)  Reverse the order of all the bits in the above ShannonCode()
<         vector, so that the most significant bit becomes the least
<         significant bit.  For example, the value 0x1234 (hex) would
<         become 0x2C48 (hex).
< 
<     4)  Restore the order of Shannon-Fano codes as originally stored
<         within the file.
< 
<     Example:
< 
<         This example will show the encoding of a Shannon-Fano tree
<         of size 8.  Notice that the actual Shannon-Fano trees used
<         for Imploding are either 64 or 256 entries in size.
< 
<     Example:   0x02, 0x42, 0x01, 0x13
< 
<         The first byte indicates 3 values in this table.  Decoding the
<         bytes:
<                 0x42 = 5 codes of 3 bits long
<                 0x01 = 1 code  of 2 bits long
<                 0x13 = 2 codes of 4 bits long
< 
<         This would generate the original bit length array of:
<         (3, 3, 3, 3, 3, 2, 4, 4)
< 
<         There are 8 codes in this table for the values 0 thru 7.  Using 
<         the algorithm to obtain the Shannon-Fano codes produces:
< 
<                                       Reversed     Order     Original
<     Val  Sorted   Constructed Code      Value     Restored    Length
<     ---  ------   -----------------   --------    --------    ------
<     0:     2      1100000000000000        11       101          3
<     1:     3      1010000000000000       101       001          3
<     2:     3      1000000000000000       001       110          3
<     3:     3      0110000000000000       110       010          3
<     4:     3      0100000000000000       010       100          3
<     5:     3      0010000000000000       100        11          2
<     6:     4      0001000000000000      1000      1000          4
<     7:     4      0000000000000000      0000      0000          4
< 
<     The values in the Val, Order Restored and Original Length columns
<     now represent the Shannon-Fano encoding tree that can be used for
<     decoding the Shannon-Fano encoded data.  How to parse the
<     variable length Shannon-Fano values from the data stream is beyond
<     the scope of this document.  (See the references listed at the end of
<     this document for more information.)  However, traditional decoding
<     schemes used for Huffman variable length decoding, such as the
<     Greenlaw algorithm, can be successfully applied.
< 
<     5.3.9 The compressed data stream begins immediately after the
<     compressed Shannon-Fano data.  The compressed data stream can be
<     interpreted as follows:
< 
<     loop until done
<         read 1 bit from input stream.
< 
<         if this bit is non-zero then       (encoded data is literal data)
<             if Literal Shannon-Fano tree is present
<                 read and decode character using Literal Shannon-Fano tree.
<             otherwise
<                 read 8 bits from input stream.
<             copy character to the output stream.
<         otherwise              (encoded data is sliding dictionary match)
<             if 8K dictionary size
<                 read 7 bits for offset Distance (lower 7 bits of offset).
<             otherwise
<                 read 6 bits for offset Distance (lower 6 bits of offset).
---
> Tokenizing - Method 7
> ---------------------
2004,2005c1837
<             using the Distance Shannon-Fano tree, read and decode the
<               upper 6 bits of the Distance value.
---
> This method is not used by PKZIP.
2007,2008c1839,1840
<             using the Length Shannon-Fano tree, read and decode
<               the Length value.
---
> Deflating - Method 8
> --------------------
2010c1842,1865
<             Length <- Length + Minimum Match Length
---
> The Deflate algorithm is similar to the Implode algorithm using
> a sliding dictionary of up to 32K with secondary compression
> from Huffman/Shannon-Fano codes.
> 
> The compressed data is stored in blocks with a header describing
> the block and the Huffman codes used in the data block.  The header
> format is as follows:
> 
>    Bit 0: Last Block bit     This bit is set to 1 if this is the last
>                              compressed block in the data.
>    Bits 1-2: Block type
>       00 (0) - Block is stored - All stored data is byte aligned.
>                Skip bits until next byte, then next word = block 
>                length, followed by the ones compliment of the block
>                length word. Remaining data in block is the stored 
>                data.
> 
>       01 (1) - Use fixed Huffman codes for literal and distance codes.
>                Lit Code    Bits             Dist Code   Bits
>                ---------   ----             ---------   ----
>                  0 - 143    8                 0 - 31      5
>                144 - 255    9
>                256 - 279    7
>                280 - 287    8
2012,2014c1867,1868
<             if Length = 63 + Minimum Match Length
<                 read 8 bits from the input stream,
<                 add this value to Length.
---
>                Literal codes 286-287 and distance codes 30-31 are 
>                never used but participate in the huffman construction.
2016,2021c1870
<             move backwards Distance+1 bytes in the output stream, and
<             copy Length characters from this position to the output
<             stream.  (if this position is before the start of the output
<             stream, then assume that all the data before the start of
<             the output stream is filled with zeros).
<     end loop
---
>       10 (2) - Dynamic Huffman codes.  (See expanding Huffman codes)
2023,2024c1872
< 5.4 Tokenizing - Method 7
< -------------------------
---
>       11 (3) - Reserved - Flag a "Error in compressed data" if seen.
2026,2029c1874,1877
<     5.4.1 This method is not used by PKZIP.
< 
< 5.5 Deflating - Method 8
< ------------------------
---
> Expanding Huffman Codes
> -----------------------
> If the data block is stored with dynamic Huffman codes, the Huffman
> codes are sent in the following compressed format:
2031,2172c1879,1964
<     5.5.1 The Deflate algorithm is similar to the Implode algorithm using
<     a sliding dictionary of up to 32K with secondary compression
<     from Huffman/Shannon-Fano codes.
< 
<     5.5.2 The compressed data is stored in blocks with a header describing
<     the block and the Huffman codes used in the data block.  The header
<     format is as follows:
< 
<        Bit 0: Last Block bit     This bit is set to 1 if this is the last
<                                  compressed block in the data.
<        Bits 1-2: Block type
<           00 (0) - Block is stored - All stored data is byte aligned.
<                    Skip bits until next byte, then next word = block 
<                    length, followed by the ones compliment of the block
<                    length word. Remaining data in block is the stored 
<                    data.
< 
<           01 (1) - Use fixed Huffman codes for literal and distance codes.
<                    Lit Code    Bits             Dist Code   Bits
<                    ---------   ----             ---------   ----
<                      0 - 143    8                 0 - 31      5
<                    144 - 255    9
<                    256 - 279    7
<                    280 - 287    8
< 
<                    Literal codes 286-287 and distance codes 30-31 are 
<                    never used but participate in the huffman construction.
< 
<           10 (2) - Dynamic Huffman codes.  (See expanding Huffman codes)
< 
<           11 (3) - Reserved - Flag a "Error in compressed data" if seen.
< 
<     5.5.3 Expanding Huffman Codes
<     
<     If the data block is stored with dynamic Huffman codes, the Huffman
<     codes are sent in the following compressed format:
< 
<        5 Bits: # of Literal codes sent - 256 (256 - 286)
<                All other codes are never sent.
<        5 Bits: # of Dist codes - 1           (1 - 32)
<        4 Bits: # of Bit Length codes - 3     (3 - 19)
< 
<     The Huffman codes are sent as bit lengths and the codes are built as
<     described in the implode algorithm.  The bit lengths themselves are
<     compressed with Huffman codes.  There are 19 bit length codes:
< 
<        0 - 15: Represent bit lengths of 0 - 15
<            16: Copy the previous bit length 3 - 6 times.
<                The next 2 bits indicate repeat length (0 = 3, ... ,3 = 6)
<                   Example:  Codes 8, 16 (+2 bits 11), 16 (+2 bits 10) will
<                             expand to 12 bit lengths of 8 (1 + 6 + 5)
<            17: Repeat a bit length of 0 for 3 - 10 times. (3 bits of length)
<            18: Repeat a bit length of 0 for 11 - 138 times (7 bits of length)
< 
<     The lengths of the bit length codes are sent packed 3 bits per value
<     (0 - 7) in the following order:
< 
<        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
< 
<     The Huffman codes should be built as described in the Implode algorithm
<     except codes are assigned starting at the shortest bit length, i.e. the
<     shortest code should be all 0's rather than all 1's.  Also, codes with
<     a bit length of zero do not participate in the tree construction.  The
<     codes are then used to decode the bit lengths for the literal and 
<     distance tables.
< 
<     The bit lengths for the literal tables are sent first with the number
<     of entries sent described by the 5 bits sent earlier.  There are up
<     to 286 literal characters; the first 256 represent the respective 8
<     bit character, code 256 represents the End-Of-Block code, the remaining
<     29 codes represent copy lengths of 3 thru 258.  There are up to 30
<     distance codes representing distances from 1 thru 32k as described
<     below.
< 
< 
<                                  Length Codes
<                                  ------------
<           Extra             Extra              Extra              Extra
<      Code Bits Length  Code Bits Lengths  Code Bits Lengths  Code Bits Length(s)
<      ---- ---- ------  ---- ---- -------  ---- ---- -------  ---- ---- ---------
<       257   0     3     265   1   11,12    273   3   35-42    281   5  131-162
<       258   0     4     266   1   13,14    274   3   43-50    282   5  163-194
<       259   0     5     267   1   15,16    275   3   51-58    283   5  195-226
<       260   0     6     268   1   17,18    276   3   59-66    284   5  227-257
<       261   0     7     269   2   19-22    277   4   67-82    285   0    258
<       262   0     8     270   2   23-26    278   4   83-98
<       263   0     9     271   2   27-30    279   4   99-114
<       264   0    10     272   2   31-34    280   4  115-130
< 
<                                 Distance Codes
<                                 --------------
<           Extra           Extra             Extra               Extra
<      Code Bits Dist  Code Bits  Dist   Code Bits Distance  Code Bits Distance
<      ---- ---- ----  ---- ---- ------  ---- ---- --------  ---- ---- --------
<        0   0    1      8   3   17-24    16    7  257-384    24   11  4097-6144
<        1   0    2      9   3   25-32    17    7  385-512    25   11  6145-8192
<        2   0    3     10   4   33-48    18    8  513-768    26   12  8193-12288
<        3   0    4     11   4   49-64    19    8  769-1024   27   12 12289-16384
<        4   1   5,6    12   5   65-96    20    9 1025-1536   28   13 16385-24576
<        5   1   7,8    13   5   97-128   21    9 1537-2048   29   13 24577-32768
<        6   2   9-12   14   6  129-192   22   10 2049-3072
<        7   2  13-16   15   6  193-256   23   10 3073-4096
< 
<     5.5.4 The compressed data stream begins immediately after the
<     compressed header data.  The compressed data stream can be
<     interpreted as follows:
< 
<     do
<        read header from input stream.
< 
<        if stored block
<           skip bits until byte aligned
<           read count and 1's compliment of count
<           copy count bytes data block
<        otherwise
<           loop until end of block code sent
<              decode literal character from input stream
<              if literal < 256
<                 copy character to the output stream
<              otherwise
<                 if literal = end of block
<                    break from loop
<                 otherwise
<                    decode distance from input stream
< 
<                    move backwards distance bytes in the output stream, and
<                    copy length characters from this position to the output
<                    stream.
<           end loop
<     while not last block
< 
<     if data descriptor exists
<        skip bits until byte aligned
<        read crc and sizes
<     endif
< 
< 5.6 Enhanced Deflating - Method 9
< ---------------------------------
< 
<     5.6.1 The Enhanced Deflating algorithm is similar to Deflate but uses 
<     a sliding dictionary of up to 64K. Deflate64(tm) is supported
<     by the Deflate extractor. 
---
>    5 Bits: # of Literal codes sent - 256 (256 - 286)
>            All other codes are never sent.
>    5 Bits: # of Dist codes - 1           (1 - 32)
>    4 Bits: # of Bit Length codes - 3     (3 - 19)
> 
> The Huffman codes are sent as bit lengths and the codes are built as
> described in the implode algorithm.  The bit lengths themselves are
> compressed with Huffman codes.  There are 19 bit length codes:
> 
>    0 - 15: Represent bit lengths of 0 - 15
>        16: Copy the previous bit length 3 - 6 times.
>            The next 2 bits indicate repeat length (0 = 3, ... ,3 = 6)
>               Example:  Codes 8, 16 (+2 bits 11), 16 (+2 bits 10) will
>                         expand to 12 bit lengths of 8 (1 + 6 + 5)
>        17: Repeat a bit length of 0 for 3 - 10 times. (3 bits of length)
>        18: Repeat a bit length of 0 for 11 - 138 times (7 bits of length)
> 
> The lengths of the bit length codes are sent packed 3 bits per value
> (0 - 7) in the following order:
> 
>    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15
> 
> The Huffman codes should be built as described in the Implode algorithm
> except codes are assigned starting at the shortest bit length, i.e. the
> shortest code should be all 0's rather than all 1's.  Also, codes with
> a bit length of zero do not participate in the tree construction.  The
> codes are then used to decode the bit lengths for the literal and 
> distance tables.
> 
> The bit lengths for the literal tables are sent first with the number
> of entries sent described by the 5 bits sent earlier.  There are up
> to 286 literal characters; the first 256 represent the respective 8
> bit character, code 256 represents the End-Of-Block code, the remaining
> 29 codes represent copy lengths of 3 thru 258.  There are up to 30
> distance codes representing distances from 1 thru 32k as described
> below.
> 
>                              Length Codes
>                              ------------
>       Extra             Extra              Extra              Extra
>  Code Bits Length  Code Bits Lengths  Code Bits Lengths  Code Bits Length(s)
>  ---- ---- ------  ---- ---- -------  ---- ---- -------  ---- ---- ---------
>   257   0     3     265   1   11,12    273   3   35-42    281   5  131-162
>   258   0     4     266   1   13,14    274   3   43-50    282   5  163-194
>   259   0     5     267   1   15,16    275   3   51-58    283   5  195-226
>   260   0     6     268   1   17,18    276   3   59-66    284   5  227-257
>   261   0     7     269   2   19-22    277   4   67-82    285   0    258
>   262   0     8     270   2   23-26    278   4   83-98
>   263   0     9     271   2   27-30    279   4   99-114
>   264   0    10     272   2   31-34    280   4  115-130
> 
>                             Distance Codes
>                             --------------
>       Extra           Extra             Extra               Extra
>  Code Bits Dist  Code Bits  Dist   Code Bits Distance  Code Bits Distance
>  ---- ---- ----  ---- ---- ------  ---- ---- --------  ---- ---- --------
>    0   0    1      8   3   17-24    16    7  257-384    24   11  4097-6144
>    1   0    2      9   3   25-32    17    7  385-512    25   11  6145-8192
>    2   0    3     10   4   33-48    18    8  513-768    26   12  8193-12288
>    3   0    4     11   4   49-64    19    8  769-1024   27   12 12289-16384
>    4   1   5,6    12   5   65-96    20    9 1025-1536   28   13 16385-24576
>    5   1   7,8    13   5   97-128   21    9 1537-2048   29   13 24577-32768
>    6   2   9-12   14   6  129-192   22   10 2049-3072
>    7   2  13-16   15   6  193-256   23   10 3073-4096
> 
> The compressed data stream begins immediately after the
> compressed header data.  The compressed data stream can be
> interpreted as follows:
> 
> do
>    read header from input stream.
> 
>    if stored block
>       skip bits until byte aligned
>       read count and 1's compliment of count
>       copy count bytes data block
>    otherwise
>       loop until end of block code sent
>          decode literal character from input stream
>          if literal < 256
>             copy character to the output stream
>          otherwise
>             if literal = end of block
>                break from loop
>             otherwise
>                decode distance from input stream
2174,2175c1966,1989
< 5.7 BZIP2 - Method 12
< ---------------------
---
>                move backwards distance bytes in the output stream, and
>                copy length characters from this position to the output
>                stream.
>       end loop
> while not last block
> 
> if data descriptor exists
>    skip bits until byte aligned
>    read crc and sizes
> endif
> 
> Enhanced Deflating - Method 9
> -----------------------------
> 
> The Enhanced Deflating algorithm is similar to Deflate but
> uses a sliding dictionary of up to 64K. Deflate64(tm) is supported
> by the Deflate extractor. 
> 
> BZIP2 - Method 12
> -----------------
> 
> BZIP2 is an open-source data compression algorithm developed by 
> Julian Seward.  Information and source code for this algorithm
> can be found on the internet.
2177,2179c1991,1992
<     5.7.1 BZIP2 is an open-source data compression algorithm developed by 
<     Julian Seward.  Information and source code for this algorithm
<     can be found on the internet.
---
> LZMA - Method 14 (EFS)
> ----------------------
2181,2182c1994,2043
< 5.8 LZMA - Method 14 
< ---------------------
---
> LZMA is a block-oriented, general purpose data compression algorithm  
> developed and maintained by Igor Pavlov.  It is a derivative of LZ77
> that utilizes Markov chains and a range coder.  Information and 
> source code for this algorithm can be found on the internet.  Consult 
> with the author of this algorithm for information on terms or 
> restrictions on use.
> 
> Support for LZMA within the ZIP format is defined as follows:   
> 
> The Compression method field within the ZIP Local and Central 
> Header records will be set to the value 14 to indicate data was
> compressed using LZMA. 
> 
> The Version needed to extract field within the ZIP Local and 
> Central Header records will be set to 6.3 to indicate the 
> minimum ZIP format version supporting this feature.
> 
> File data compressed using the LZMA algorithm must be placed 
> immediately following the Local Header for the file.  If a 
> standard ZIP encryption header is required, it will follow 
> the Local Header and will precede the LZMA compressed file 
> data segment.  The location of LZMA compressed data segment 
> within the ZIP format will be as shown:
> 
>     [local header file 1]
>     [encryption header file 1]
>     [LZMA compressed data segment for file 1]
>     [data descriptor 1]
>     [local header file 2]
> 
> The encryption header and data descriptor records may
> be conditionally present.  The LZMA Compressed Data Segment 
> will consist of an LZMA Properties Header followed by the 
> LZMA Compressed Data as shown:
> 
>     [LZMA properties header for file 1]
>     [LZMA compressed data for file 1]
> 
> The LZMA Compressed Data will be stored as provided by the 
> LZMA compression library.  Compressed size, uncompressed 
> size and other file characteristics about the file being 
> compressed must be stored in standard ZIP storage format.
> 
> The LZMA Properties Header will store specific data required to 
> decompress the LZMA compressed Data.  This data is set by the 
> LZMA compression engine using the function WriteCoderProperties() 
> as documented within the LZMA SDK. 
>  
> Storage fields for the property information within the LZMA 
> Properties Header are as follows:
2184,2274c2045,2114
<     5.8.1 LZMA is a block-oriented, general purpose data compression 
<     algorithm developed and maintained by Igor Pavlov.  It is a derivative 
<     of LZ77 that utilizes Markov chains and a range coder.  Information and 
<     source code for this algorithm can be found on the internet.  Consult 
<     with the author of this algorithm for information on terms or 
<     restrictions on use.
< 
<     Support for LZMA within the ZIP format is defined as follows:   
< 
<     5.8.2 The Compression method field within the ZIP Local and Central 
<     Header records will be set to the value 14 to indicate data was
<     compressed using LZMA. 
< 
<     5.8.3 The Version needed to extract field within the ZIP Local and 
<     Central Header records will be set to 6.3 to indicate the minimum 
<     ZIP format version supporting this feature.
< 
<     5.8.4 File data compressed using the LZMA algorithm must be placed 
<     immediately following the Local Header for the file.  If a standard 
<     ZIP encryption header is required, it will follow the Local Header 
<     and will precede the LZMA compressed file data segment.  The location 
<     of LZMA compressed data segment within the ZIP format will be as shown:
< 
<         [local header file 1]
<         [encryption header file 1]
<         [LZMA compressed data segment for file 1]
<         [data descriptor 1]
<         [local header file 2]
< 
<     5.8.5 The encryption header and data descriptor records may
<     be conditionally present.  The LZMA Compressed Data Segment 
<     will consist of an LZMA Properties Header followed by the 
<     LZMA Compressed Data as shown:
< 
<         [LZMA properties header for file 1]
<         [LZMA compressed data for file 1]
< 
<     5.8.6 The LZMA Compressed Data will be stored as provided by the 
<     LZMA compression library.  Compressed size, uncompressed size and 
<     other file characteristics about the file being compressed must be 
<     stored in standard ZIP storage format.
< 
<     5.8.7 The LZMA Properties Header will store specific data required 
<     to decompress the LZMA compressed Data.  This data is set by the 
<     LZMA compression engine using the function WriteCoderProperties() 
<     as documented within the LZMA SDK. 
<          
<     5.8.8 Storage fields for the property information within the LZMA 
<     Properties Header are as follows:
< 
<          LZMA Version Information 2 bytes
<          LZMA Properties Size 2 bytes
<          LZMA Properties Data variable, defined by "LZMA Properties Size"
< 
<        5.8.8.1 LZMA Version Information - this field identifies which version 
<        of the LZMA SDK was used to compress a file.  The first byte will 
<        store the major version number of the LZMA SDK and the second 
<        byte will store the minor number.  
< 
<        5.8.8.2 LZMA Properties Size - this field defines the size of the 
<        remaining property data.  Typically this size should be determined by 
<        the version of the SDK.  This size field is included as a convenience
<        and to help avoid any ambiguity should it arise in the future due
<        to changes in this compression algorithm. 
< 
<        5.8.8.3 LZMA Property Data - this variable sized field records the 
<        required values for the decompressor as defined by the LZMA SDK.  
<        The data stored in this field should be obtained using the 
<        WriteCoderProperties() in the version of the SDK defined by 
<        the "LZMA Version Information" field.  
< 
<        5.8.8.4 The layout of the "LZMA Properties Data" field is a function of 
<        the LZMA compression algorithm.  It is possible that this layout may be
<        changed by the author over time.  The data layout in version 4.3 of the 
<        LZMA SDK defines a 5 byte array that uses 4 bytes to store the dictionary 
<        size in little-endian order. This is preceded by a single packed byte as 
<        the first element of the array that contains the following fields:
< 
<          PosStateBits
<          LiteralPosStateBits
<          LiteralContextBits
< 
<        Refer to the LZMA documentation for a more detailed explanation of 
<        these fields.  
< 
<     5.8.9 Data compressed with method 14, LZMA, may include an end-of-stream
<     (EOS) marker ending the compressed data stream.  This marker is not
<     required, but its use is highly recommended to facilitate processing
<     and implementers should include the EOS marker whenever possible.
<     When the EOS marker is used, general purpose bit 1 must be set.  If
<     general purpose bit 1 is not set, the EOS marker is not present.
---
>      LZMA Version Information 2 bytes
>      LZMA Properties Size 2 bytes
>      LZMA Properties Data variable, defined by "LZMA Properties Size"
> 
> LZMA Version Information - this field identifies which version of 
>      the LZMA SDK was used to compress a file.  The first byte will 
>      store the major version number of the LZMA SDK and the second 
>      byte will store the minor number.  
> 
> LZMA Properties Size - this field defines the size of the remaining 
>      property data.  Typically this size should be determined by the 
>      version of the SDK.  This size field is included as a convenience
>      and to help avoid any ambiguity should it arise in the future due
>      to changes in this compression algorithm. 
> 
> LZMA Property Data - this variable sized field records the required 
>      values for the decompressor as defined by the LZMA SDK.  The 
>      data stored in this field should be obtained using the 
>      WriteCoderProperties() in the version of the SDK defined by 
>      the "LZMA Version Information" field.  
> 
> The layout of the "LZMA Properties Data" field is a function of the
> LZMA compression algorithm.  It is possible that this layout may be
> changed by the author over time.  The data layout in version 4.32 
> of the LZMA SDK defines a 5 byte array that uses 4 bytes to store 
> the dictionary size in little-endian order. This is preceded by a 
> single packed byte as the first element of the array that contains
> the following fields:
> 
>      PosStateBits
>      LiteralPosStateBits
>      LiteralContextBits
> 
> Refer to the LZMA documentation for a more detailed explanation of 
> these fields.  
> 
> Data compressed with method 14, LZMA, may include an end-of-stream
> (EOS) marker ending the compressed data stream.  This marker is not
> required, but its use is highly recommended to facilitate processing
> and implementers should include the EOS marker whenever possible.
> When the EOS marker is used, general purpose bit 1 must be set.  If
> general purpose bit 1 is not set, the EOS marker is not present.
> 
> WavPack - Method 97
> -------------------
> 
> Information describing the use of compression method 97 is 
> provided by WinZIP International, LLC.  This method relies on the
> open source WavPack audio compression utility developed by David Bryant.  
> Information on WavPack is available at www.wavpack.com.  Please consult 
> with the author of this algorithm for information on terms and 
> restrictions on use.
> 
> WavPack data for a file begins immediately after the end of the
> local header data.  This data is the output from WavPack compression
> routines.  Within the ZIP file, the use of WavPack compression is
> indicated by setting the compression method field to a value of 97 
> in both the local header and the central directory header.  The Version 
> needed to extract and version made by fields use the same values as are 
> used for data compressed using the Deflate algorithm.
> 
> An implementation note for storing digital sample data when using 
> WavPack compression within ZIP files is that all of the bytes of
> the sample data should be compressed.  This includes any unused
> bits up to the byte boundary.  An example is a 2 byte sample that
> uses only 12 bits for the sample data with 4 unused bits.  If only
> 12 bits are passed as the sample size to the WavPack routines, the 4 
> unused bits will be set to 0 on extraction regardless of their original 
> state.  To avoid this, the full 16 bits of the sample data size
> should be provided. 
2276,2277c2116,2117
< 5.9 WavPack - Method 97
< -----------------------
---
> PPMd - Method 98
> ----------------
2279,2302c2119,2124
<     5.9.1 Information describing the use of compression method 97 is 
<     provided by WinZIP International, LLC.  This method relies on the
<     open source WavPack audio compression utility developed by David Bryant.  
<     Information on WavPack is available at www.wavpack.com.  Please consult 
<     with the author of this algorithm for information on terms and 
<     restrictions on use.
< 
<     5.9.2 WavPack data for a file begins immediately after the end of the
<     local header data.  This data is the output from WavPack compression
<     routines.  Within the ZIP file, the use of WavPack compression is
<     indicated by setting the compression method field to a value of 97 
<     in both the local header and the central directory header.  The Version 
<     needed to extract and version made by fields use the same values as are 
<     used for data compressed using the Deflate algorithm.
< 
<     5.9.3 An implementation note for storing digital sample data when using 
<     WavPack compression within ZIP files is that all of the bytes of
<     the sample data should be compressed.  This includes any unused
<     bits up to the byte boundary.  An example is a 2 byte sample that
<     uses only 12 bits for the sample data with 4 unused bits.  If only
<     12 bits are passed as the sample size to the WavPack routines, the 4 
<     unused bits will be set to 0 on extraction regardless of their original 
<     state.  To avoid this, the full 16 bits of the sample data size
<     should be provided. 
---
> PPMd is a data compression algorithm developed by Dmitry Shkarin
> which includes a carryless rangecoder developed by Dmitry Subbotin.
> This algorithm is based on predictive phrase matching on multiple
> order contexts.  Information and source code for this algorithm
> can be found on the internet. Consult with the author of this
> algorithm for information on terms or restrictions on use.
2304,2305c2126,2128
< 5.10 PPMd - Method 98
< ---------------------
---
> Support for PPMd within the ZIP format currently is provided only 
> for version I, revision 1 of the algorithm.  Storage requirements
> for using this algorithm are as follows:
2307,2312c2130,2132
<     5.10.1 PPMd is a data compression algorithm developed by Dmitry Shkarin
<     which includes a carryless rangecoder developed by Dmitry Subbotin.
<     This algorithm is based on predictive phrase matching on multiple
<     order contexts.  Information and source code for this algorithm
<     can be found on the internet. Consult with the author of this
<     algorithm for information on terms or restrictions on use.
---
> Parameters needed to control the algorithm are stored in the two
> bytes immediately preceding the compressed data.  These bytes are
> used to store the following fields:
2314,2316c2134,2135
<     5.10.2 Support for PPMd within the ZIP format currently is provided only 
<     for version I, revision 1 of the algorithm.  Storage requirements
<     for using this algorithm are as follows:
---
> Model order - sets the maximum model order, default is 8, possible
>               values are from 2 to 16 inclusive
2318,2320c2137,2138
<     5.10.3 Parameters needed to control the algorithm are stored in the two
<     bytes immediately preceding the compressed data.  These bytes are
<     used to store the following fields:
---
> Sub-allocator size - sets the size of sub-allocator in MB, default is 50,
>             possible values are from 1MB to 256MB inclusive
2322,2323c2140,2141
<     Model order - sets the maximum model order, default is 8, possible
<                   values are from 2 to 16 inclusive
---
> Model restoration method - sets the method used to restart context
>             model at memory insufficiency, values are:
2325,2326c2143,2145
<     Sub-allocator size - sets the size of sub-allocator in MB, default is 50,
<                     possible values are from 1MB to 256MB inclusive
---
>             0 - restarts model from scratch - default
>             1 - cut off model - decreases performance by as much as 2x
>             2 - freeze context tree - not recommended
2328,2329c2147,2149
<     Model restoration method - sets the method used to restart context
<                     model at memory insufficiency, values are:
---
> An example for packing these fields into the 2 byte storage field is
> illustrated below.  These values are stored in Intel low-byte/high-byte
> order.
2331,2333c2151,2153
<                     0 - restarts model from scratch - default
<                     1 - cut off model - decreases performance by as much as 2x
<                     2 - freeze context tree - not recommended
---
> wPPMd = (Model order - 1) + 
>         ((Sub-allocator size - 1) << 4) + 
>         (Model restoration method << 12)
2335,2337d2154
<     5.10.4 An example for packing these fields into the 2 byte storage field is
<     illustrated below.  These values are stored in Intel low-byte/high-byte
<     order.
2339,2341c2156,2157
<     wPPMd = (Model order - 1) + 
<             ((Sub-allocator size - 1) << 4) + 
<             (Model restoration method << 12)
---
> VII. Traditional PKWARE Encryption
> ----------------------------------
2342a2159,2257
> The following information discusses the decryption steps
> required to support traditional PKWARE encryption.  This
> form of encryption is considered weak by today's standards
> and its use is recommended only for situations with
> low security needs or for compatibility with older .ZIP 
> applications.
> 
> Decryption
> ----------
> 
> PKWARE is grateful to Mr. Roger Schlafly for his expert contribution 
> towards the development of PKWARE's traditional encryption.
> 
> PKZIP encrypts the compressed data stream.  Encrypted files must
> be decrypted before they can be extracted.
> 
> Each encrypted file has an extra 12 bytes stored at the start of
> the data area defining the encryption header for that file.  The
> encryption header is originally set to random values, and then
> itself encrypted, using three, 32-bit keys.  The key values are
> initialized using the supplied encryption password.  After each byte
> is encrypted, the keys are then updated using pseudo-random number
> generation techniques in combination with the same CRC-32 algorithm
> used in PKZIP and described elsewhere in this document.
> 
> The following is the basic steps required to decrypt a file:
> 
> 1) Initialize the three 32-bit keys with the password.
> 2) Read and decrypt the 12-byte encryption header, further
>    initializing the encryption keys.
> 3) Read and decrypt the compressed data stream using the
>    encryption keys.
> 
> Step 1 - Initializing the encryption keys
> -----------------------------------------
> 
> Key(0) <- 305419896
> Key(1) <- 591751049
> Key(2) <- 878082192
> 
> loop for i <- 0 to length(password)-1
>     update_keys(password(i))
> end loop
> 
> Where update_keys() is defined as:
> 
> update_keys(char):
>   Key(0) <- crc32(key(0),char)
>   Key(1) <- Key(1) + (Key(0) & 000000ffH)
>   Key(1) <- Key(1) * 134775813 + 1
>   Key(2) <- crc32(key(2),key(1) >> 24)
> end update_keys
> 
> Where crc32(old_crc,char) is a routine that given a CRC value and a
> character, returns an updated CRC value after applying the CRC-32
> algorithm described elsewhere in this document.
> 
> Step 2 - Decrypting the encryption header
> -----------------------------------------
> 
> The purpose of this step is to further initialize the encryption
> keys, based on random data, to render a plaintext attack on the
> data ineffective.
> 
> Read the 12-byte encryption header into Buffer, in locations
> Buffer(0) thru Buffer(11).
> 
> loop for i <- 0 to 11
>     C <- buffer(i) ^ decrypt_byte()
>     update_keys(C)
>     buffer(i) <- C
> end loop
> 
> Where decrypt_byte() is defined as:
> 
> unsigned char decrypt_byte()
>     local unsigned short temp
>     temp <- Key(2) | 2
>     decrypt_byte <- (temp * (temp ^ 1)) >> 8
> end decrypt_byte
> 
> After the header is decrypted,  the last 1 or 2 bytes in Buffer
> should be the high-order word/byte of the CRC for the file being
> decrypted, stored in Intel low-byte/high-byte order.  Versions of
> PKZIP prior to 2.0 used a 2 byte CRC check; a 1 byte CRC check is
> used on versions after 2.0.  This can be used to test if the password
> supplied is correct or not.
> 
> Step 3 - Decrypting the compressed data stream
> ----------------------------------------------
> 
> The compressed data stream can be decrypted as follows:
> 
> loop until done
>     read a character into C
>     Temp <- C ^ decrypt_byte()
>     update_keys(temp)
>     output Temp
> end loop
2344,2345d2258
< 6.0  Traditional PKWARE Encryption
< ----------------------------------
2347,2380c2260,2261
<     6.0.1 The following information discusses the decryption steps
<     required to support traditional PKWARE encryption.  This
<     form of encryption is considered weak by today's standards
<     and its use is recommended only for situations with
<     low security needs or for compatibility with older .ZIP 
<     applications.
< 
< 6.1 Traditional PKWARE Decryption
< ---------------------------------
< 
<     6.1.1 PKWARE is grateful to Mr. Roger Schlafly for his expert 
<     contribution towards the development of PKWARE's traditional 
<     encryption.
< 
<     6.1.2 PKZIP encrypts the compressed data stream.  Encrypted files 
<     must be decrypted before they can be extracted to their original
<     form.
< 
<     6.1.3 Each encrypted file has an extra 12 bytes stored at the start 
<     of the data area defining the encryption header for that file.  The
<     encryption header is originally set to random values, and then
<     itself encrypted, using three, 32-bit keys.  The key values are
<     initialized using the supplied encryption password.  After each byte
<     is encrypted, the keys are then updated using pseudo-random number
<     generation techniques in combination with the same CRC-32 algorithm
<     used in PKZIP and described elsewhere in this document.
< 
<     6.1.4 The following are the basic steps required to decrypt a file:
< 
<     1) Initialize the three 32-bit keys with the password.
<     2) Read and decrypt the 12-byte encryption header, further
<        initializing the encryption keys.
<     3) Read and decrypt the compressed data stream using the
<        encryption keys.
---
> VIII. Strong Encryption Specification
> -------------------------------------
2382,2386c2263,2313
<     6.1.5 Initializing the encryption keys
<         
<     Key(0) <- 305419896
<     Key(1) <- 591751049
<     Key(2) <- 878082192
---
> The Strong Encryption technology defined in this specification is 
> covered under a pending patent application. The use or implementation
> in a product of certain technological aspects set forth in the current
> APPNOTE, including those with regard to strong encryption, patching, 
> or extended tape operations requires a license from PKWARE. Portions
> of this Strong Encryption technology are available for use at no charge.
> Contact PKWARE for licensing terms and conditions. Refer to section II
> of this APPNOTE (Contacting PKWARE) for information on how to 
> contact PKWARE. 
> 
> Version 5.x of this specification introduced support for strong 
> encryption algorithms.  These algorithms can be used with either 
> a password or an X.509v3 digital certificate to encrypt each file. 
> This format specification supports either password or certificate 
> based encryption to meet the security needs of today, to enable 
> interoperability between users within both PKI and non-PKI 
> environments, and to ensure interoperability between different 
> computing platforms that are running a ZIP program.  
> 
> Password based encryption is the most common form of encryption 
> people are familiar with.  However, inherent weaknesses with 
> passwords (e.g. susceptibility to dictionary/brute force attack) 
> as well as password management and support issues make certificate 
> based encryption a more secure and scalable option.  Industry 
> efforts and support are defining and moving towards more advanced 
> security solutions built around X.509v3 digital certificates and 
> Public Key Infrastructures(PKI) because of the greater scalability, 
> administrative options, and more robust security over traditional 
> password based encryption. 
> 
> Most standard encryption algorithms are supported with this
> specification. Reference implementations for many of these 
> algorithms are available from either commercial or open source 
> distributors.  Readily available cryptographic toolkits make
> implementation of the encryption features straight-forward.  
> This document is not intended to provide a treatise on data 
> encryption principles or theory.  Its purpose is to document the 
> data structures required for implementing interoperable data 
> encryption within the .ZIP format.  It is strongly recommended that 
> you have a good understanding of data encryption before reading 
> further.
> 
> The algorithms introduced in Version 5.0 of this specification 
> include:
> 
>     RC2 40 bit, 64 bit, and 128 bit
>     RC4 40 bit, 64 bit, and 128 bit
>     DES
>     3DES 112 bit and 168 bit
>   
> Version 5.1 adds support for the following:
2388,2390c2315
<     loop for i <- 0 to length(password)-1
<         update_keys(password(i))
<     end loop
---
>     AES 128 bit, 192 bit, and 256 bit
2392d2316
<     Where update_keys() is defined as:
2394,2403c2318,2416
<     update_keys(char):
<       Key(0) <- crc32(key(0),char)
<       Key(1) <- Key(1) + (Key(0) & 000000ffH)
<       Key(1) <- Key(1) * 134775813 + 1
<       Key(2) <- crc32(key(2),key(1) >> 24)
<     end update_keys
< 
<     Where crc32(old_crc,char) is a routine that given a CRC value and a
<     character, returns an updated CRC value after applying the CRC-32
<     algorithm described elsewhere in this document.
---
> Version 6.1 introduces encryption data changes to support 
> interoperability with Smartcard and USB Token certificate storage 
> methods which do not support the OAEP strengthening standard.
> 
> Version 6.2 introduces support for encrypting metadata by compressing 
> and encrypting the central directory data structure to reduce information 
> leakage.   Information leakage can occur in legacy ZIP applications 
> through exposure of information about a file even though that file is 
> stored encrypted.  The information exposed consists of file 
> characteristics stored within the records and fields defined by this 
> specification.  This includes data such as a files name, its original 
> size, timestamp and CRC32 value. 
> 
> Version 6.3 introduces support for encrypting data using the Blowfish
> and Twofish algorithms.  These are symmetric block ciphers developed 
> by Bruce Schneier.  Blowfish supports using a variable length key from 
> 32 to 448 bits.  Block size is 64 bits.  Implementations should use 16
> rounds and the only mode supported within ZIP files is CBC. Twofish 
> supports key sizes 128, 192 and 256 bits.  Block size is 128 bits.  
> Implementations should use 16 rounds and the only mode supported within
> ZIP files is CBC.  Information and source code for both Blowfish and 
> Twofish algorithms can be found on the internet.  Consult with the author
> of these algorithms for information on terms or restrictions on use.
> 
> Central Directory Encryption provides greater protection against 
> information leakage by encrypting the Central Directory structure and 
> by masking key values that are replicated in the unencrypted Local 
> Header.   ZIP compatible programs that cannot interpret an encrypted 
> Central Directory structure cannot rely on the data in the corresponding 
> Local Header for decompression information.  
> 
> Extra Field records that may contain information about a file that should 
> not be exposed should not be stored in the Local Header and should only 
> be written to the Central Directory where they can be encrypted.  This 
> design currently does not support streaming.  Information in the End of 
> Central Directory record, the Zip64 End of Central Directory Locator, 
> and the Zip64 End of Central Directory records are not encrypted.  Access 
> to view data on files within a ZIP file with an encrypted Central Directory
> requires the appropriate password or private key for decryption prior to 
> viewing any files, or any information about the files, in the archive.  
> 
> Older ZIP compatible programs not familiar with the Central Directory 
> Encryption feature will no longer be able to recognize the Central 
> Directory and may assume the ZIP file is corrupt.  Programs that 
> attempt streaming access using Local Headers will see invalid 
> information for each file.  Central Directory Encryption need not be 
> used for every ZIP file.  Its use is recommended for greater security.  
> ZIP files not using Central Directory Encryption should operate as 
> in the past. 
> 
> This strong encryption feature specification is intended to provide for 
> scalable, cross-platform encryption needs ranging from simple password
> encryption to authenticated public/private key encryption.  
> 
> Encryption provides data confidentiality and privacy.  It is 
> recommended that you combine X.509 digital signing with encryption 
> to add authentication and non-repudiation.
> 
> 
> Single Password Symmetric Encryption Method:
> -------------------------------------------
> 
> The Single Password Symmetric Encryption Method using strong 
> encryption algorithms operates similarly to the traditional 
> PKWARE encryption defined in this format.  Additional data 
> structures are added to support the processing needs of the 
> strong algorithms.
> 
> The Strong Encryption data structures are:
> 
> 1. General Purpose Bits - Bits 0 and 6 of the General Purpose bit 
> flag in both local and central header records.  Both bits set 
> indicates strong encryption.  Bit 13, when set indicates the Central
> Directory is encrypted and that selected fields in the Local Header
> are masked to hide their actual value.
> 
> 
> 2. Extra Field 0x0017 in central header only.
> 
>      Fields to consider in this record are:
> 
>      Format - the data format identifier for this record.  The only
>      value allowed at this time is the integer value 2.
> 
>      AlgId - integer identifier of the encryption algorithm from the
>      following range
> 
>          0x6601 - DES
>          0x6602 - RC2 (version needed to extract < 5.2)
>          0x6603 - 3DES 168
>          0x6609 - 3DES 112
>          0x660E - AES 128 
>          0x660F - AES 192 
>          0x6610 - AES 256 
>          0x6702 - RC2 (version needed to extract >= 5.2)
>          0x6720 - Blowfish
>          0x6721 - Twofish
>          0x6801 - RC4
>          0xFFFF - Unknown algorithm
2405,2418c2418
<     6.1.6 Decrypting the encryption header
<         
<     The purpose of this step is to further initialize the encryption
<     keys, based on random data, to render a plaintext attack on the
<     data ineffective.
< 
<     Read the 12-byte encryption header into Buffer, in locations
<     Buffer(0) thru Buffer(11).
< 
<     loop for i <- 0 to 11
<         C <- buffer(i) ^ decrypt_byte()
<         update_keys(C)
<         buffer(i) <- C
<     end loop
---
>      Bitlen - Explicit bit length of key
2420c2420,2422
<     Where decrypt_byte() is defined as:
---
>          32 - 448 bits
>    
>      Flags - Processing flags needed for decryption
2422,2444c2424,2426
<     unsigned char decrypt_byte()
<         local unsigned short temp
<         temp <- Key(2) | 2
<         decrypt_byte <- (temp * (temp ^ 1)) >> 8
<     end decrypt_byte
< 
<     After the header is decrypted,  the last 1 or 2 bytes in Buffer
<     should be the high-order word/byte of the CRC for the file being
<     decrypted, stored in Intel low-byte/high-byte order.  Versions of
<     PKZIP prior to 2.0 used a 2 byte CRC check; a 1 byte CRC check is
<     used on versions after 2.0.  This can be used to test if the password
<     supplied is correct or not.
< 
<     6.1.7 Decrypting the compressed data stream
<     
<     The compressed data stream can be decrypted as follows:
< 
<     loop until done
<         read a character into C
<         Temp <- C ^ decrypt_byte()
<         update_keys(temp)
<         output Temp
<     end loop
---
>          0x0001 - Password is required to decrypt
>          0x0002 - Certificates only
>          0x0003 - Password or certificate required to decrypt
2445a2428
>          Values > 0x0003 reserved for certificate processing
2447,2448d2429
< 7.0 Strong Encryption Specification
< -----------------------------------
2450,2498c2431
<    7.0.1 Portions of the Strong Encryption technology defined in this 
<    specification are covered under patents and pending patent applications.
<    Refer to the section in this document entitled "Incorporating 
<    PKWARE Proprietary Technology into Your Product" for more information.
< 
< 7.1 Strong Encryption Overview
< ------------------------------
< 
<    7.1.1 Version 5.x of this specification introduced support for strong 
<    encryption algorithms.  These algorithms can be used with either 
<    a password or an X.509v3 digital certificate to encrypt each file. 
<    This format specification supports either password or certificate 
<    based encryption to meet the security needs of today, to enable 
<    interoperability between users within both PKI and non-PKI 
<    environments, and to ensure interoperability between different 
<    computing platforms that are running a ZIP program.  
< 
<    7.1.2 Password based encryption is the most common form of encryption 
<    people are familiar with.  However, inherent weaknesses with 
<    passwords (e.g. susceptibility to dictionary/brute force attack) 
<    as well as password management and support issues make certificate 
<    based encryption a more secure and scalable option.  Industry 
<    efforts and support are defining and moving towards more advanced 
<    security solutions built around X.509v3 digital certificates and 
<    Public Key Infrastructures(PKI) because of the greater scalability, 
<    administrative options, and more robust security over traditional 
<    password based encryption. 
< 
<    7.1.3 Most standard encryption algorithms are supported with this
<    specification. Reference implementations for many of these 
<    algorithms are available from either commercial or open source 
<    distributors.  Readily available cryptographic toolkits make
<    implementation of the encryption features straight-forward.  
<    This document is not intended to provide a treatise on data 
<    encryption principles or theory.  Its purpose is to document the 
<    data structures required for implementing interoperable data 
<    encryption within the .ZIP format.  It is strongly recommended that 
<    you have a good understanding of data encryption before reading 
<    further.
< 
<    7.1.4 The algorithms introduced in Version 5.0 of this specification 
<    include:
< 
<       RC2 40 bit, 64 bit, and 128 bit
<       RC4 40 bit, 64 bit, and 128 bit
<       DES
<       3DES 112 bit and 168 bit
<   
<    Version 5.1 adds support for the following:
---
> 3. Decryption header record preceding compressed file data.
2500c2433
<       AES 128 bit, 192 bit, and 256 bit
---
>          -Decryption Header:
2501a2435,2476
>           Value     Size     Description
>           -----     ----     -----------
>           IVSize    2 bytes  Size of initialization vector (IV)
>           IVData    IVSize   Initialization vector for this file
>           Size      4 bytes  Size of remaining decryption header data
>           Format    2 bytes  Format definition for this record
>           AlgID     2 bytes  Encryption algorithm identifier
>           Bitlen    2 bytes  Bit length of encryption key
>           Flags     2 bytes  Processing flags
>           ErdSize   2 bytes  Size of Encrypted Random Data
>           ErdData   ErdSize  Encrypted Random Data
>           Reserved1 4 bytes  Reserved certificate processing data
>           Reserved2 (var)    Reserved for certificate processing data
>           VSize     2 bytes  Size of password validation data
>           VData     VSize-4  Password validation data
>           VCRC32    4 bytes  Standard ZIP CRC32 of password validation data
> 
>      IVData - The size of the IV should match the algorithm block size.
>               The IVData can be completely random data.  If the size of
>               the randomly generated data does not match the block size
>               it should be complemented with zero's or truncated as
>               necessary.  If IVSize is 0,then IV = CRC32 + Uncompressed
>               File Size (as a 64 bit little-endian, unsigned integer value).
> 
>      Format - the data format identifier for this record.  The only
>      value allowed at this time is the integer value 3.
> 
>      AlgId - integer identifier of the encryption algorithm from the
>      following range
> 
>          0x6601 - DES
>          0x6602 - RC2 (version needed to extract < 5.2)
>          0x6603 - 3DES 168
>          0x6609 - 3DES 112
>          0x660E - AES 128 
>          0x660F - AES 192 
>          0x6610 - AES 256 
>          0x6702 - RC2 (version needed to extract >= 5.2)
>          0x6720 - Blowfish
>          0x6721 - Twofish
>          0x6801 - RC4
>          0xFFFF - Unknown algorithm
2503,2559c2478
<    7.1.5 Version 6.1 introduces encryption data changes to support 
<    interoperability with Smartcard and USB Token certificate storage 
<    methods which do not support the OAEP strengthening standard.
< 
<    7.1.6 Version 6.2 introduces support for encrypting metadata by compressing 
<    and encrypting the central directory data structure to reduce information 
<    leakage.   Information leakage can occur in legacy ZIP applications 
<    through exposure of information about a file even though that file is 
<    stored encrypted.  The information exposed consists of file 
<    characteristics stored within the records and fields defined by this 
<    specification.  This includes data such as a file's name, its original 
<    size, timestamp and CRC32 value. 
< 
<    7.1.7 Version 6.3 introduces support for encrypting data using the Blowfish
<    and Twofish algorithms.  These are symmetric block ciphers developed 
<    by Bruce Schneier.  Blowfish supports using a variable length key from 
<    32 to 448 bits.  Block size is 64 bits.  Implementations should use 16
<    rounds and the only mode supported within ZIP files is CBC. Twofish 
<    supports key sizes 128, 192 and 256 bits.  Block size is 128 bits.  
<    Implementations should use 16 rounds and the only mode supported within
<    ZIP files is CBC.  Information and source code for both Blowfish and 
<    Twofish algorithms can be found on the internet.  Consult with the author
<    of these algorithms for information on terms or restrictions on use.
< 
<    7.1.8 Central Directory Encryption provides greater protection against 
<    information leakage by encrypting the Central Directory structure and 
<    by masking key values that are replicated in the unencrypted Local 
<    Header.   ZIP compatible programs that cannot interpret an encrypted 
<    Central Directory structure cannot rely on the data in the corresponding 
<    Local Header for decompression information.  
< 
<    7.1.9 Extra Field records that may contain information about a file that should 
<    not be exposed should not be stored in the Local Header and should only 
<    be written to the Central Directory where they can be encrypted.  This 
<    design currently does not support streaming.  Information in the End of 
<    Central Directory record, the Zip64 End of Central Directory Locator, 
<    and the Zip64 End of Central Directory records are not encrypted.  Access 
<    to view data on files within a ZIP file with an encrypted Central Directory
<    requires the appropriate password or private key for decryption prior to 
<    viewing any files, or any information about the files, in the archive.  
< 
<    7.1.10 Older ZIP compatible programs not familiar with the Central Directory 
<    Encryption feature will no longer be able to recognize the Central 
<    Directory and may assume the ZIP file is corrupt.  Programs that 
<    attempt streaming access using Local Headers will see invalid 
<    information for each file.  Central Directory Encryption need not be 
<    used for every ZIP file.  Its use is recommended for greater security.  
<    ZIP files not using Central Directory Encryption should operate as 
<    in the past. 
< 
<    7.1.11 This strong encryption feature specification is intended to provide for 
<    scalable, cross-platform encryption needs ranging from simple password
<    encryption to authenticated public/private key encryption.  
< 
<    7.1.12 Encryption provides data confidentiality and privacy.  It is 
<    recommended that you combine X.509 digital signing with encryption 
<    to add authentication and non-repudiation.
---
>      Bitlen - Explicit bit length of key
2560a2480,2482
>          32 - 448 bits
>    
>      Flags - Processing flags needed for decryption
2562,2563c2484,2552
< 7.2 Single Password Symmetric Encryption Method
< -----------------------------------------------
---
>          0x0001 - Password is required to decrypt
>          0x0002 - Certificates only
>          0x0003 - Password or certificate required to decrypt
> 
>          Values > 0x0003 reserved for certificate processing
> 
>      ErdData - Encrypted random data is used to store random data that
>                is used to generate a file session key for encrypting 
>                each file.  SHA1 is used to calculate hash data used to 
>                derive keys.  File session keys are derived from a master 
>                session key generated from the user-supplied password.
>                If the Flags field in the decryption header contains 
>                the value 0x4000, then the ErdData field must be 
>                decrypted using 3DES. If the value 0x4000 is not set,
>                then the ErdData field must be decrypted using AlgId.
> 
> 
>      Reserved1 - Reserved for certificate processing, if value is
>                zero, then Reserved2 data is absent.  See the explanation
>                under the Certificate Processing Method for details on
>                this data structure.
> 
>      Reserved2 - If present, the size of the Reserved2 data structure 
>                is located by skipping the first 4 bytes of this field 
>                and using the next 2 bytes as the remaining size.  See
>                the explanation under the Certificate Processing Method
>                for details on this data structure.
> 
>      VSize - This size value will always include the 4 bytes of the
>              VCRC32 data and will be greater than 4 bytes.
> 
>      VData - Random data for password validation.  This data is VSize
>              in length and VSize must be a multiple of the encryption
>              block size.  VCRC32 is a checksum value of VData.  
>              VData and VCRC32 are stored encrypted and start the
>              stream of encrypted data for a file.
> 
> 
> 4. Useful Tips
> 
> Strong Encryption is always applied to a file after compression. The
> block oriented algorithms all operate in Cypher Block Chaining (CBC) 
> mode.  The block size used for AES encryption is 16.  All other block
> algorithms use a block size of 8.  Two ID's are defined for RC2 to 
> account for a discrepancy found in the implementation of the RC2
> algorithm in the cryptographic library on Windows XP SP1 and all 
> earlier versions of Windows.  It is recommended that zero length files
> not be encrypted, however programs should be prepared to extract them
> if they are found within a ZIP file.
> 
> A pseudo-code representation of the encryption process is as follows:
> 
> Password = GetUserPassword()
> MasterSessionKey = DeriveKey(SHA1(Password)) 
> RD = CryptographicStrengthRandomData() 
> For Each File
>    IV = CryptographicStrengthRandomData() 
>    VData = CryptographicStrengthRandomData()
>    VCRC32 = CRC32(VData)
>    FileSessionKey = DeriveKey(SHA1(IV + RD) 
>    ErdData = Encrypt(RD,MasterSessionKey,IV) 
>    Encrypt(VData + VCRC32 + FileData, FileSessionKey,IV)
> Done
> 
> The function names and parameter requirements will depend on
> the choice of the cryptographic toolkit selected.  Almost any
> toolkit supporting the reference implementations for each
> algorithm can be used.  The RSA BSAFE(r), OpenSSL, and Microsoft
> CryptoAPI libraries are all known to work well.  
2565,2737d2553
<    7.2.1 The Single Password Symmetric Encryption Method using strong    
<    encryption algorithms operates similarly to the traditional 
<    PKWARE encryption defined in this format.  Additional data 
<    structures are added to support the processing needs of the 
<    strong algorithms.
< 
<    The Strong Encryption data structures are:
< 
<    7.2.2 General Purpose Bits - Bits 0 and 6 of the General Purpose bit 
<    flag in both local and central header records.  Both bits set 
<    indicates strong encryption.  Bit 13, when set indicates the Central
<    Directory is encrypted and that selected fields in the Local Header
<    are masked to hide their actual value.
< 
< 
<     7.2.3 Extra Field 0x0017 in central header only.
< 
<     Fields to consider in this record are:
< 
<        7.2.3.1 Format - the data format identifier for this record.  The only
<        value allowed at this time is the integer value 2.
< 
<        7.2.3.2 AlgId - integer identifier of the encryption algorithm from the
<        following range
< 
<                  0x6601 - DES
<                  0x6602 - RC2 (version needed to extract < 5.2)
<                  0x6603 - 3DES 168
<                  0x6609 - 3DES 112
<                  0x660E - AES 128 
<                  0x660F - AES 192 
<                  0x6610 - AES 256 
<                  0x6702 - RC2 (version needed to extract >= 5.2)
<                  0x6720 - Blowfish
<                  0x6721 - Twofish
<                  0x6801 - RC4
<                  0xFFFF - Unknown algorithm
< 
<        7.2.3.3 Bitlen - Explicit bit length of key
< 
<                  32 - 448 bits
<            
<        7.2.3.4 Flags - Processing flags needed for decryption
< 
<                  0x0001 - Password is required to decrypt
<                  0x0002 - Certificates only
<                  0x0003 - Password or certificate required to decrypt
< 
<                  Values > 0x0003 reserved for certificate processing
< 
< 
<    7.2.4 Decryption header record preceding compressed file data.
< 
<                  -Decryption Header:
< 
<                   Value     Size     Description
<                   -----     ----     -----------
<                   IVSize    2 bytes  Size of initialization vector (IV)
<                   IVData    IVSize   Initialization vector for this file
<                   Size      4 bytes  Size of remaining decryption header data
<                   Format    2 bytes  Format definition for this record
<                   AlgID     2 bytes  Encryption algorithm identifier
<                   Bitlen    2 bytes  Bit length of encryption key
<                   Flags     2 bytes  Processing flags
<                   ErdSize   2 bytes  Size of Encrypted Random Data
<                   ErdData   ErdSize  Encrypted Random Data
<                   Reserved1 4 bytes  Reserved certificate processing data
<                   Reserved2 (var)    Reserved for certificate processing data
<                   VSize     2 bytes  Size of password validation data
<                   VData     VSize-4  Password validation data
<                   VCRC32    4 bytes  Standard ZIP CRC32 of password validation data
< 
<        7.2.4.1 IVData - The size of the IV should match the algorithm block size.
<        The IVData can be completely random data.  If the size of
<        the randomly generated data does not match the block size
<        it should be complemented with zero's or truncated as
<        necessary.  If IVSize is 0,then IV = CRC32 + Uncompressed
<        File Size (as a 64 bit little-endian, unsigned integer value).
< 
<        7.2.4.2 Format - the data format identifier for this record.  The only
<        value allowed at this time is the integer value 3.
< 
<        7.2.4.3 AlgId - integer identifier of the encryption algorithm from the
<        following range
< 
<                      0x6601 - DES
<                      0x6602 - RC2 (version needed to extract < 5.2)
<                      0x6603 - 3DES 168
<                      0x6609 - 3DES 112
<                      0x660E - AES 128 
<                      0x660F - AES 192 
<                      0x6610 - AES 256 
<                      0x6702 - RC2 (version needed to extract >= 5.2)
<                      0x6720 - Blowfish
<                      0x6721 - Twofish
<                      0x6801 - RC4
<                      0xFFFF - Unknown algorithm
< 
<         7.2.4.4 Bitlen - Explicit bit length of key
< 
<                      32 - 448 bits
<                
<         7.2.4.5 Flags - Processing flags needed for decryption
< 
<                      0x0001 - Password is required to decrypt
<                      0x0002 - Certificates only
<                      0x0003 - Password or certificate required to decrypt
< 
<                      Values > 0x0003 reserved for certificate processing
< 
<         7.2.4.6 ErdData - Encrypted random data is used to store random data that
<         is used to generate a file session key for encrypting 
<         each file.  SHA1 is used to calculate hash data used to 
<         derive keys.  File session keys are derived from a master 
<         session key generated from the user-supplied password.
<         If the Flags field in the decryption header contains 
<         the value 0x4000, then the ErdData field must be 
<         decrypted using 3DES. If the value 0x4000 is not set,
<         then the ErdData field must be decrypted using AlgId.
< 
< 
<         7.2.4.7 Reserved1 - Reserved for certificate processing, if value is
<         zero, then Reserved2 data is absent.  See the explanation
<         under the Certificate Processing Method for details on
<         this data structure.
< 
<         7.2.4.8 Reserved2 - If present, the size of the Reserved2 data structure 
<         is located by skipping the first 4 bytes of this field 
<         and using the next 2 bytes as the remaining size.  See
<         the explanation under the Certificate Processing Method
<         for details on this data structure.
< 
<         7.2.4.9 VSize - This size value will always include the 4 bytes of the
<         VCRC32 data and will be greater than 4 bytes.
< 
<         7.2.4.10 VData - Random data for password validation.  This data is VSize
<         in length and VSize must be a multiple of the encryption
<         block size.  VCRC32 is a checksum value of VData.  
<         VData and VCRC32 are stored encrypted and start the
<         stream of encrypted data for a file.
< 
< 
<     7.2.5 Useful Tips
< 
<         7.2.5.1 Strong Encryption is always applied to a file after compression. The
<         block oriented algorithms all operate in Cypher Block Chaining (CBC) 
<         mode.  The block size used for AES encryption is 16.  All other block
<         algorithms use a block size of 8.  Two IDs are defined for RC2 to 
<         account for a discrepancy found in the implementation of the RC2
<         algorithm in the cryptographic library on Windows XP SP1 and all 
<         earlier versions of Windows.  It is recommended that zero length files
<         not be encrypted, however programs should be prepared to extract them
<         if they are found within a ZIP file.
< 
<         7.2.5.2 A pseudo-code representation of the encryption process is as follows:
< 
<             Password = GetUserPassword()
<             MasterSessionKey = DeriveKey(SHA1(Password)) 
<             RD = CryptographicStrengthRandomData() 
<             For Each File
<                IV = CryptographicStrengthRandomData() 
<                VData = CryptographicStrengthRandomData()
<                VCRC32 = CRC32(VData)
<                FileSessionKey = DeriveKey(SHA1(IV + RD) 
<                ErdData = Encrypt(RD,MasterSessionKey,IV) 
<                Encrypt(VData + VCRC32 + FileData, FileSessionKey,IV)
<             Done
< 
<         7.2.5.3 The function names and parameter requirements will depend on
<         the choice of the cryptographic toolkit selected.  Almost any
<         toolkit supporting the reference implementations for each
<         algorithm can be used.  The RSA BSAFE(r), OpenSSL, and Microsoft
<         CryptoAPI libraries are all known to work well.  
2738a2555,2556
> Single Password - Central Directory Encryption:
> -----------------------------------------------
2740,2902c2558,2717
<  7.3 Single Password - Central Directory Encryption
<  --------------------------------------------------
<         
<     7.3.1 Central Directory Encryption is achieved within the .ZIP format by 
<     encrypting the Central Directory structure.  This encapsulates the metadata 
<     most often used for processing .ZIP files.  Additional metadata is stored for 
<     redundancy in the Local Header for each file.  The process of concealing 
<     metadata by encrypting the Central Directory does not protect the data within 
<     the Local Header.  To avoid information leakage from the exposed metadata 
<     in the Local Header, the fields containing information about a file are masked.  
< 
<     7.3.2 Local Header
< 
<     Masking replaces the true content of the fields for a file in the Local 
<     Header with false information.  When masked, the Local Header is not 
<     suitable for streaming access and the options for data recovery of damaged
<     archives is reduced.  Extra Data fields that may contain confidential
<     data should not be stored within the Local Header.  The value set into
<     the Version needed to extract field should be the correct value needed to
<     extract the file without regard to Central Directory Encryption. The fields 
<     within the Local Header targeted for masking when the Central Directory is 
<     encrypted are:
< 
<             Field Name                     Mask Value
<             ------------------             ---------------------------
<             compression method              0
<             last mod file time              0
<             last mod file date              0
<             crc-32                          0
<             compressed size                 0
<             uncompressed size               0
<             file name (variable size)       Base 16 value from the
<                                             range 1 - 0xFFFFFFFFFFFFFFFF
<                                             represented as a string whose
<                                             size will be set into the
<                                             file name length field
< 
<     The Base 16 value assigned as a masked file name is simply a sequentially
<     incremented value for each file starting with 1 for the first file.  
<     Modifications to a ZIP file may cause different values to be stored for 
<     each file.  For compatibility, the file name field in the Local Header 
<     should never be left blank.  As of Version 6.2 of this specification, 
<     the Compression Method and Compressed Size fields are not yet masked.
<     Fields having a value of 0xFFFF or 0xFFFFFFFF for the ZIP64 format
<     should not be masked.  
< 
<     7.3.3 Encrypting the Central Directory
< 
<     Encryption of the Central Directory does not include encryption of the 
<     Central Directory Signature data, the Zip64 End of Central Directory
<     record, the Zip64 End of Central Directory Locator, or the End
<     of Central Directory record.  The ZIP file comment data is never
<     encrypted.
< 
<     Before encrypting the Central Directory, it may optionally be compressed.
<     Compression is not required, but for storage efficiency it is assumed
<     this structure will be compressed before encrypting.  Similarly, this 
<     specification supports compressing the Central Directory without
<     requiring that it also be encrypted.  Early implementations of this
<     feature will assume the encryption method applied to files matches the 
<     encryption applied to the Central Directory.
< 
<     Encryption of the Central Directory is done in a manner similar to
<     that of file encryption.  The encrypted data is preceded by a 
<     decryption header.  The decryption header is known as the Archive
<     Decryption Header.  The fields of this record are identical to
<     the decryption header preceding each encrypted file.  The location
<     of the Archive Decryption Header is determined by the value in the
<     Start of the Central Directory field in the Zip64 End of Central
<     Directory record.  When the Central Directory is encrypted, the
<     Zip64 End of Central Directory record will always be present.
< 
<     The layout of the Zip64 End of Central Directory record for all
<     versions starting with 6.2 of this specification will follow the
<     Version 2 format.  The Version 2 format is as follows:
< 
<     The leading fixed size fields within the Version 1 format for this
<     record remain unchanged.  The record signature for both Version 1 
<     and Version 2 will be 0x06064b50.  Immediately following the last
<     byte of the field known as the Offset of Start of Central 
<     Directory With Respect to the Starting Disk Number will begin the 
<     new fields defining Version 2 of this record.  
< 
<     7.3.4 New fields for Version 2
< 
<     Note: all fields stored in Intel low-byte/high-byte order.
< 
<               Value                 Size       Description
<               -----                 ----       -----------
<               Compression Method    2 bytes    Method used to compress the
<                                                Central Directory
<               Compressed Size       8 bytes    Size of the compressed data
<               Original   Size       8 bytes    Original uncompressed size
<               AlgId                 2 bytes    Encryption algorithm ID
<               BitLen                2 bytes    Encryption key length
<               Flags                 2 bytes    Encryption flags
<               HashID                2 bytes    Hash algorithm identifier
<               Hash Length           2 bytes    Length of hash data
<               Hash Data             (variable) Hash data
< 
<      The Compression Method accepts the same range of values as the 
<      corresponding field in the Central Header.
< 
<      The Compressed Size and Original Size values will not include the
<      data of the Central Directory Signature which is compressed or
<      encrypted.
< 
<      The AlgId, BitLen, and Flags fields accept the same range of values
<      the corresponding fields within the 0x0017 record. 
< 
<      Hash ID identifies the algorithm used to hash the Central Directory 
<      data.  This data does not have to be hashed, in which case the
<      values for both the HashID and Hash Length will be 0.  Possible 
<      values for HashID are:
< 
<               Value         Algorithm
<              ------         ---------
<              0x0000          none
<              0x0001          CRC32
<              0x8003          MD5
<              0x8004          SHA1
<              0x8007          RIPEMD160
<              0x800C          SHA256
<              0x800D          SHA384
<              0x800E          SHA512
< 
<      7.3.5 When the Central Directory data is signed, the same hash algorithm
<      used to hash the Central Directory for signing should be used.
<      This is recommended for processing efficiency, however, it is 
<      permissible for any of the above algorithms to be used independent 
<      of the signing process.
< 
<      The Hash Data will contain the hash data for the Central Directory.
<      The length of this data will vary depending on the algorithm used.
< 
<      The Version Needed to Extract should be set to 62.
< 
<      The value for the Total Number of Entries on the Current Disk will
<      be 0.  These records will no longer support random access when
<      encrypting the Central Directory.
< 
<      7.3.6 When the Central Directory is compressed and/or encrypted, the
<      End of Central Directory record will store the value 0xFFFFFFFF
<      as the value for the Total Number of Entries in the Central
<      Directory.  The value stored in the Total Number of Entries in
<      the Central Directory on this Disk field will be 0.  The actual
<      values will be stored in the equivalent fields of the Zip64
<      End of Central Directory record.
< 
<      7.3.7 Decrypting and decompressing the Central Directory is accomplished
<      in the same manner as decrypting and decompressing a file.
< 
<  7.4 Certificate Processing Method
<  ---------------------------------
< 
<     The Certificate Processing Method for ZIP file encryption 
<     defines the following additional data fields:
< 
<     7.4.1 Certificate Flag Values
< 
<     Additional processing flags that can be present in the Flags field of both 
<     the 0x0017 field of the central directory Extra Field and the Decryption 
<     header record preceding compressed file data are:
---
> Central Directory Encryption is achieved within the .ZIP format by 
> encrypting the Central Directory structure.  This encapsulates the metadata 
> most often used for processing .ZIP files.  Additional metadata is stored for 
> redundancy in the Local Header for each file.  The process of concealing 
> metadata by encrypting the Central Directory does not protect the data within 
> the Local Header.  To avoid information leakage from the exposed metadata 
> in the Local Header, the fields containing information about a file are masked.  
> 
> Local Header:
> 
> Masking replaces the true content of the fields for a file in the Local 
> Header with false information.  When masked, the Local Header is not 
> suitable for streaming access and the options for data recovery of damaged
> archives is reduced.  Extra Data fields that may contain confidential
> data should not be stored within the Local Header.  The value set into
> the Version needed to extract field should be the correct value needed to
> extract the file without regard to Central Directory Encryption. The fields 
> within the Local Header targeted for masking when the Central Directory is 
> encrypted are:
> 
>         Field Name                     Mask Value
>         ------------------             ---------------------------
>         compression method              0
>         last mod file time              0
>         last mod file date              0
>         crc-32                          0
>         compressed size                 0
>         uncompressed size               0
>         file name (variable size)       Base 16 value from the
>                                         range 1 - 0xFFFFFFFFFFFFFFFF
>                                         represented as a string whose
>                                         size will be set into the
>                                         file name length field
> 
> The Base 16 value assigned as a masked file name is simply a sequentially
> incremented value for each file starting with 1 for the first file.  
> Modifications to a ZIP file may cause different values to be stored for 
> each file.  For compatibility, the file name field in the Local Header 
> should never be left blank.  As of Version 6.2 of this specification, 
> the Compression Method and Compressed Size fields are not yet masked.
> Fields having a value of 0xFFFF or 0xFFFFFFFF for the ZIP64 format
> should not be masked.  
> 
> Encrypting the Central Directory:
> 
> Encryption of the Central Directory does not include encryption of the 
> Central Directory Signature data, the Zip64 End of Central Directory
> record, the Zip64 End of Central Directory Locator, or the End
> of Central Directory record.  The ZIP file comment data is never
> encrypted.
> 
> Before encrypting the Central Directory, it may optionally be compressed.
> Compression is not required, but for storage efficiency it is assumed
> this structure will be compressed before encrypting.  Similarly, this 
> specification supports compressing the Central Directory without
> requiring that it also be encrypted.  Early implementations of this
> feature will assume the encryption method applied to files matches the 
> encryption applied to the Central Directory.
> 
> Encryption of the Central Directory is done in a manner similar to
> that of file encryption.  The encrypted data is preceded by a 
> decryption header.  The decryption header is known as the Archive
> Decryption Header.  The fields of this record are identical to
> the decryption header preceding each encrypted file.  The location
> of the Archive Decryption Header is determined by the value in the
> Start of the Central Directory field in the Zip64 End of Central
> Directory record.  When the Central Directory is encrypted, the
> Zip64 End of Central Directory record will always be present.
> 
> The layout of the Zip64 End of Central Directory record for all
> versions starting with 6.2 of this specification will follow the
> Version 2 format.  The Version 2 format is as follows:
> 
> The leading fixed size fields within the Version 1 format for this
> record remain unchanged.  The record signature for both Version 1 
> and Version 2 will be 0x06064b50.  Immediately following the last
> byte of the field known as the Offset of Start of Central 
> Directory With Respect to the Starting Disk Number will begin the 
> new fields defining Version 2 of this record.  
> 
> New fields for Version 2:
> 
> Note: all fields stored in Intel low-byte/high-byte order.
> 
>           Value                 Size       Description
>           -----                 ----       -----------
>           Compression Method    2 bytes    Method used to compress the
>                                            Central Directory
>           Compressed Size       8 bytes    Size of the compressed data
>           Original   Size       8 bytes    Original uncompressed size
>           AlgId                 2 bytes    Encryption algorithm ID
>           BitLen                2 bytes    Encryption key length
>           Flags                 2 bytes    Encryption flags
>           HashID                2 bytes    Hash algorithm identifier
>           Hash Length           2 bytes    Length of hash data
>           Hash Data             (variable) Hash data
> 
> The Compression Method accepts the same range of values as the 
> corresponding field in the Central Header.
> 
> The Compressed Size and Original Size values will not include the
> data of the Central Directory Signature which is compressed or
> encrypted.
> 
> The AlgId, BitLen, and Flags fields accept the same range of values
> the corresponding fields within the 0x0017 record. 
> 
> Hash ID identifies the algorithm used to hash the Central Directory 
> data.  This data does not have to be hashed, in which case the
> values for both the HashID and Hash Length will be 0.  Possible 
> values for HashID are:
> 
>       Value         Algorithm
>      ------         ---------
>      0x0000          none
>      0x0001          CRC32
>      0x8003          MD5
>      0x8004          SHA1
>      0x8007          RIPEMD160
>      0x800C          SHA256
>      0x800D          SHA384
>      0x800E          SHA512
> 
> When the Central Directory data is signed, the same hash algorithm
> used to hash the Central Directory for signing should be used.
> This is recommended for processing efficiency, however, it is 
> permissible for any of the above algorithms to be used independent 
> of the signing process.
> 
> The Hash Data will contain the hash data for the Central Directory.
> The length of this data will vary depending on the algorithm used.
> 
> The Version Needed to Extract should be set to 62.
> 
> The value for the Total Number of Entries on the Current Disk will
> be 0.  These records will no longer support random access when
> encrypting the Central Directory.
> 
> When the Central Directory is compressed and/or encrypted, the
> End of Central Directory record will store the value 0xFFFFFFFF
> as the value for the Total Number of Entries in the Central
> Directory.  The value stored in the Total Number of Entries in
> the Central Directory on this Disk field will be 0.  The actual
> values will be stored in the equivalent fields of the Zip64
> End of Central Directory record.
> 
> Decrypting and decompressing the Central Directory is accomplished
> in the same manner as decrypting and decompressing a file.
> 
> Certificate Processing Method:
> -----------------------------
> 
> The Certificate Processing Method of for ZIP file encryption 
> defines the following additional data fields:
> 
> 1. Certificate Flag Values
> 
> Additional processing flags that can be present in the Flags field of both 
> the 0x0017 field of the central directory Extra Field and the Decryption 
> header record preceding compressed file data are:
2916c2731
<     7.4.2 CertData - Extra Field 0x0017 record certificate data structure
---
> 2. CertData - Extra Field 0x0017 record certificate data structure
2918,2920c2733,2735
<     The data structure used to store certificate data within the section
<     of the Extra Field defined by the CertData field of the 0x0017
<     record are as shown:
---
> The data structure used to store certificate data within the section
> of the Extra Field defined by the CertData field of the 0x0017
> record are as shown:
2929,2932c2744,2747
<                           
<          RCount    This defines the number intended recipients whose 
<                    public keys were used for encryption.  This identifies
<                    the number of elements in the SRList.
---
>           
>      RCount    This defines the number intended recipients whose 
>                public keys were used for encryption.  This identifies
>                the number of elements in the SRList.
2934,2937c2749,2752
<          HashAlg   This defines the hash algorithm used to calculate
<                    the public key hash of each public key used
<                    for encryption. This field currently supports
<                    only the following value for SHA-1
---
>      HashAlg   This defines the hash algorithm used to calculate
>                the public key hash of each public key used
>                for encryption. This field currently supports
>                only the following value for SHA-1
2939c2754
<                    0x8004 - SHA1
---
>                0x8004 - SHA1
2941c2756
<          HSize     This defines the size of a hashed public key.
---
>      HSize     This defines the size of a hashed public key.
2943,2946c2758,2761
<          SRList    This is a variable length list of the hashed 
<                    public keys for each intended recipient.  Each 
<                    element in this list is HSize.  The total size of 
<                    SRList is determined using RCount * HSize.
---
>      SRList    This is a variable length list of the hashed 
>                public keys for each intended recipient.  Each 
>                element in this list is HSize.  The total size of 
>                SRList is determined using RCount * HSize.
2949c2764
<     7.4.3 Reserved1 - Certificate Decryption Header Reserved1 Data
---
> 3. Reserved1 - Certificate Decryption Header Reserved1 Data:
2954,2957c2769,2772
<                       
<           RCount   This defines the number intended recipients whose 
<                    public keys were used for encryption.  This defines
<                    the number of elements in the REList field defined below.
---
>           
>      RCount    This defines the number intended recipients whose 
>                public keys were used for encryption.  This defines
>                the number of elements in the REList field defined below.
2960c2775
<     7.4.4 Reserved2 - Certificate Decryption Header Reserved2 Data Structures
---
> 4. Reserved2 - Certificate Decryption Header Reserved2 Data Structures:
2970,3044c2785,2788
<          HashAlg   This defines the hash algorithm used to calculate
<                    the public key hash of each public key used
<                    for encryption. This field currently supports
<                    only the following value for SHA-1
< 
<                        0x8004 - SHA1
< 
<          HSize     This defines the size of a hashed public key
<                    defined in REHData.
< 
<          REList    This is a variable length of list of recipient data.  
<                    Each element in this list consists of a Recipient
<                    Element data structure as follows:
< 
< 
<         Recipient Element (REList) Data Structure:
< 
<               Value     Size     Description
<               -----     ----     -----------
<               RESize    2 bytes  Size of REHData + REKData
<               REHData   HSize    Hash of recipients public key
<               REKData   (var)    Simple key blob
< 
< 
<              RESize    This defines the size of an individual REList 
<                        element.  This value is the combined size of the
<                        REHData field + REKData field.  REHData is defined by
<                        HSize.  REKData is variable and can be calculated
<                        for each REList element using RESize and HSize.
< 
<              REHData   Hashed public key for this recipient.
< 
<              REKData   Simple Key Blob.  The format of this data structure
<                        is identical to that defined in the Microsoft
<                        CryptoAPI and generated using the CryptExportKey()
<                        function.  The version of the Simple Key Blob
<                        supported at this time is 0x02 as defined by
<                        Microsoft.
< 
< 7.5 Certificate Processing - Central Directory Encryption
< ---------------------------------------------------------
<         
<     7.5.1 Central Directory Encryption using Digital Certificates will 
<     operate in a manner similar to that of Single Password Central
<     Directory Encryption.  This record will only be present when there 
<     is data to place into it.  Currently, data is placed into this
<     record when digital certificates are used for either encrypting 
<     or signing the files within a ZIP file.  When only password 
<     encryption is used with no certificate encryption or digital 
<     signing, this record is not currently needed. When present, this 
<     record will appear before the start of the actual Central Directory 
<     data structure and will be located immediately after the Archive 
<     Decryption Header if the Central Directory is encrypted.
< 
<     7.5.2 The Archive Extra Data record will be used to store the following
<     information.  Additional data may be added in future versions.
< 
<     Extra Data Fields:
< 
<     0x0014 - PKCS#7 Store for X.509 Certificates
<     0x0016 - X.509 Certificate ID and Signature for central directory
<     0x0019 - PKCS#7 Encryption Recipient Certificate List
< 
<     The 0x0014 and 0x0016 Extra Data records that otherwise would be 
<     located in the first record of the Central Directory for digital 
<     certificate processing. When encrypting or compressing the Central 
<     Directory, the 0x0014 and 0x0016 records must be located in the 
<     Archive Extra Data record and they should not remain in the first 
<     Central Directory record.  The Archive Extra Data record will also 
<     be used to store the 0x0019 data. 
< 
<     7.5.3 When present, the size of the Archive Extra Data record will be
<     included in the size of the Central Directory.  The data of the
<     Archive Extra Data record will also be compressed and encrypted
<     along with the Central Directory data structure.
---
>      HashAlg   This defines the hash algorithm used to calculate
>                the public key hash of each public key used
>                for encryption. This field currently supports
>                only the following value for SHA-1
3046,3047c2790
< 7.6 Certificate Processing Differences
< --------------------------------------
---
>                0x8004 - SHA1
3049,3088c2792,2793
<     7.6.1 The Certificate Processing Method of encryption differs from the
<     Single Password Symmetric Encryption Method as follows.  Instead
<     of using a user-defined password to generate a master session key,
<     cryptographically random data is used.  The key material is then
<     wrapped using standard key-wrapping techniques.  This key material
<     is wrapped using the public key of each recipient that will need
<     to decrypt the file using their corresponding private key.
< 
<     7.6.2 This specification currently assumes digital certificates will follow
<     the X.509 V3 format for 1024 bit and higher RSA format digital
<     certificates.  Implementation of this Certificate Processing Method
<     requires supporting logic for key access and management.  This logic
<     is outside the scope of this specification.
< 
< 7.7 OAEP Processing with Certificate-based Encryption
< -----------------------------------------------------
< 
<     7.7.1 OAEP stands for Optimal Asymmetric Encryption Padding.  It is a
<     strengthening technique used for small encoded items such as decryption
<     keys.  This is commonly applied in cryptographic key-wrapping techniques
<     and is supported by PKCS #1.  Versions 5.0 and 6.0 of this specification 
<     were designed to support OAEP key-wrapping for certificate-based 
<     decryption keys for additional security.  
< 
<     7.7.2 Support for private keys stored on Smartcards or Tokens introduced
<     a conflict with this OAEP logic.  Most card and token products do 
<     not support the additional strengthening applied to OAEP key-wrapped 
<     data.  In order to resolve this conflict, versions 6.1 and above of this 
<     specification will no longer support OAEP when encrypting using 
<     digital certificates. 
< 
<     7.7.3 Versions of PKZIP available during initial development of the 
<     certificate processing method set a value of 61 into the 
<     version needed to extract field for a file.  This indicates that 
<     non-OAEP key wrapping is used.  This affects certificate encryption 
<     only, and password encryption functions should not be affected by 
<     this value.  This means values of 61 may be found on files encrypted
<     with certificates only, or on files encrypted with both password
<     encryption and certificate encryption.  Files encrypted with both
<     methods can safely be decrypted using the password methods documented.
---
>      HSize     This defines the size of a hashed public key
>                defined in REHData.
3090,3091c2795,2797
< 8.0  Splitting and Spanning ZIP files
< -------------------------------------
---
>      REList    This is a variable length of list of recipient data.  
>                Each element in this list consists of a Recipient
>                Element data structure as follows:
3093d2798
<     8.1 Spanned ZIP files
3095,3142c2800
<       8.1.1 Spanning is the process of segmenting a ZIP file across 
<       multiple removable media. This support has typically only 
<       been provided for DOS formatted floppy diskettes. 
< 
<     8.2 Split ZIP files
< 
<       8.2.1 File splitting is a newer derivation of spanning.  
<       Splitting follows the same segmentation process as
<       spanning, however, it does not require writing each
<       segment to a unique removable medium and instead supports
<       placing all pieces onto local or non-removable locations
<       such as file systems, local drives, folders, etc.
< 
<     8.3  File Naming Differences
< 
<       8.3.1 A key difference between spanned and split ZIP files is
<       that all pieces of a spanned ZIP file have the same name.  
<       Since each piece is written to a separate volume, no name 
<       collisions occur and each segment can reuse the original 
<       .ZIP file name given to the archive.
< 
<       8.3.2 Sequence ordering for DOS spanned archives uses the DOS 
<       volume label to determine segment numbers.  Volume labels
<       for each segment are written using the form PKBACK#xxx, 
<       where xxx is the segment number written as a decimal 
<       value from 001 - nnn.
< 
<       8.3.3 Split ZIP files are typically written to the same location
<       and are subject to name collisions if the spanned name
<       format is used since each segment will reside on the same 
<       drive. To avoid name collisions, split archives are named 
<       as follows.
< 
<       Segment 1   = filename.z01
<       Segment n-1 = filename.z(n-1)
<       Segment n   = filename.zip
< 
<       8.3.4 The .ZIP extension is used on the last segment to support
<       quickly reading the central directory.  The segment number
<       n should be a decimal value.
<         
<     8.4  Spanned Self-extracting ZIP Files
<         
<       8.4.1 Spanned ZIP files may be PKSFX Self-extracting ZIP files.
<       PKSFX files may also be split, however, in this case
<       the first segment must be named filename.exe.  The first
<       segment of a split PKSFX archive must be large enough to
<       include the entire executable program.
---
>     Recipient Element (REList) Data Structure:
3144,3185c2802,2901
<     8.5  Capacities and Markers
<         
<       8.5.1 Capacities for split archives are as follows:
< 
<       Maximum number of segments = 4,294,967,295 - 1
<       Maximum .ZIP segment size = 4,294,967,295 bytes
<       Minimum segment size = 64K
<       Maximum PKSFX segment size = 2,147,483,647 bytes
<           
<       8.5.2 Segment sizes may be different however by convention, all 
<       segment sizes should be the same with the exception of the 
<       last, which may be smaller.  Local and central directory 
<       header records must never be split across a segment boundary. 
<       When writing a header record, if the number of bytes remaining 
<       within a segment is less than the size of the header record,
<       end the current segment and write the header at the start
<       of the next segment.  The central directory may span segment
<       boundaries, but no single record in the central directory
<       should be split across segments.
< 
<       8.5.3 Spanned/Split archives created using PKZIP for Windows
<       (V2.50 or greater), PKZIP Command Line (V2.50 or greater),
<       or PKZIP Explorer will include a special spanning 
<       signature as the first 4 bytes of the first segment of
<       the archive.  This signature (0x08074b50) will be 
<       followed immediately by the local header signature for
<       the first file in the archive.  
< 
<       8.5.4 A special spanning marker may also appear in spanned/split 
<       archives if the spanning or splitting process starts but 
<       only requires one segment.  In this case the 0x08074b50 
<       signature will be replaced with the temporary spanning 
<       marker signature of 0x30304b50.  Split archives can
<       only be uncompressed by other versions of PKZIP that
<       know how to create a split archive.
< 
<       8.5.5 The signature value 0x08074b50 is also used by some
<       ZIP implementations as a marker for the Data Descriptor 
<       record.  Conflict in this alternate assignment can be
<       avoided by ensuring the position of the signature
<       within the ZIP file to determine the use for which it
<       is intended.  
---
>           Value     Size     Description
>           -----     ----     -----------
>           RESize    2 bytes  Size of REHData + REKData
>           REHData   HSize    Hash of recipients public key
>           REKData   (var)    Simple key blob
> 
> 
>      RESize    This defines the size of an individual REList 
>                element.  This value is the combined size of the
>                REHData field + REKData field.  REHData is defined by
>                HSize.  REKData is variable and can be calculated
>                for each REList element using RESize and HSize.
> 
>      REHData   Hashed public key for this recipient.
> 
>      REKData   Simple Key Blob.  The format of this data structure
>                is identical to that defined in the Microsoft
>                CryptoAPI and generated using the CryptExportKey()
>                function.  The version of the Simple Key Blob
>                supported at this time is 0x02 as defined by
>                Microsoft.
> 
> Certificate Processing - Central Directory Encryption:
> ------------------------------------------------------
> 
> Central Directory Encryption using Digital Certificates will 
> operate in a manner similar to that of Single Password Central
> Directory Encryption.  This record will only be present when there 
> is data to place into it.  Currently, data is placed into this
> record when digital certificates are used for either encrypting 
> or signing the files within a ZIP file.  When only password 
> encryption is used with no certificate encryption or digital 
> signing, this record is not currently needed. When present, this 
> record will appear before the start of the actual Central Directory 
> data structure and will be located immediately after the Archive 
> Decryption Header if the Central Directory is encrypted.
> 
> The Archive Extra Data record will be used to store the following
> information.  Additional data may be added in future versions.
> 
> Extra Data Fields:
> 
> 0x0014 - PKCS#7 Store for X.509 Certificates
> 0x0016 - X.509 Certificate ID and Signature for central directory
> 0x0019 - PKCS#7 Encryption Recipient Certificate List
> 
> The 0x0014 and 0x0016 Extra Data records that otherwise would be 
> located in the first record of the Central Directory for digital 
> certificate processing. When encrypting or compressing the Central 
> Directory, the 0x0014 and 0x0016 records must be located in the 
> Archive Extra Data record and they should not remain in the first 
> Central Directory record.  The Archive Extra Data record will also 
> be used to store the 0x0019 data. 
> 
> When present, the size of the Archive Extra Data record will be
> included in the size of the Central Directory.  The data of the
> Archive Extra Data record will also be compressed and encrypted
> along with the Central Directory data structure.
> 
> Certificate Processing Differences:
> 
> The Certificate Processing Method of encryption differs from the
> Single Password Symmetric Encryption Method as follows.  Instead
> of using a user-defined password to generate a master session key,
> cryptographically random data is used.  The key material is then
> wrapped using standard key-wrapping techniques.  This key material
> is wrapped using the public key of each recipient that will need
> to decrypt the file using their corresponding private key.
> 
> This specification currently assumes digital certificates will follow
> the X.509 V3 format for 1024 bit and higher RSA format digital
> certificates.  Implementation of this Certificate Processing Method
> requires supporting logic for key access and management.  This logic
> is outside the scope of this specification.
> 
> OAEP Processing with Certificate-based Encryption:
> 
> OAEP stands for Optimal Asymmetric Encryption Padding.  It is a
> strengthening technique used for small encoded items such as decryption
> keys.  This is commonly applied in cryptographic key-wrapping techniques
> and is supported by PKCS #1.  Versions 5.0 and 6.0 of this specification 
> were designed to support OAEP key-wrapping for certificate-based 
> decryption keys for additional security.  
> 
> Support for private keys stored on Smartcards or Tokens introduced
> a conflict with this OAEP logic.  Most card and token products do 
> not support the additional strengthening applied to OAEP key-wrapped 
> data.  In order to resolve this conflict, versions 6.1 and above of this 
> specification will no longer support OAEP when encrypting using 
> digital certificates. 
> 
> Versions of PKZIP available during initial development of the 
> certificate processing method set a value of 61 into the 
> version needed to extract field for a file.  This indicates that 
> non-OAEP key wrapping is used.  This affects certificate encryption 
> only, and password encryption functions should not be affected by 
> this value.  This means values of 61 may be found on files encrypted
> with certificates only, or on files encrypted with both password
> encryption and certificate encryption.  Files encrypted with both
> methods can safely be decrypted using the password methods documented.
3187c2903
< 9.0 Change Process
---
> IX. Change Process
3190,3219c2906,2931
<    9.1 In order for the .ZIP file format to remain a viable technology, this
<    specification should be considered as open for periodic review and
<    revision.  Although this format was originally designed with a 
<    certain level of extensibility, not all changes in technology
<    (present or future) were or will be necessarily considered in its
<    design.  
< 
<    9.2 If your application requires new definitions to the
<    extensible sections in this format, or if you would like to 
<    submit new data structures or new capabilities, please forward 
<    your request to zipformat@pkware.com.  All submissions will be 
<    reviewed by the ZIP File Specification Committee for possible 
<    inclusion into future versions of this specification.  
< 
<    9.3 Periodic revisions to this specification will be published as
<    DRAFT or as FINAL status to ensure interoperability. We encourage 
<    comments and feedback that may help improve clarity or content.
< 
< 
< 10.0 Incorporating PKWARE Proprietary Technology into Your Product
< ------------------------------------------------------------------
< 
<    10.1 The Use or Implementation in a product of APPNOTE technological 
<    components pertaining to either strong encryption or patching requires 
<    a separate, executed license agreement from PKWARE. Please contact 
<    PKWARE at zipformat@pkware.com or +1-414-289-9788 with regard to 
<    acquiring such a license.
< 
<    10.2 Additional information regarding PKWARE proprietray technology is 
<    available at http://www.pkware.com/appnote.
---
> In order for the .ZIP file format to remain a viable definition, this
> specification should be considered as open for periodic review and
> revision.  Although this format was originally designed with a 
> certain level of extensibility, not all changes in technology
> (present or future) were or will be necessarily considered in its
> design.  If your application requires new definitions to the
> extensible sections in this format, or if you would like to 
> submit new data structures, please forward your request to
> zipformat@pkware.com.  All submissions will be reviewed by the
> ZIP File Specification Committee for possible inclusion into
> future versions of this specification.  Periodic revisions
> to this specification will be published to ensure interoperability. 
> We encourage comments and feedback that may help improve clarity 
> or content.
> 
> X. Incorporating PKWARE Proprietary Technology into Your Product
> ----------------------------------------------------------------
> 
> PKWARE is committed to the interoperability and advancement of the
> .ZIP format.  PKWARE offers a free license for certain technological
> aspects described above under certain restrictions and conditions.
> However, the use or implementation in a product of certain technological
> aspects set forth in the current APPNOTE, including those with regard to
> strong encryption, patching, or extended tape operations requires a 
> license from PKWARE.  Please contact PKWARE with regard to acquiring
> a license.
3221c2933
< 11.0 Acknowledgements
---
> XI. Acknowledgements
3224,3226c2936,2938
<    In addition to the above mentioned contributors to PKZIP and PKUNZIP,
<    PKWARE would like to extend special thanks to Robert Mahoney for 
<    suggesting the extension .ZIP for this software.
---
> In addition to the above mentioned contributors to PKZIP and PKUNZIP,
> I would like to extend special thanks to Robert Mahoney for suggesting
> the extension .ZIP for this software.
3228c2940
< 12.0 References
---
> XII. References
3231,3233c2943,2945
<    Fiala, Edward R., and Greene, Daniel H., "Data compression with
<       finite windows",  Communications of the ACM, Volume 32, Number 4,
<       April 1989, pages 490-505.
---
>     Fiala, Edward R., and Greene, Daniel H., "Data compression with
>        finite windows",  Communications of the ACM, Volume 32, Number 4,
>        April 1989, pages 490-505.
3235,3236c2947,2948
<    Held, Gilbert, "Data Compression, Techniques and Applications,
<       Hardware and Software Considerations", John Wiley & Sons, 1987.
---
>     Held, Gilbert, "Data Compression, Techniques and Applications,
>        Hardware and Software Considerations", John Wiley & Sons, 1987.
3238,3240c2950,2952
<    Huffman, D.A., "A method for the construction of minimum-redundancy
<       codes", Proceedings of the IRE, Volume 40, Number 9, September 1952,
<       pages 1098-1101.
---
>     Huffman, D.A., "A method for the construction of minimum-redundancy
>        codes", Proceedings of the IRE, Volume 40, Number 9, September 1952,
>        pages 1098-1101.
3242,3243c2954,2955
<    Nelson, Mark, "LZW Data Compression", Dr. Dobbs Journal, Volume 14,
<       Number 10, October 1989, pages 29-37.
---
>     Nelson, Mark, "LZW Data Compression", Dr. Dobbs Journal, Volume 14,
>        Number 10, October 1989, pages 29-37.
3245c2957
<    Nelson, Mark, "The Data Compression Book",  M&T Books, 1991.
---
>     Nelson, Mark, "The Data Compression Book",  M&T Books, 1991.
3247,3248c2959,2960
<    Storer, James A., "Data Compression, Methods and Theory",
<       Computer Science Press, 1988
---
>     Storer, James A., "Data Compression, Methods and Theory",
>        Computer Science Press, 1988
3250,3251c2962,2963
<    Welch, Terry, "A Technique for High-Performance Data Compression",
<       IEEE Computer, Volume 17, Number 6, June 1984, pages 8-19.
---
>     Welch, Terry, "A Technique for High-Performance Data Compression",
>        IEEE Computer, Volume 17, Number 6, June 1984, pages 8-19.
3253,3254c2965,2966
<    Ziv, J. and Lempel, A., "A universal algorithm for sequential data
<       compression", Communications of the ACM, Volume 30, Number 6,
---
>     Ziv, J. and Lempel, A., "A universal algorithm for sequential data
>        compression", Communications of the ACM, Volume 30, Number 6,
3257,3259c2969,2971
<    Ziv, J. and Lempel, A., "Compression of individual sequences via
<       variable-rate coding", IEEE Transactions on Information Theory,
<       Volume 24, Number 5, September 1978, pages 530-536.
---
>     Ziv, J. and Lempel, A., "Compression of individual sequences via
>        variable-rate coding", IEEE Transactions on Information Theory,
>        Volume 24, Number 5, September 1978, pages 530-536.
3265c2977
< A.1 Field Definition Structure:
---
> Field Definition Structure:
3271,3272c2983
< A.2 Field Code  Description
< 
---
> Field Code  Description
3291c3002
< B.1 Field Definition Structure:
---
> Field Definition Structure:
3297,3298c3008
< B.2 Field Code  Description
< 
---
> Field Code  Description
3301c3011
<    0003     Reserved                
---
>    0003     Reserved		
3305c3015
<    0007     Space Allocation Type1 byte flag                
---
>    0007     Space Allocation Type1 byte flag		
3309c3019
<    000B     NonVSAM Volume List                 variable                
---
>    000B     NonVSAM Volume List                 variable		
3314,3315c3024,3025
<    0010     PDS/PDSE Member Info.               30 bytes        
<    0011     VSAM sub-filetype                   2 bytes                
---
>    0010     PDS/PDSE Member Info.               30 bytes	
>    0011     VSAM sub-filetype                   2 bytes		
3332c3042
<    0022     VSAM Erase Flag                     1 byte flag                
---
>    0022     VSAM Erase Flag                     1 byte flag		
3336,3342c3046,3052
<    0026     VSAM Ordered Flag                   1 byte flag                
<    0027     VSAM REUSE Flag                     1 byte flag                
<    0028     VSAM SPANNED Flag                   1 byte flag                
<    0029     VSAM Recovery Flag                  1 byte flag                
<    002A     VSAM  WRITECHK  Flag                1 byte flag                
<    002B     VSAM Cluster/Data SHROPTS           3 bytes EBCDIC "n,y"        
<    002C     VSAM Index SHROPTS                  3 bytes EBCDIC "n,y"        
---
>    0026     VSAM Ordered Flag                   1 byte flag		
>    0027     VSAM REUSE Flag                     1 byte flag		
>    0028     VSAM SPANNED Flag                   1 byte flag		
>    0029     VSAM Recovery Flag                  1 byte flag		
>    002A     VSAM  WRITECHK  Flag                1 byte flag		
>    002B     VSAM Cluster/Data SHROPTS           3 bytes EBCDIC "n,y"	
>    002C     VSAM Index SHROPTS                  3 bytes EBCDIC "n,y"	
3347,3350c3057,3060
<    0031     VSAM Index IMBED                    1 byte flag                
<    0032     VSAM Index Ordered Flag             1 byte flag                
<    0033     VSAM REPLICATE Flag                 1 byte flag                
<    0034     VSAM Index REUSE Flag               1 byte flag                
---
>    0031     VSAM Index IMBED                    1 byte flag		
>    0032     VSAM Index Ordered Flag             1 byte flag		
>    0033     VSAM REPLICATE Flag                 1 byte flag		
>    0034     VSAM Index REUSE Flag               1 byte flag		
3407,3408c3117,3118
< APPENDIX C - Zip64 Extensible Data Sector Mappings 
< ---------------------------------------------------
---
> APPENDIX C - Zip64 Extensible Data Sector Mappings (EFS)
> --------------------------------------------------------
3410c3120
<          -Z390   Extra Field:
---
>           -Z390   Extra Field:
3413c3123,3130
<           ZIP 64 "extra" block for extended tape operations.  
---
>           ZIP 64 "extra" block for extended tape operations. Portions of 
>           this extended tape processing technology is covered under a 
>           pending patent application. The use or implementation in a 
>           product of certain technological aspects set forth in the 
>           current APPNOTE, including those with regard to strong encryption,
>           patching or extended tape operations, requires a license from
>           PKWARE.  Please contact PKWARE with regard to acquiring a license. 
>  
3416c3133
<           in EBCDIC format unless otherwise specified.
---
> 	  in EBCDIC format unless otherwise specified.
3439c3156
< D.1 The ZIP format has historically supported only the original IBM PC character 
---
> The ZIP format has historically supported only the original IBM PC character 
3446c3163
< D.2 If general purpose bit 11 is unset, the file name and comment should conform 
---
> If general purpose bit 11 is unset, the file name and comment should conform 
3454c3171
< D.3 Applications may choose to supplement this file name storage through the use 
---
> Applications may choose to supplement this file name storage through the use 
3461c3178
< D.4 The 0x0008 Extra Field storage may be used with either setting for general 
---
> The 0x0008 Extra Field storage may be used with either setting for general 
3471c3188
< D.5 General purpose bit 11 will not imply any encoding of file content or
---
> General purpose bit 11 will not imply any encoding of file content or
3476c3193
< D.6 Ed Gordon of the Info-ZIP group has defined a pair of "extra field" records 
---
> Ed Gordon of the Info-ZIP group has defined a pair of "extra field" records 
3483c3200
< D.7 Definitions for the record structure of these fields are included above 
---
> Definitions for the record structure of these fields are included above 
3488c3205
< D.8 The choice of which storage method to use when writing a ZIP file is left
---
> The choice of which storage method to use when writing a ZIP file is left
3496a3214,3217
> 
>  
> 
> 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/BaseLibCompressor.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/BaseLibCompressor.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/BaseLibCompressor.h lookaside-ziparchive_src.zip-extracted/ZipArchive/BaseLibCompressor.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
73d72
< 		m_bDecompressionDone = false;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/BitFlag.h lookaside-ziparchive_src.zip-extracted/ZipArchive/BitFlag.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/BytesWriter.h lookaside-ziparchive_src.zip-extracted/ZipArchive/BytesWriter.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/blocksort.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/blocksort.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
23a24,25
> #ifdef _ZIP_BZIP2_INTERNAL
> 
205,207c207,209
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= ((UInt32)1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~((UInt32)1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & ((UInt32)1 << ((zz) & 31)))
---
> #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
> #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
> #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
1090a1093
> #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzcompress.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzcompress.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
31,34c31,33
< // TD CHANGE: 
< #if _MSC_VER > 1000
<     #pragma warning (push)
< #endif
---
> #ifdef _ZIP_BZIP2_INTERNAL
> 
> 
164,165d162
<    // TD CHANGE: preventing uninitialized memory
<    memset(yy, 0, 256);
210,213d206
<  // TD CHANGE: 
< #if _MSC_VER > 1000
< #pragma warning (disable : 4244)
< #endif
236,239c229
<    // TD CHANGE: 
< #if _MSC_VER > 1000
<     #pragma warning (disable: 6385)
< #endif
---
> 
469c459
<             nSelectors <= BZ_MAX_SELECTORS,
---
>             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
681,683d670
< // TD CHANGE: 
< #if _MSC_VER > 1000
<     #pragma warning (pop)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzlib.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzlib.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
32,38c32,33
< // TD CHANGE: 
< #if _MSC_VER > 1000
< #pragma warning (push)
< #pragma warning (disable : 6386)
< #pragma warning (disable : 4267)
< #pragma warning (disable : 4996)
< #endif
---
> 
> #ifdef _ZIP_BZIP2_INTERNAL
52c47
<       "Please report it to: bzip2-devel@sourceware.org.  If this happened\n"
---
>       "Please report it to me at: jseward@bzip.org.  If this happened\n"
57c52
<       "quality software.  Thanks.\n\n",
---
>       "quality software.  Thanks.  Julian Seward, 10 December 2007.\n\n",
1429,1433c1424
< // TD CHANGE: 
< #if _MSC_VER > 1000
<     #pragma warning (disable : 6031)
< #endif
<       SET_BINARY_MODE(fp);
---
>         SET_BINARY_MODE(fp);
1577,1579d1567
< // TD CHANGE: 
< #if _MSC_VER > 1000
<     #pragma warning (pop)
1583d1570
< 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzlib.h lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzlib.h
1,282c1,305
< 
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /* ------------------------------------------------------------------
<    This file is part of bzip2/libbzip2, a program and library for
<    lossless, block-sorting data compression.
< 
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
< 
<    Please read the WARNING, DISCLAIMER and PATENTS sections in the 
<    README file.
< 
<    This program is released under the terms of the license contained
<    in the file LICENSE.
<    ------------------------------------------------------------------ */
< 
< 
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
< #ifndef BZ_NO_STDIO
< /* Need a definitition for FILE */
< #include <stdio.h>
< #endif
< 
< #ifdef _WIN32
< #   include <windows.h>
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo (tsuneo@rr.iij4u.or.jp)
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> /*-------------------------------------------------------------*/
> /*--- Public header file for the library.                   ---*/
> /*---                                               bzlib.h ---*/
> /*-------------------------------------------------------------*/
> 
> /* ------------------------------------------------------------------
> 	This file is part of bzip2/libbzip2, a program and library for
> 	lossless, block-sorting data compression.
> 
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
> 
>    Please read the WARNING, DISCLAIMER and PATENTS sections in the 
>    README file.
> 
>    This program is released under the terms of the license contained
>    in the file LICENSE.
>    ------------------------------------------------------------------ */
> 
> #include "../_features.h"
> 
> #ifdef _ZIP_BZIP2_INTERNAL
> 
> #if _MSC_VER > 1000
> 	#pragma warning (disable : 4244)
> 	#pragma warning (disable : 4127)
> 	#pragma warning (disable : 4100)
> 	#pragma warning (disable : 4701)
> 	#pragma warning (disable : 4702)
> 	#pragma warning (disable : 4115)
> #endif
> 
> #define BZ_NO_STDIO 1
> 
> #ifndef _BZLIB_H
> #define _BZLIB_H
> 
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> #define BZ_RUN               0
> #define BZ_FLUSH             1
> #define BZ_FINISH            2
> 
> #define BZ_OK                0
> #define BZ_RUN_OK            1
> #define BZ_FLUSH_OK          2
> #define BZ_FINISH_OK         3
> #define BZ_STREAM_END        4
> #define BZ_SEQUENCE_ERROR    (-1)
> #define BZ_PARAM_ERROR       (-2)
> #define BZ_MEM_ERROR         (-3)
> #define BZ_DATA_ERROR        (-4)
> #define BZ_DATA_ERROR_MAGIC  (-5)
> #define BZ_IO_ERROR          (-6)
> #define BZ_UNEXPECTED_EOF    (-7)
> #define BZ_OUTBUFF_FULL      (-8)
> #define BZ_CONFIG_ERROR      (-9)
> 
> typedef 
>    struct {
>       char *next_in;
>       unsigned int avail_in;
>       unsigned int total_in_lo32;
>       unsigned int total_in_hi32;
> 
>       char *next_out;
>       unsigned int avail_out;
>       unsigned int total_out_lo32;
>       unsigned int total_out_hi32;
> 
>       void *state;
> 
>       void *(*bzalloc)(void *,int,int);
>       void (*bzfree)(void *,void *);
>       void *opaque;
>    } 
>    bz_stream;
> 
> 
> #ifndef BZ_IMPORT
> #define BZ_EXPORT
> #endif
> 
> #ifndef BZ_NO_STDIO
> /* Need a definitition for FILE */
> #include <stdio.h>
> #endif
> 
> #ifdef _WIN32
> #   include <windows.h>
> #   ifdef small
>       /* windows.h define small to char */
> #      undef small
> #   endif
> #   ifdef BZ_EXPORT
> #   define BZ_API(func) WINAPI func
> #   define BZ_EXTERN extern
> #   else
>    /* import windows dll dynamically */
> #   define BZ_API(func) (WINAPI * func)
> #   define BZ_EXTERN
> #   endif
> #else
> #   define BZ_API(func) func
> #   define BZ_EXTERN extern
> #endif
> 
> 
> /*-- Core (low-level) library functions --*/
> 
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
>       bz_stream* strm, 
>       int        blockSize100k, 
>       int        verbosity, 
>       int        workFactor 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
>       bz_stream* strm, 
>       int action 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
>       bz_stream* strm 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
>       bz_stream *strm, 
>       int       verbosity, 
>       int       small
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
>       bz_stream* strm 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
>       bz_stream *strm 
>    );
> 
> 
> 
> /*-- High(er) level library functions --*/
> 
> #ifndef BZ_NO_STDIO
> #define BZ_MAX_UNUSED 5000
> 
> typedef void BZFILE;
> 
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
>       int*  bzerror,   
>       FILE* f, 
>       int   verbosity, 
>       int   small,
>       void* unused,    
>       int   nUnused 
>    );
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
>       int*    bzerror, 
>       BZFILE* b 
>    );
> 
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
>       int*    bzerror, 
>       BZFILE* b, 
>       void**  unused,  
>       int*    nUnused 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
>       int*    bzerror, 
>       BZFILE* b, 
>       void*   buf, 
>       int     len 
>    );
> 
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
>       int*  bzerror,      
>       FILE* f, 
>       int   blockSize100k, 
>       int   verbosity, 
>       int   workFactor 
>    );
> 
> BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
>       int*    bzerror, 
>       BZFILE* b, 
>       void*   buf, 
>       int     len 
>    );
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
>       int*          bzerror, 
>       BZFILE*       b, 
>       int           abandon, 
>       unsigned int* nbytes_in, 
>       unsigned int* nbytes_out 
>    );
> 
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
>       int*          bzerror, 
>       BZFILE*       b, 
>       int           abandon, 
>       unsigned int* nbytes_in_lo32, 
>       unsigned int* nbytes_in_hi32, 
>       unsigned int* nbytes_out_lo32, 
>       unsigned int* nbytes_out_hi32
>    );
> #endif
> 
> 
> /*-- Utility functions --*/
> 
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
>       char*         dest, 
>       unsigned int* destLen,
>       char*         source, 
>       unsigned int  sourceLen,
>       int           blockSize100k, 
>       int           verbosity, 
>       int           workFactor 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
>       char*         dest, 
>       unsigned int* destLen,
>       char*         source, 
>       unsigned int  sourceLen,
>       int           small, 
>       int           verbosity 
>    );
> 
> 
> /*--
>    Code contributed by Yoshioka Tsuneo (tsuneo@rr.iij4u.or.jp)
>    to support better zlib compatibility.
>    This code is not _officially_ part of libbzip2 (yet);
>    I haven't tested it, documented it, or considered the
>    threading-safeness of it.
>    If this code breaks, please contact both Yoshioka and me.
> --*/
> 
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
>       void
>    );
> 
> #ifndef BZ_NO_STDIO
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
>       const char *path,
>       const char *mode
>    );
> 
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
>       int        fd,
>       const char *mode
>    );
>          
> BZ_EXTERN int BZ_API(BZ2_bzread) (
>       BZFILE* b, 
>       void* buf, 
>       int len 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzwrite) (
>       BZFILE* b, 
>       void*   buf, 
>       int     len 
>    );
> 
> BZ_EXTERN int BZ_API(BZ2_bzflush) (
>       BZFILE* b
>    );
> 
> BZ_EXTERN void BZ_API(BZ2_bzclose) (
>       BZFILE* b
>    );
> 
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
>       BZFILE *b, 
>       int    *errnum
>    );
> #endif
> 
> #ifdef __cplusplus
> }
> #endif
> 
> #endif
> 
> #else
> 
> #if _MSC_VER > 1000
> 	#pragma warning (disable : 4206)
> #endif
> 
> #endif
> 
> 
> /*-------------------------------------------------------------*/
> /*--- end                                           bzlib.h ---*/
> /*-------------------------------------------------------------*/
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzlib_private.h lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/bzlib_private.h
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
21a22,25
> #include "bzlib.h"
> 
> #ifdef _ZIP_BZIP2_INTERNAL
> 
33,35d36
< #include "bzlib.h"
< 
< 
39c40
< #define BZ_VERSION  "1.0.8, 13-Jul-2019"
---
> #define BZ_VERSION  "1.0.6, 6-Sept-2010"
478,479c479,480
<     cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<     s->tPos = GET_LL(s->tPos);
---
>       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
>       s->tPos = GET_LL(s->tPos);
503a505,507
> 
> #endif
> 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/crctable.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/crctable.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
23a24,25
> #ifdef _ZIP_BZIP2_INTERNAL
> 
100a103
> #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/decompress.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/decompress.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
23a24
> #ifdef _ZIP_BZIP2_INTERNAL
288c289
<       if (nGroups < 2 || nGroups > BZ_N_GROUPS) RETURN(BZ_DATA_ERROR);
---
>       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
299,303c300
<          /* Having more than BZ_MAX_SELECTORS doesn't make much sense
<             since they will never be used, but some implementations might
<             "round up" the number of selectors, so just ignore those. */
<          if (i < BZ_MAX_SELECTORS)
<            s->selectorMtf[i] = j;
---
>          s->selectorMtf[i] = j;
305,306d301
<       if (nSelectors > BZ_MAX_SELECTORS)
<         nSelectors = BZ_MAX_SELECTORS;
648a644
> #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/huffman.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/huffman.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
23a24,25
> #ifdef _ZIP_BZIP2_INTERNAL
> 
201a204
> #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/bzip2/randtable.c lookaside-ziparchive_src.zip-extracted/ZipArchive/bzip2/randtable.c
11,12c11,12
<    bzip2/libbzip2 version 1.0.8 of 13 July 2019
<    Copyright (C) 1996-2019 Julian Seward <jseward@acm.org>
---
>    bzip2/libbzip2 version 1.0.6 of 6 September 2010
>    Copyright (C) 1996-2010 Julian Seward <jseward@bzip.org>
23a24
> #ifdef _ZIP_BZIP2_INTERNAL
80a82
> #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Bzip2Compressor.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/Bzip2Compressor.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Bzip2Compressor.h lookaside-ziparchive_src.zip-extracted/ZipArchive/Bzip2Compressor.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/DeflateCompressor.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/DeflateCompressor.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
168,169c168,169
< 			if (m_stream.avail_in == 0 /* && m_uComprLeft >= 0*/  // Also when there are zero bytes left. It should always be true.
< 				)
---
> 			if ((m_stream.avail_in == 0) &&
> 				(m_uComprLeft >= 0)) // Also when there are zero bytes left
diff -r source-ziparchive_src.zip-extracted/ZipArchive/DeflateCompressor.h lookaside-ziparchive_src.zip-extracted/ZipArchive/DeflateCompressor.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/DirEnumerator.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/DirEnumerator.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
24d23
< #include "ZipAutoBuffer.h"
53,90d51
< #ifdef ZIP_ENUMERATOR_FOR_GNUC
< 	class CFindHandleReleaser
< 	{
< 		DIR* m_handle;
< 	public: 
< 		CFindHandleReleaser(DIR* handle)
< 			:m_handle(handle)
< 		{
< 		}				
< 		~CFindHandleReleaser()
< 		{
< 			closedir(m_handle);
< 		}
< 	};
< #else
< 	class CFindHandleReleaser
< 	{
< #if _MSC_VER > 1200
< 		intptr_t m_handle;
< #else
< 		long m_handle;
< #endif
< 	public: 
< #if _MSC_VER > 1200
< 		CFindHandleReleaser(intptr_t handle)
< #else
< 		CFindHandleReleaser(long handle)
< #endif		
< 			:m_handle(handle)
< 		{
< 		}				
< 		~CFindHandleReleaser()
< 		{
< 			_findclose(m_handle);
< 		}
< 	};
< #endif
< 
106,108c67
< 		_ZIP_WIDE_TO_MULTIBYTE(m_szCurrentDirectory, currentDirectory)
<                               
< 		DIR* dp = opendir(currentDirectory);
---
> 		DIR* dp = opendir(m_szCurrentDirectory);
111d69
< 			CFindHandleReleaser handleReleaser(dp);
116,127c74,75
< 					break;	
< 				LPCTSTR name;
<         #ifdef _UNICODE
<                 CZipString nameWide;                                
<                 ZipPlatform::MultiByteToWide(entry->d_name, -1, nameWide, 0);
<                 name = nameWide;
<         #else
<                 name = entry->d_name;
<         #endif                                
< 				CZipString path(m_szCurrentDirectory + name);
< 				_ZIP_WIDE_TO_MULTIBYTE(path, pathMultiByte)
<                                 
---
> 					break;								
> 				CZipString path(m_szCurrentDirectory + entry->d_name);
130c78
< 				if (stat64(pathMultiByte, &sStats) == -1)
---
> 				if (stat64(path, &sStats) == -1)
133c81
< 				if (stat(pathMultiByte, &sStats) == -1)
---
> 				if (stat(path, &sStats) == -1)
136c84,85
< 				
---
> 
> 				LPCTSTR name = entry->d_name;
151d99
< 			CFindHandleReleaser handleReleaser(hFile);
170,172c118,120
< 				info.m_tCreationTime = sStats.st_ctime;
< 				info.m_tModificationTime = sStats.st_mtime;
< 				info.m_tLastAccessTime = sStats.st_atime;				
---
> 				info.m_uCreateTime = sStats.st_ctime;
> 				info.m_uModTime = sStats.st_mtime;
> 				info.m_uAccessTime = sStats.st_atime;				
175,177c123,125
< 				info.m_tCreationTime = ffInfo.time_create;
< 				info.m_tModificationTime = ffInfo.time_write;
< 				info.m_tLastAccessTime = ffInfo.time_access;	
---
> 				info.m_uCreateTime = ffInfo.time_create;
> 				info.m_uModTime = ffInfo.time_write;
> 				info.m_uAccessTime = ffInfo.time_access;	
210c158,159
< 			}			
---
> 			}
> 			closedir(dp);
214c163,164
< 			while (_tfindnexti64(hFile, &ffInfo) == 0L);			
---
> 			while (_tfindnexti64(hFile, &ffInfo) == 0L);
> 			_findclose(hFile);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/DirEnumerator.h lookaside-ziparchive_src.zip-extracted/ZipArchive/DirEnumerator.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
76d75
< 			m_lpszFileNameMask = NULL;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/_features.h lookaside-ziparchive_src.zip-extracted/ZipArchive/_features.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
91c91
< 	Define it, if you use Unicode and under Windows you decompress archives from systems that use different Unicode Normalization form for filenames (like OS X).
---
> 	Define it, if you use Unicode and under Windows you decompress archives from systems that use different Unicode Normalization form for filenames (like Mac OS X).
158c158
< 		#define _ZIP_FILE_IMPLEMENTATION ZIP_ZFI_WIN
---
> 		#define _ZIP_FILE_IMPLEMENTATION ZIP_ZFI_WIN		
diff -r source-ziparchive_src.zip-extracted/ZipArchive/FileFilter.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/FileFilter.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/FileFilter.h lookaside-ziparchive_src.zip-extracted/ZipArchive/FileFilter.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
357,360d356
< 
< 			\note 
< 				To keep traversing directories without adding some of them to the archive, return \c false 
< 				from this method for the directory that should be traversed, but not added.
380c376
< 		{			
---
> 		{
diff -r source-ziparchive_src.zip-extracted/ZipArchive/FileInfo.h lookaside-ziparchive_src.zip-extracted/ZipArchive/FileInfo.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
47c47
< 			m_tCreationTime = m_tModificationTime = m_tLastAccessTime = (time_t)0;
---
> 			m_uCreateTime = m_uModTime = m_uAccessTime = 0;
51,53c51,53
< 		time_t m_tCreationTime;		///< The file creation time.
< 		time_t m_tModificationTime;	///< The file modification time.
< 		time_t m_tLastAccessTime;	///< The file last access time.
---
> 		time_t m_uCreateTime;		///< The Creation time.
> 		time_t m_uModTime;			///< The last modification time.
> 		time_t m_uAccessTime;		///< The last access time.
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Hmac.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/Hmac.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Hmac.h lookaside-ziparchive_src.zip-extracted/ZipArchive/Hmac.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/License.txt lookaside-ziparchive_src.zip-extracted/ZipArchive/License.txt
1c1
< is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
3c3
< https://www.artpol-software.com/ZipArchive/KB/license.aspx
---
> http://www.artpol-software.com/ZipArchive/KB/license.aspx
diff -r source-ziparchive_src.zip-extracted/ZipArchive/_platform.h lookaside-ziparchive_src.zip-extracted/ZipArchive/_platform.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
65,67d64
< 
< #define ZIPARCHIVE_VERSION "4.6.9"
< #define ZIPARCHIVE_VERSION_NUM 0x00040609
diff -r source-ziparchive_src.zip-extracted/ZipArchive/RandomPool.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/RandomPool.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/RandomPool.h lookaside-ziparchive_src.zip-extracted/ZipArchive/RandomPool.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/_readme.txt lookaside-ziparchive_src.zip-extracted/ZipArchive/_readme.txt
1,2c1,2
< The complete functionality of the ZipArchive Library (with Unicode, Zip64, AES, BZIP2 and Seeking) is available in the full version.
< To evaluate the full version, please visit https://www.artpol-software.com/DownloadTrial.aspx
\ No newline at end of file
---
> The complete functionality of the ZipArchive Library (with Zip64, AES and BZIP2) is available in the commercial version.
> To evaluate the full version, please visit http://www.artpol-software.com/DownloadTrial.aspx
\ No newline at end of file
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Sha1.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/Sha1.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Sha1.h lookaside-ziparchive_src.zip-extracted/ZipArchive/Sha1.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/stdafx.h lookaside-ziparchive_src.zip-extracted/ZipArchive/stdafx.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
49c49
< 		#define ZIPTRACE(f) TRACE(_T(f), _T(""), 0)
---
> 		#define ZIPTRACE(f) TRACE(_T(f))
67,71c67
< #ifdef __GNUC__
< 	#include <unistd.h>
< #endif
< 
< #if !defined(_INTPTR_T_DEFINED) && !defined(__intptr_t_defined)
---
> #if !defined(_INTPTR_T_DEFINED) && !defined(__GNUC__)	
74,75c70,71
< 	#elif (_MSC_VER <= 1200 || !defined _MSC_VER) && (!defined(__GNUC__) || __GNUC__ > 4 || __GNUC__ == 4 && __GNUC_MINOR__ >= 7)
< 		typedef long int intptr_t;
---
> 	#elif _MSC_VER <= 1200 || !defined _MSC_VER
> 		typedef long intptr_t;
95c91
< #if defined __GNUC__ || defined __MINGW32__
---
> #ifdef __MINGW32__
106,107d101
< 
< 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/std_mfc.h lookaside-ziparchive_src.zip-extracted/ZipArchive/std_mfc.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
38d37
< #define NO_WARN_MBCS_MFC_DEPRECATION
48d46
< typedef FILETIME ZFILETIME;
58,61d55
< #endif
< 
< #ifndef _NOEXCEPT // for OS X
< 	#define _NOEXCEPT
diff -r source-ziparchive_src.zip-extracted/ZipArchive/std_stl.h lookaside-ziparchive_src.zip-extracted/ZipArchive/std_stl.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
40,41c40
< #if !defined WIN32 && !defined _WIN32
< 
---
> #ifndef _WIN32
52c51
< 	typedef int                 ZBOOL; /* to avoid conflicts when using Objective-C */
---
> 	typedef int                 ZBOOL; /* to avoid conflicts when using Objective-C under Mac */
65,73c64
< #ifdef _UNICODE
< 	typedef wchar_t WCHAR;    // wc,   16-bit UNICODE character
< 	#include <wchar.h>	
< 
< 	#define _ZIP_WIDE_TO_MULTIBYTE(input, variable) LPCSTR variable;\
< 		CZipAutoBuffer variable##Buffer;\
< 		ZipPlatform::WideToMultiByte(input, variable##Buffer, true, 0);\
< 		variable = variable##Buffer;
< #else
---
> 
75,77d65
< 	#define _ZIP_WIDE_TO_MULTIBYTE(input, variable)	LPCSTR variable = input;	
< #endif
< 	
127,133d114
< 
< 	typedef struct
< 	{
< 		DWORD dwLowDateTime;
< 		DWORD dwHighDateTime;
< 	} ZFILETIME;
< 
145d125
< 	typedef FILETIME ZFILETIME;
147c127,128
< #endif	// #if !defined WIN32 && !defined _WIN32
---
> #endif	// #ifndef _WIN32
> 
157a139,142
> #if !defined(_INTPTR_T_DEFINED) && !defined(__GNUC__) && !defined __BORLANDC__
> 	typedef long intptr_t;
> #endif
> 
161,165d145
< #ifndef _NOEXCEPT // for OS X
< 	#define _NOEXCEPT
< #endif
< 
< 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Wildcard.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/Wildcard.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/Wildcard.h lookaside-ziparchive_src.zip-extracted/ZipArchive/Wildcard.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
140,143c140
< 		CWildcard()
< 		{
< 			m_bCaseSensitive = false;
< 		}
---
> 		CWildcard(){}
157d153
< #pragma warning(suppress: 26495)
180c176
< 			m_bCaseSensitive = bCaseSensitive;
---
> 			m_bCaseSensitive=bCaseSensitive;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipAbstractFile.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipAbstractFile.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
26d25
< #pragma warning( push )
40,43d38
< #if _MSC_VER > 1000
< 	#pragma warning (disable : 26455)
< 	#pragma warning (disable : 26432)
< #endif
52c47
< 		ZIP_FILE_SIZE offset = 0;
---
> 		ZIP_FILE_SIZE offset;
72,73c67,68
< 	virtual size_t Read(void *lpBuf, size_t nCount) = 0;
< 	virtual void Write(const void* lpBuf, size_t nCount) = 0;
---
> 	virtual UINT Read(void *lpBuf, UINT nCount) = 0;
> 	virtual void Write(const void* lpBuf, UINT nCount) = 0;	
79,81c74
< #if _MSC_VER > 1000
< #pragma warning( pop )
< #endif
---
> 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipAesCryptograph.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipAesCryptograph.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipAesCryptograph.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipAesCryptograph.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
26,27c26,27
< const char CZipArchive::m_gszCopyright[] = {"The ZipArchive Library Copyright (c) 2000 - 2022 Artpol Software - Tadeusz Dracz"};
< const char CZipArchive::m_gszVersion[] = {"4.6.9"};
---
> const char CZipArchive::m_gszCopyright[] = {"The ZipArchive Library Copyright (c) 2000 - 2011 Artpol Software - Tadeusz Dracz"};
> const char CZipArchive::m_gszVersion[] = {"4.1.1"};
38c38
< 	m_pFile = NULL;	
---
> 	m_pFile = NULL;
41,87d40
< CZipAddFilesEnumerator::CZipAddFilesEnumerator(LPCTSTR lpszDirectory, 
< 			bool bRecursive, 
< 			int iComprLevel, 
< 			int iSmartLevel, 
< 			unsigned long nBufSize)
< 		:ZipArchiveLib::CDirEnumerator(lpszDirectory, bRecursive)
< {
< 	m_iComprLevel = iComprLevel;
< 	m_nBufSize = nBufSize;
< 	m_iSmartLevel = iSmartLevel;	
< 	m_pZip = NULL;
< 	m_pMultiCallback = NULL;
< }
< 
< bool CZipAddFilesEnumerator::Process(LPCTSTR lpszPath, const ZipArchiveLib::CFileInfo& info)
< {
< 	if (info.IsDirectory() && ((m_iSmartLevel & CZipArchive::zipsmIgnoreDirectories) != 0))
< 		return true;
< #if defined _MSC_VER && _MSC_VER < 1300
< 	CZipAddNewFileInfo zanfi(lpszPath, m_pZip->GetRootPath().IsEmpty() == TRUE);
< #else
< 	CZipAddNewFileInfo zanfi(lpszPath, m_pZip->GetRootPath().IsEmpty());
< #endif
< 
< 	
< 	zanfi.m_iComprLevel = m_iComprLevel;
< 	zanfi.m_iSmartLevel = m_iSmartLevel;
< 	zanfi.m_nBufSize = m_nBufSize;
< 	UpdateAddNewFileInfo(&zanfi);	
< 	bool ret = m_pZip->AddNewFile(zanfi);
< 	if (ret && m_pMultiCallback)
< 	{
< 		if (!m_pMultiCallback->MultiActionsNext(zanfi.m_szFileNameInZip))
< 			CZipException::Throw(CZipException::abortedSafely);
< 	}
< 	return ret;
< }
< 
< void CReplacingAddFilesEnumerator::UpdateAddNewFileInfo(CZipAddNewFileInfo* info)
< {
< 	CZipArchive* zip = GetZip();
< 	CZipString fileName = zip->PredictFileNameInZip(info->m_szFilePath, info->m_bFullPath);
< 	ZIP_INDEX_TYPE index = zip->FindFile(fileName);
< 		
< 	if (index != ZIP_FILE_INDEX_NOT_FOUND)
< 		info->m_uReplaceIndex = index;
< }
90d42
< #pragma warning(suppress: 26495)
92c44
< {		
---
> {	
98c50
< 	m_bSafePaths = true;	
---
> 	m_bRemoveDriveLetter = true;	
110,111d61
< 	m_bStoreFullFileTimes = false;
< 	m_bUseUtcFileTimes = true;
210d159
< 	m_bStoreFullFileTimes = false;
216c165
< 	const CBitFlag mode(iMode);
---
> 	CBitFlag mode(iMode);
275a225,226
> 
> 
398,400d348
< 		// when CloseFile returns -1, it doesn't necessarily mean error here (e.g. when using multi seek feature)
< 		// if (CloseFile(NULL, iAfterException != afNoException) == -1)
< 		// 	ThrowError(CZipException::badZipFile);
423c371
< 			time_t tFileInZipTime = m_centralDir[i]->GetModificationTime();
---
> 			time_t tFileInZipTime = m_centralDir[i]->GetTime();
435c383
< 		ZipPlatform::SetFileTimes(szFileName, &tNewestTime);
---
> 		ZipPlatform::SetFileModTime(szFileName, tNewestTime);
462,467c410,411
< 	CZipFileHeader* pCurrentFile = CurrentFile();
< 	time_t tModificationTime = pCurrentFile->GetModificationTime();
< 	time_t tCreationTime = pCurrentFile->GetCreationTime();
< 	time_t tLastAccessTime = pCurrentFile->GetLastAccessTime();
< 	int iRet = ZipPlatform::SetFileTimes((HANDLE)file, &tModificationTime, &tCreationTime, &tLastAccessTime)
< 				&& ZipPlatform::SetFileAttr(file.GetFilePath(), pCurrentFile->GetSystemAttr()) ? 1 : -2;
---
> 	int iRet = ZipPlatform::SetFileModTime((HANDLE)file, CurrentFile()->GetTime())
> 				&& ZipPlatform::SetFileAttr(file.GetFilePath(), CurrentFile()->GetSystemAttr()) ? 1 : -2;
470c414
< 	return iCloseRet == 1 ? iRet : iCloseRet;
---
> 	return iRet == 1 ? iCloseRet : iRet;
487c431
< 	CZipFileHeader* pCurrentFile = CurrentFile();
---
> 
496c440
< 				&& !pCurrentFile->m_bIgnoreCrc32
---
> 				&& !CurrentFile()->m_bIgnoreCrc32
507,511c451,452
< 			time_t tModificationTime = pCurrentFile->GetModificationTime();
< 			time_t tCreationTime = pCurrentFile->GetCreationTime();
< 			time_t tLastAccessTime = pCurrentFile->GetLastAccessTime();
< 			if (!ZipPlatform::SetFileTimes(lpszFilePath, &tModificationTime, &tCreationTime, &tLastAccessTime )
< 				||!ZipPlatform::SetFileAttr(lpszFilePath, pCurrentFile->GetSystemAttr()))
---
> 			if (!ZipPlatform::SetFileModTime(lpszFilePath, CurrentFile()->GetTime())
> 				||!ZipPlatform::SetFileAttr(lpszFilePath, CurrentFile()->GetSystemAttr()))
515c456
< 			m_pCryptograph->FinishDecode(*pCurrentFile, m_storage);
---
> 			m_pCryptograph->FinishDecode(*CurrentFile(), m_storage);
540c481,482
< 		DWORD uAttr = 0;		
---
> 		DWORD uAttr = 0;
> 		time_t ttime;
547,560c489,490
< 		if (m_bStoreFullFileTimes)
< 		{			
< 			time_t tModTime = (time_t)0, tCreateTime = (time_t)0, tLastAccessTime = (time_t)0;
< 			ZipPlatform::GetFileTimes(lpszFilePath, &tModTime, &tCreateTime, &tLastAccessTime);
< 			header.SetModificationTime(tModTime, true, m_bUseUtcFileTimes);
< 			header.SetCreationTime(tCreateTime);
< 			header.SetLastAccessTime(tLastAccessTime);
< 		}
< 		else
< 		{
< 			time_t ttime;
< 			ZipPlatform::GetFileTimes(lpszFilePath, &ttime);
< 			header.SetModificationTime(ttime, false, m_bUseUtcFileTimes);	
< 		}
---
> 		ZipPlatform::GetFileModTime(lpszFilePath, ttime);
> 		header.SetTime(ttime);
568,576c498
< 		{
< 			time_t tNow = time(NULL);
< 			header.SetModificationTime(tNow, m_bStoreFullFileTimes, m_bUseUtcFileTimes);
< 			if (m_bStoreFullFileTimes)
< 			{
< 				header.SetCreationTime(tNow);
< 				header.SetLastAccessTime(tNow);
< 			}
< 		}
---
> 			header.SetTime(time(NULL));
666c588
< 							  ZipPlatform::FileOverwriteMode iOverwriteMode,
---
> 							  ZipPlatform::DeleteFileMode iOverwriteMode,
697,726d618
< 		int iAborted = 0;
< 		
< 		if (ZipPlatform::FileExists(szFile) != 0)
< 		{
< 			if ((iOverwriteMode & ZipPlatform::fomOnlyIfNewer) != 0)
< 			{
< 				time_t fileInZipTime = pHeader->GetModificationTime();
< 				if (fileInZipTime > 0)
< 				{
< 					time_t fileTime;
< 					if (ZipPlatform::GetFileTimes(szFile, &fileTime) && fileTime > 0 && fileTime >= fileInZipTime)
< 					{
< 						if (pCallback)
< 						{
< 							pCallback->SetTotal(pHeader->m_uUncomprSize);
< 							if (!pCallback->RequestCallback(pHeader->m_uUncomprSize) || !pCallback->RequestLastCallback())
< 							{
< 								iAborted = CZipException::abortedSafely;
< 							}
< 							pCallback->CallbackEnd();
< 							if (iAborted)
< 								CZipException::Throw(iAborted, szFile);
< 						}
< 						return true;
< 					}
< 				}
< 			}
< 			ZipPlatform::RemoveFile(szFile, true, iOverwriteMode);			
< 		}
< 
729,730d620
< 		CZipPathComponent zpc(szFile);
< 		ZipPlatform::ForceDirectory(zpc.GetFilePath());
734c624,629
< 		
---
> 		CZipPathComponent zpc(szFile);
> 		ZipPlatform::ForceDirectory(zpc.GetFilePath());
> 		if (ZipPlatform::FileExists(szFile) != 0)
> 		{
> 			ZipPlatform::RemoveFile(szFile, true, iOverwriteMode);			
> 		}
739c634
< 		
---
> 		int iAborted = 0;
760d654
< 		int iResult;
765,766c659,661
< 				iResult = CloseFile(f);
< 				pCallback->CallbackEnd();				
---
> 				bool bRet = CloseFile(f) == 1;
> 				pCallback->CallbackEnd();
> 				return bRet;
805,810c700
< 		{
< 			iResult = CloseFile(f);					
< 		}
< 			if (iResult == -1)
< 				ThrowError(CZipException::badZipFile, szFile);
< 		return iResult == 1;
---
> 			return CloseFile(f) == 1;		
871,876c761,762
< 			int iResult = CloseFile();
< 			pCallback->CallbackEnd();
< 			
< 			if (iResult == -1)
< 				ThrowError(CZipException::badZipFile);
< 			bRet = iResult == 1;
---
> 			bRet = CloseFile() == 1;
> 			pCallback->CallbackEnd();			
917,924c803
< 	{
< 		int iResult = CloseFile();
< 		// when using seeking, it's expected to return -1
< 
< 		if (iResult == -1)
< 			ThrowError(CZipException::badZipFile);
< 		bRet = iResult == 1;
< 	}
---
> 		bRet = CloseFile() == 1;
1075,1076c954
< 			// we take into account the bytes present in an archive that was created with CZipArchive::zipCreateAppend
< 			m_storage.m_pFile->SetLength(GetFileInfo(0)->m_uOffset + (ZIP_FILE_USIZE) m_storage.m_uBytesBeforeZip);
---
> 			m_storage.m_pFile->SetLength((ZIP_FILE_USIZE) m_storage.m_uBytesBeforeZip);
1167c1045
< 		// cannot use a decreasing loop because it is unsigned and instead negative at the end of the loop it will be maximum positive
---
> 		// cannot use a decreasing loop because i is unsigned and instead negative at the end of the loop it will be maximum positive
1332d1209
< #pragma warning(suppress: 26444)
1440c1317
< 	time_t tModificationTime = (time_t) 0, tCreationTime = time_t(0), tLastAccessTime = (time_t)0;
---
> 	time_t ttime;
1444,1448c1321
< 		tModificationTime = time(NULL);
< 		if (m_bStoreFullFileTimes)
< 		{
< 			tCreationTime = tLastAccessTime = tModificationTime;
< 		}
---
> 		ttime = time(NULL);
1454,1457c1327
< 		if (m_bStoreFullFileTimes)
< 			ZipPlatform::GetFileTimes(info.m_szFilePath, &tModificationTime, &tCreationTime, &tLastAccessTime);
< 		else
< 			ZipPlatform::GetFileTimes(info.m_szFilePath, &tModificationTime);
---
> 		ZipPlatform::GetFileModTime(info.m_szFilePath, ttime);
1465,1470c1335
< 	header.SetModificationTime(tModificationTime, m_bStoreFullFileTimes, m_bUseUtcFileTimes);
< 	if (m_bStoreFullFileTimes)
< 	{
< 		header.SetCreationTime(tCreationTime);
< 		header.SetLastAccessTime(tLastAccessTime);
< 	}
---
> 	header.SetTime(ttime);
1520c1385
< 				uFileSize = ZIP_SIZE_TYPE(-1);
---
> 				bEff = false; // the file size is needed only when efficient in a segmented archive
1530,1539d1394
< 		else
< 		{
< 			bEff = false;
< 			bNeedTempArchive = false;
< 			if (bReplace && bIsCompression)
< 			{
< 				info.m_iComprLevel = 0;
< 				bIsCompression = false;
< 			}
< 		}
1544c1399,1401
< 		!(szTempFileName = ZipPlatform::GetTmpFileName(m_szTempPath.IsEmpty() ? NULL : (LPCTSTR)m_szTempPath, uFileSize)).IsEmpty()))
---
> 		!(szTempFileName = ZipPlatform::GetTmpFileName(
> 			m_szTempPath.IsEmpty() ? NULL : (LPCTSTR)m_szTempPath, uFileSize)
> 		).IsEmpty()))
1590,1591c1447
< #pragma warning(suppress: 26444)
< 			zip.Close(bRet ? CZipArchive::afNoException : CZipArchive::afAfterException); // that doesn't really matter how it will be closed
---
> 			zip.Close(!bRet); // that doesn't really matter how it will be closed
1601,1602c1457
< #pragma warning(suppress: 26444)
< 			zip.Close(CZipArchive::afAfterException);
---
> 			zip.Close(true);
1630a1486,1487
> 	// call init before opening (in case of exception we have the names)
> 	uFileSize = (ZIP_SIZE_TYPE)pf->GetLength();
1632,1639d1488
< 	if (uFileSize == ZIP_SIZE_TYPE(-1))
< 	{
< 		uFileSize = (ZIP_SIZE_TYPE)pf->GetLength();
< 		if (uFileSize == ZIP_SIZE_TYPE(-1))
< 		{
< 			return false;
< 		}
< 	}
1669c1518
< 	CZipAutoBuffer buf((DWORD)info.m_nBufSize);
---
> 	CZipAutoBuffer buf(info.m_nBufSize);
1674c1523
< 		iRead = (DWORD)pf->Read(buf, (UINT)info.m_nBufSize);
---
> 		iRead = pf->Read(buf, info.m_nBufSize);
1717a1567
> 				bool bRet;
1849a1700,1735
> class CAddFilesEnumerator : public ZipArchiveLib::CDirEnumerator
> {
> 	CZipArchive* m_pZip;
> 	CZipActionCallback* m_pMultiCallback;
> 	int m_iComprLevel;
> 	int m_iSmartLevel;
> 	unsigned long m_nBufSize;
> public:
> 	CAddFilesEnumerator(LPCTSTR lpszDirectory, 
> 			bool bRecursive, 
> 			 CZipArchive* pZip, 
> 			int iComprLevel, 
> 			int iSmartLevel, 
> 			unsigned long nBufSize,
> 			CZipActionCallback* pMultiCallback)
> 		:ZipArchiveLib::CDirEnumerator(lpszDirectory, bRecursive), m_pZip(pZip)
> 	{
> 		m_iComprLevel = iComprLevel;
> 		m_nBufSize = nBufSize;
> 		m_iSmartLevel = iSmartLevel;
> 		m_pMultiCallback = pMultiCallback;
> 	}
> protected:
> 	bool Process(LPCTSTR lpszPath, const ZipArchiveLib::CFileInfo& info)
> 	{
> 		if (info.IsDirectory() && ((m_iSmartLevel & CZipArchive::zipsmIgnoreDirectories) != 0))
> 			return true;
> 
> 		bool ret = m_pZip->AddNewFile(lpszPath, m_iComprLevel, m_pZip->GetRootPath().IsEmpty() != 0, m_iSmartLevel, m_nBufSize);
> 		if (ret && m_pMultiCallback)
> 			if (!m_pMultiCallback->MultiActionsNext())
> 				CZipException::Throw(CZipException::abortedSafely);
> 		return ret;
> 	}
> };
> 
1858,1863d1743
< 	CZipAddFilesEnumerator addFilesEnumerator(lpszPath, bRecursive, iComprLevel, iSmartLevel, nBufSize);
< 	return AddNewFiles(addFilesEnumerator, filter, bSkipInitialPath);	
< }
< 
< bool CZipArchive::AddNewFiles(CZipAddFilesEnumerator& addFilesEnumerator, CFileFilter& filter, bool bSkipInitialPath)
< {
1869c1749
< 	addFilesEnumerator.Initialize(this);
---
> 
1872,1878c1752
< 	{
< 		CZipString directory = addFilesEnumerator.GetDirectory();
< 		if (directory.IsEmpty() || directory == _T(".")) // an empty directory is set to "." in the constructor of CDirEnumerator
< 			restorer.SetNewRootPath(this, NULL);
< 		else 
< 			restorer.SetNewRootPath(this, directory);
< 	}
---
> 		restorer.SetNewRootPath(this, lpszPath);
1885,1886c1759,1760
< 		CCalculateAddFilesEnumerator calculateEnumerator(addFilesEnumerator.GetDirectory(), addFilesEnumerator.IsRecursive(), 
< 			GetCallback(CZipActionCallback::cbCalculateForMulti), (addFilesEnumerator.m_iSmartLevel & CZipArchive::zipsmIgnoreDirectories) == 0);
---
> 		CCalculateAddFilesEnumerator calculateEnumerator(lpszPath, bRecursive, 
> 			GetCallback(CZipActionCallback::cbCalculateForMulti), (iSmartLevel & CZipArchive::zipsmIgnoreDirectories) == 0);
1896a1771
> 		CAddFilesEnumerator addFilesEnumerator(lpszPath, bRecursive, this, iComprLevel, iSmartLevel, nBufSize, pMultiCallback);
2002d1876
< 		m_uUncompressedOffset = 0;
2107c1981
< 		uExtraData += (ZIP_SIZE_TYPE)uLocalDiff + uDescriptorDiff;
---
> 		uExtraData += uLocalDiff + uDescriptorDiff;
2190c2064
< 		uExtraData += ((ZIP_SIZE_TYPE)uExtraBefore + uExtraAfter) * (DWORD)infos.GetSize();
---
> 		uExtraData += (ZIP_SIZE_TYPE)(((uExtraBefore + uExtraAfter) * infos.GetSize()));
2215c2089
< 				uExtraData -= ((ZIP_SIZE_TYPE)uExtraAfter + info.m_uDescriptorSizeDiff);
---
> 				uExtraData -= (uExtraAfter + info.m_uDescriptorSizeDiff);
2229c2103
< 				uExtraData -= ((ZIP_SIZE_TYPE)uExtraBefore + info.m_uLocalSizeDiff);
---
> 				uExtraData -= (uExtraBefore + info.m_uLocalSizeDiff);
2257d2130
< 			const CZipString& szFileName = pHeader->GetFileName();
2260c2133
< 				pCallback->Init(szFileName);
---
> 				pCallback->Init(pHeader->GetFileName());
2302c2175
< 						pMultiCallback->MultiActionsNext(szFileName);
---
> 						pMultiCallback->MultiActionsNext();
2579,2588d2451
< 	CZipString szNormalizedPath(szPath);
< 
< 	// normalize paths to allow using slashes in paths under Windows
< #ifdef _ZIP_SYSTEM_WIN	
< 	// this is just for completness as it will always be a slash character under Windows
< 	TCHAR cReversedSeparator = CZipPathComponent::m_cSeparator == _T('\\') ? _T('/') : _T('\\');
< 	szBeginning.Replace(cReversedSeparator, CZipPathComponent::m_cSeparator);
< 	szNormalizedPath.Replace(cReversedSeparator, CZipPathComponent::m_cSeparator);
< #endif
< 
2590,2591c2453,2454
< 	if (iRootPathLength && szNormalizedPath.GetLength() >= iRootPathLength &&
< 		(szNormalizedPath.Left(iRootPathLength).*pCompareFunction)(szBeginning) == 0)
---
> 	if (iRootPathLength && szPath.GetLength() >= iRootPathLength &&
> 		(szPath.Left(iRootPathLength).*pCompareFunction)(szBeginning) == 0)
2648c2511
< 		if (m_bSafePaths)
---
> 		if (m_bRemoveDriveLetter)
2662,2694c2525
< 
< 	CZipString sz;
< 	if (lpszNewName)
< 		sz = lpszNewName;
< 	else
< 	{
< 		sz = lpszFileNameInZip;
< 		if (m_bSafePaths)
< 		{
< 			CZipString szDirTraversal = _T("..");
< 			szDirTraversal += CZipPathComponent::m_cSeparator;
< 			int current = 0;
< 			while(true)
< 			{
< 				int start = sz.Find(szDirTraversal, current);
< 				if (start > -1)
< 				{
< 					if (start == 0)
< 					{
< 						sz = sz.Mid(3);
< 					}
< 					else
< 					{
< 						sz = sz.Mid(0, start) + sz.Mid(start + 3);
< 					}			
< 				}
< 				else
< 					break;
< 				current = start;
< 			}
< 			CZipPathComponent::RemoveSeparatorsLeft(sz);
< 		}		
< 	}
---
> 	CZipString sz = lpszNewName ? lpszNewName : lpszFileNameInZip;
2699a2531
> 	
2703c2535
< 	szFile += bFullPath ? (m_bSafePaths ? zpc.GetNoDrive() : sz) 
---
> 	szFile += bFullPath ? (m_bRemoveDriveLetter ? zpc.GetNoDrive() : sz) 
2732c2564
< 	ZIP_SIZE_TYPE ret = (ZIP_SIZE_TYPE)fh.GetSize() + uLocalSize + fh.GetDataSize(false) + fh.GetDataDescriptorSize(&m_storage);
---
> 	ZIP_SIZE_TYPE ret = fh.GetSize() + uLocalSize + fh.GetDataSize(false) + fh.GetDataDescriptorSize(&m_storage);
3022d2853
<             {
3033c2864
<             }
---
> 
3066c2897
< bool CZipArchive::GetFromArchive( CZipArchive& zip, CZipIndexesArray &aIndexes, bool bKeepSystComp, bool bReplaceMode)
---
> bool CZipArchive::GetFromArchive( CZipArchive& zip, CZipIndexesArray &aIndexes, bool bKeepSystComp)
3076,3083c2907
< 			ZIP_INDEX_TYPE uReplaceIndex = ZIP_FILE_INDEX_UNSPECIFIED;
< 			if (bReplaceMode)
< 			{
< 				if (!zip.m_centralDir.IsValidIndex(uFileIndex))
< 					return false;
< 				uReplaceIndex = FindFile(zip[uFileIndex]->GetFileName());
< 			}
< 			if (!GetFromArchive(zip, uFileIndex, NULL, uReplaceIndex, bKeepSystComp, GetCallback(CZipActionCallback::cbGet)))
---
> 			if (!GetFromArchive(zip, uFileIndex, NULL, ZIP_FILE_INDEX_UNSPECIFIED, bKeepSystComp, GetCallback(CZipActionCallback::cbGet)))
3110c2934
< 	CZipChangeInfo(ZIP_INDEX_TYPE index,
---
> 	CZipChangeInfo(ZIP_INDEX_TYPE index, 
3262c3086
< 		relativeOffset = idx == 0 ? 0 : aInfo.GetAt(idx - 1).m_relativeOffset;
---
> 		ZIP_FILE_SIZE relativeOffset = idx == 0 ? 0 : aInfo.GetAt(idx - 1).m_relativeOffset;
3388c3212
< 			uSizeRead = (UINT)m_storage.m_pFile->Read(buf, (UINT)uPack);
---
> 			uSizeRead = m_storage.m_pFile->Read(buf, (UINT)uPack);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
14c14
< // Check the site https://www.artpol-software.com for the updated version of the library.
---
> // Check the site http://www.artpol-software.com for the updated version of the library.
20a21,22
>  
> 
55c57
< 	The structure used as a parameter in the CZipArchive::AddNewFile(CZipAddNewFileInfo& ) method.
---
> 	The structure used as a parameter in CZipArchive::AddNewFile(CZipAddNewFileInfo& ).
72d73
< #pragma warning(suppress: 26495)
89d89
< #pragma warning(suppress: 26495)
106d105
< #pragma warning(suppress: 26495)
129c128
< 		CZipArchive::m_bSafePaths is set to \c false.
---
> 		CZipArchive::m_bRemoveDriveLetter is set to \c false.
197c196
< class ZIP_API CZipAddFilesEnumerator;
---
> 
675c674
< 		zipOpenSplit		= zipOpenReadOnly | zipModeSplit, ///< Opens an existing split archive. Use when opening split archives on removable devices or under Linux/OS X.
---
> 		zipOpenSplit		= zipOpenReadOnly | zipModeSplit, ///< Opens an existing split archive. Use when opening split archives on removable devices or under Linux/Mac OS X.
899c898
< 			AddNewFiles(LPCTSTR, ZipArchiveLib::CFileFilter&, bool, int, bool, int, unsigned long)		
---
> 			AddNewFiles(LPCTSTR, ZipArchiveLib::CFileFilter&, bool, int, bool, int, unsigned long)
902,903d900
< 		\see 
< 			AddNewFiles(CZipAddFilesEnumerator&, ZipArchiveLib::CFileFilter&, bool)
984,985d980
< 			AddNewFiles(CZipAddFilesEnumerator&, ZipArchiveLib::CFileFilter&, bool)
< 		\see 
1039,1040d1033
< 			AddNewFiles(CZipAddFilesEnumerator&, ZipArchiveLib::CFileFilter&, bool)
< 		\see 
1062,1103d1054
< 	/**
< 		Adds new files to the opened archive using the given directory enumerator using a filter. To replace files in the archive while adding,
< 		use the CReplacingAddFilesEnumerator class.
< 
< 		\param addFilesEnumerator
< 			The enumerator responsible for adding of files.
< 
< 		\param filter
< 			A filter that determines which files should be added.		
< 
< 		\param bSkipInitialPath
< 			\c true, if the \a lpszPath directory should be removed from paths stored in the archive;
< 			\c false otherwise.		
< 
< 		\return	
< 			If \c false then some files were probably not added (in this case, you can still try to add other files); \c true otherwise.
< 
< 		
< 		\see
< 			<a href="kb">0610231446|filters</a>
< 		\see
< 			ZipArchiveLib::CFileFilter
< 		\see 
< 			ZipArchiveLib::CNameFileFilter
< 		\see 
< 			ZipArchiveLib::CGroupFileFilter
< 		\see
< 			AddNewFiles(LPCTSTR, LPCTSTR, bool, int, bool, int, unsigned long)
< 		\see
< 			AddNewFiles(LPCTSTR, ZipArchiveLib::CFileFilter&, bool, int, bool, int, unsigned long)
< 		\see 
< 			AddNewFile(CZipAddNewFileInfo&)
< 		\see
< 			AddNewFile(LPCTSTR, LPCTSTR, int, int, unsigned long)
< 		\see 
< 			AddNewFile(LPCTSTR, int, bool, int, unsigned long)
< 		\see 
< 			AddNewFile(CZipAbstractFile&, LPCTSTR, int, int, unsigned long)
< 
< 	*/
< 	bool AddNewFiles(CZipAddFilesEnumerator& addFilesEnumerator, ZipArchiveLib::CFileFilter& filter, bool bSkipInitialPath = true );
< 
1124c1075
< 			\li Use CZipFileHeader::SetModificationTime to set the modification time.
---
> 			\li Use CZipFileHeader::SetTime to set the modification time.
1308,1311d1258
< 		\param bReplaceMode
< 			If \c true, then the files are checked for existence in the current archive by names. 
< 			If a file with the same name exists, it is replaced, otherwise it is added.
< 
1342c1289
< 	bool GetFromArchive(CZipArchive& zip, CZipIndexesArray &aIndexes, bool bKeepSystComp = false, bool bReplaceMode = false);
---
> 	bool GetFromArchive(CZipArchive& zip, CZipIndexesArray &aIndexes, bool bKeepSystComp = false);
1423c1370
< 		unless #m_bSafePaths is set to \c false.
---
> 		unless #m_bRemoveDriveLetter is set to \c false.
1474c1421
< 			ExtractFile(ZIP_INDEX_TYPE, CZipAbstractFile&, bool, CZipCompressor::COffsetsPair*, DWORD)
---
> 			ExtractFile(ZIP_INDEX_TYPE, CZipAbstractFile&, bool, ZipPlatform::DeleteFileMode, CZipCompressor::COffsetsPair*, DWORD)
1484c1431
< 		ZipPlatform::FileOverwriteMode iOverwriteMode = ZipPlatform::fomRegular,
---
> 		ZipPlatform::DeleteFileMode iOverwriteMode = ZipPlatform::dfmRegular,
1488c1435,1436
< 		The same as #ExtractFile(ZIP_INDEX_TYPE, LPCTSTR, bool, LPCTSTR, ZipPlatform::FileOverwriteMode, CZipCompressor::COffsetsPair*, DWORD) but instead to a physical file, this method extracts data into a \c CZipAbstractFile object.
---
> 		The same as #ExtractFile(ZIP_INDEX_TYPE, CZipAbstractFile&, bool, ZipPlatform::DeleteFileMode, CZipCompressor::COffsetsPair*, DWORD)
> 		but instead to a physical file, this method extracts data into a \c CZipMemFile object.
1516c1464
< 			ExtractFile(ZIP_INDEX_TYPE, LPCTSTR, bool, LPCTSTR, ZipPlatform::FileOverwriteMode, CZipCompressor::COffsetsPair*, DWORD)
---
> 			ExtractFile(ZIP_INDEX_TYPE, CZipAbstractFile&, bool, ZipPlatform::DeleteFileMode, CZipCompressor::COffsetsPair*, DWORD)
1918c1866
< 			(\e "\" for Windows and \e "/" for Linux and OS X).
---
> 			(\e "\" for Windows and \e "/" for Linux and Mac OS X).
2528,2529c2476,2477
< 
< 		\param iFindFastIndex
---
>        
>        \param iFindFastIndex
2532c2480
< 		\return 
---
>        \return 
2624c2572
< 	CZipString PredictFileNameInZip(LPCTSTR lpszFilePath, bool bFullPath, int iWhat = prAuto) const ;
---
> 	CZipString PredictFileNameInZip(LPCTSTR lpszFilePath, bool bFullPath, int iWhat = prAuto)const ;
2704c2652,2653
< 	   The parameters (except for the first) are in the form you would pass to the #ExtractFile(ZIP_INDEX_TYPE, CZipAbstractFile&, bool, CZipCompressor::COffsetsPair*, DWORD) method.
---
> 	   The parameters (except for the first) are in the form you would pass
> 	   to the #ExtractFile(ZIP_INDEX_TYPE, CZipAbstractFile&, bool, ZipPlatform::DeleteFileMode, CZipCompressor::COffsetsPair*, DWORD)
2710,2711c2659
< 		\param lpszPath
< 			The same as in the \c ExtractFile method.
---
>        \param lpszPath
2713,2714c2661
< 		\param bFullPath
< 			The same as in the \c ExtractFile method.
---
>        \param bFullPath
2716,2717c2663
< 		\param lpszNewName       
< 			The same as in the \c ExtractFile method.
---
>        \param lpszNewName       
2719c2665
< 		\return
---
>        \return
2781c2727
< 	/**
---
> 	/*
2888,2890c2834
< 		checkTrimmedCentralDir  = 0x0800,	///< Verifies that the central directory is written in its entirety.
< 		checkInvalidExtraData   = 0x1000,	///< Verifies that the extra data is valid.
< 		checkAll				= checkCRC | checkLocalAll | checkDataDescriptor | checkVolumeEntries | checkDecryptionVerifier | checkTrimmedCentralDir | checkInvalidExtraData, ///< Logical sum of all possible verifications.
---
> 		checkAll				= checkCRC | checkLocalAll | checkDataDescriptor | checkVolumeEntries | checkDecryptionVerifier, ///< Logical sum of all possible verifications.
2902,2904d2845
< 		/**
< 			No special flags set.
< 		*/
2906d2846
< 
2909c2849
< 			By default, the ZipArchive Library reads only the number of headers declared by the archive. 
---
> 			By default, the ZipArchive Library reads only the number of headers declared by the archive. Call this method before opening an archive. 
2913c2853
< 			can take place with archives created with e.g. BOMArchiveHelper (OS X utility), when the number of files exceeds 65,535.
---
> 			can take place with archives created with e.g. BOMArchiveHelper (Mac OS X utility), when the number of files exceeds 65,535.
2915,2916c2855
< 		sfExhaustiveRead = 0x0001,
< 
---
> 		sfExhaustiveRead,
2921,2922c2860,2861
< 		consistent, but nevertheless the compressed data is correct. Set it before or after opening an archive.
< 
---
> 		consistent, but nevertheless the compressed data is correct. The level is reset to #checkIgnoredByDefault when
> 		opening or creating an archive.
2932c2871,2876
< 	{		
---
> 	{
> 		if (IsClosed())
> 		{
> 			ZIPTRACE("%s(%i) : Set it after opening the archive.\n");
> 			return;
> 		}
2948c2892
< 		Sets special flags. It can be one or more of the #SpecialFlags values. Call this method before opening an archive.
---
> 		Sets special flags. It can be one or more of the #SpecialFlags values.
2976,2978c2920,2922
< 		The indexes can be used then e.g. in deleting or extracting files.       
< 
< 	   \param lpszPattern
---
> 		The indexes can be used then e.g. in deleting or extracting files.
>        
>        \param lpszPattern
2981,2982c2925,2926
< 			
< 	   \param ar
---
> 
>        \param ar
3180,3186d3123
< 
< 	/**
< 		Returns the value indicating whether a password is set for the archive.
< 
< 		\return
< 			\c true, if a password is set for the archive; \c false otherwise.
< 	*/
3192,3259d3128
< 	/**
< 		Returns the value indicating whether using of full file time resolution is set for the archive.
< 
< 		\return
< 			\c true, if full file times resolution is set for the archive; \c false otherwise.
< 
< 		\see
< 			SetFullFileTimes
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	bool IsFullFileTimes() const
< 	{
< 		return m_bStoreFullFileTimes;
< 	}
< 
< 	/**
< 		Enables using of full times resolution when creating files in the archive. Note, the information whether the times are stored in UTC or local times is not stored in the archive.
< 
< 		\see
< 			IsFullFileTimes
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	void SetFullFileTimes(bool bFullFileTimes = true)
< 	{
< 		if (IsClosed())
< 		{
< 			ZIPTRACE("%s(%i) : Set it after opening the archive.\n");
< 			return;
< 		}
< 		m_bStoreFullFileTimes = bFullFileTimes;
< 	}
< 
< 	/**
< 		Returns the value indicating whether using of UTC file times is currently set for the archive.
< 
< 		\return
< 			\c true, if file times are stored in UTC in the archive; \c false otherwise.
< 
< 		\see
< 			SetUseUtcFileTimes
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	bool IsUseUtcFileTimes() const
< 	{
< 		return m_bUseUtcFileTimes;
< 	}
< 
< 	/**
< 		Enables using of UTC file times when creating files in the archive.
< 
< 		\see
< 			IsUseUtcFileTimes
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	void SetUseUtcFileTimes(bool bUseUtcFileTimes = true)
< 	{
< 		if (IsClosed())
< 		{
< 			ZIPTRACE("%s(%i) : Set it after opening the archive.\n");
< 			return;
< 		}
< 		m_bUseUtcFileTimes = bUseUtcFileTimes;
< 	}
< 
3305c3174
< 		If \c true, the drive letter (or an initial path separator indicating rooted paths) is removed from the filename stored inside the archive when adding
---
> 		If \c true, the drive letter is removed from the filename stored inside the archive when adding
3308c3177
< 		#WillBeDuplicated methods. Also directory traversal paths are removed from files names to prevent Zip Slip on extraction. The default value is \c true.
---
> 		#WillBeDuplicated methods. The default value is \c true.
3310c3179
< 	bool m_bSafePaths;
---
> 	bool m_bRemoveDriveLetter;
3370,3380d3238
< 
< 	/**
< 		The value set with #SetFullFileTimes
< 	*/
< 	bool m_bStoreFullFileTimes;
< 
< 
< 	/**
< 		The value set with #SetUseUtcFileTimes
< 	*/
< 	bool m_bUseUtcFileTimes;
3610,3674d3467
< };
< 
< 
< /**
< 	The class used as a parameter in the AddNewFiles(CZipAddFilesEnumerator&, ZipArchiveLib::CFileFilter&, bool) method.	
< 
< 	\see
< 		<a href="kb">0610231446|simpleMulti</a>
< */
< class ZIP_API CZipAddFilesEnumerator : public ZipArchiveLib::CDirEnumerator
< {
< friend class CZipArchive;
< 	CZipArchive* m_pZip;
< 	
< protected:
< 	CZipActionCallback* m_pMultiCallback;
< 	int m_iComprLevel;
< 	int m_iSmartLevel;
< 	unsigned long m_nBufSize;	
< public:
< 	CZipAddFilesEnumerator(LPCTSTR lpszDirectory, 
< 			bool bRecursive = true, 
< 			int iComprLevel = -1, 
< 			int iSmartLevel = CZipArchive::zipsmSafeSmart, 
< 			unsigned long nBufSize = 65536);	
< protected:	
< 	CZipArchive* GetZip()
< 	{
< 		return m_pZip;
< 	}
< 
< 	virtual void Initialize(CZipArchive* pZip)
< 	{
< 		m_pZip = pZip;
< 		m_pMultiCallback = m_pZip->GetCallback(CZipActionCallback::cbMultiAdd);
< 	}
< 		
< 	virtual void UpdateAddNewFileInfo(CZipAddNewFileInfo* )
< 	{
< 	}
< 
< 	bool Process(LPCTSTR lpszPath, const ZipArchiveLib::CFileInfo& info);	
< };
< 
< /**
< 	The class that can be used as a parameter in the AddNewFiles(CZipAddFilesEnumerator&, ZipArchiveLib::CFileFilter&, bool) method.	
< 	It provides an additional behavior that replaces files in the archive when a file being added already exists in the archive (it compares names).
< 
< 	\see
< 		<a href="kb">0610231446|simpleMulti</a>
< */
< class ZIP_API CReplacingAddFilesEnumerator : public CZipAddFilesEnumerator
< {
< public:
< 	CReplacingAddFilesEnumerator(LPCTSTR lpszDirectory, 
< 			bool bRecursive = true, 
< 			int iComprLevel = -1, 
< 			int iSmartLevel = CZipArchive::zipsmSafeSmart,
< 			unsigned long nBufSize = 65536)
< 			:CZipAddFilesEnumerator(lpszDirectory, bRecursive, iComprLevel, iSmartLevel, nBufSize)
< 	{
< 		
< 	}
< protected:
< 	void UpdateAddNewFileInfo(CZipAddNewFileInfo* info);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.rc lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.rc
30,31c30,31
<  FILEVERSION 4,6,9,0
<  PRODUCTVERSION 4,6,9,0
---
>  FILEVERSION 4,1,1,0
>  PRODUCTVERSION 4,1,1,0
46c46
<             VALUE "Comments", "https://www.artpol-software.com"
---
>             VALUE "Comments", "http://www.artpol-software.com"
49c49
<             VALUE "FileVersion", "4.6.9"
---
>             VALUE "FileVersion", "4.1.1"
51c51
<             VALUE "LegalCopyright", "Copyright (c) 2000 - 2022 Artpol Software - Tadeusz Dracz"
---
>             VALUE "LegalCopyright", "Copyright (c) 2000 - 2011 Artpol Software - Tadeusz Dracz"
54c54
<             VALUE "ProductVersion", "4.6.9"
---
>             VALUE "ProductVersion", "4.1.1"
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.sln lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.sln
2,6c2,3
< 
< Microsoft Visual Studio Solution File, Format Version 12.00
< # Visual Studio Version 17
< VisualStudioVersion = 17.0.31903.59
< MinimumVisualStudioVersion = 10.0.40219.1
---
> Microsoft Visual Studio Solution File, Format Version 11.00
> # Visual Studio 2010
12d8
< 		Debug MFC MD DLL|x64 = Debug MFC MD DLL|x64
14d9
< 		Debug MFC MD|x64 = Debug MFC MD|x64
16d10
< 		Debug MFC MT|x64 = Debug MFC MT|x64
18d11
< 		Debug STL MD DLL|x64 = Debug STL MD DLL|x64
20d12
< 		Debug STL MD|x64 = Debug STL MD|x64
22d13
< 		Debug STL MT|x64 = Debug STL MT|x64
24d14
< 		Debug Unicode MFC MD DLL|x64 = Debug Unicode MFC MD DLL|x64
26d15
< 		Debug Unicode MFC MD|x64 = Debug Unicode MFC MD|x64
28d16
< 		Debug Unicode MFC MT|x64 = Debug Unicode MFC MT|x64
30d17
< 		Debug Unicode STL MD DLL|x64 = Debug Unicode STL MD DLL|x64
32d18
< 		Debug Unicode STL MD|x64 = Debug Unicode STL MD|x64
34d19
< 		Debug Unicode STL MT|x64 = Debug Unicode STL MT|x64
36d20
< 		Release MFC MD DLL|x64 = Release MFC MD DLL|x64
38d21
< 		Release MFC MD|x64 = Release MFC MD|x64
40d22
< 		Release MFC MT|x64 = Release MFC MT|x64
42d23
< 		Release STL MD DLL|x64 = Release STL MD DLL|x64
44d24
< 		Release STL MD|x64 = Release STL MD|x64
46d25
< 		Release STL MT|x64 = Release STL MT|x64
48d26
< 		Release Unicode MFC MD DLL|x64 = Release Unicode MFC MD DLL|x64
50d27
< 		Release Unicode MFC MD|x64 = Release Unicode MFC MD|x64
52d28
< 		Release Unicode MFC MT|x64 = Release Unicode MFC MT|x64
54d29
< 		Release Unicode STL MD DLL|x64 = Release Unicode STL MD DLL|x64
56d30
< 		Release Unicode STL MD|x64 = Release Unicode STL MD|x64
58d31
< 		Release Unicode STL MT|x64 = Release Unicode STL MT|x64
63,64d35
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug MFC MD DLL|x64.ActiveCfg = Debug MFC MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug MFC MD DLL|x64.Build.0 = Debug MFC MD DLL|x64
67,68d37
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug MFC MD|x64.ActiveCfg = Debug MFC MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug MFC MD|x64.Build.0 = Debug MFC MD|x64
71,72d39
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug MFC MT|x64.ActiveCfg = Debug MFC MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug MFC MT|x64.Build.0 = Debug MFC MT|x64
75,76d41
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug STL MD DLL|x64.ActiveCfg = Debug STL MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug STL MD DLL|x64.Build.0 = Debug STL MD DLL|x64
79,80d43
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug STL MD|x64.ActiveCfg = Debug STL MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug STL MD|x64.Build.0 = Debug STL MD|x64
83,84d45
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug STL MT|x64.ActiveCfg = Debug STL MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug STL MT|x64.Build.0 = Debug STL MT|x64
87,88d47
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode MFC MD DLL|x64.ActiveCfg = Debug Unicode MFC MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode MFC MD DLL|x64.Build.0 = Debug Unicode MFC MD DLL|x64
91,92d49
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode MFC MD|x64.ActiveCfg = Debug Unicode MFC MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode MFC MD|x64.Build.0 = Debug Unicode MFC MD|x64
95,96d51
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode MFC MT|x64.ActiveCfg = Debug Unicode MFC MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode MFC MT|x64.Build.0 = Debug Unicode MFC MT|x64
99,100d53
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode STL MD DLL|x64.ActiveCfg = Debug Unicode STL MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode STL MD DLL|x64.Build.0 = Debug Unicode STL MD DLL|x64
103,104d55
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode STL MD|x64.ActiveCfg = Debug Unicode STL MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode STL MD|x64.Build.0 = Debug Unicode STL MD|x64
107,108d57
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode STL MT|x64.ActiveCfg = Debug Unicode STL MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Debug Unicode STL MT|x64.Build.0 = Debug Unicode STL MT|x64
111,112d59
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release MFC MD DLL|x64.ActiveCfg = Release MFC MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release MFC MD DLL|x64.Build.0 = Release MFC MD DLL|x64
115,116d61
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release MFC MD|x64.ActiveCfg = Release MFC MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release MFC MD|x64.Build.0 = Release MFC MD|x64
119,120d63
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release MFC MT|x64.ActiveCfg = Release MFC MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release MFC MT|x64.Build.0 = Release MFC MT|x64
123,124d65
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release STL MD DLL|x64.ActiveCfg = Release STL MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release STL MD DLL|x64.Build.0 = Release STL MD DLL|x64
127,128d67
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release STL MD|x64.ActiveCfg = Release STL MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release STL MD|x64.Build.0 = Release STL MD|x64
131,132d69
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release STL MT|x64.ActiveCfg = Release STL MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release STL MT|x64.Build.0 = Release STL MT|x64
135,136d71
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode MFC MD DLL|x64.ActiveCfg = Release Unicode MFC MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode MFC MD DLL|x64.Build.0 = Release Unicode MFC MD DLL|x64
139,140d73
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode MFC MD|x64.ActiveCfg = Release Unicode MFC MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode MFC MD|x64.Build.0 = Release Unicode MFC MD|x64
143,144d75
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode MFC MT|x64.ActiveCfg = Release Unicode MFC MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode MFC MT|x64.Build.0 = Release Unicode MFC MT|x64
147,148d77
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode STL MD DLL|x64.ActiveCfg = Release Unicode STL MD DLL|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode STL MD DLL|x64.Build.0 = Release Unicode STL MD DLL|x64
151,152d79
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode STL MD|x64.ActiveCfg = Release Unicode STL MD|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode STL MD|x64.Build.0 = Release Unicode STL MD|x64
155,156d81
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode STL MT|x64.ActiveCfg = Release Unicode STL MT|x64
< 		{A51CF340-B0EA-4C9B-A2FA-4D7487692EF5}.Release Unicode STL MT|x64.Build.0 = Release Unicode STL MT|x64
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.vcxproj lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipArchive.vcxproj
2c2
< <Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
---
> <Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
8,11d7
<     <ProjectConfiguration Include="Debug MFC MD DLL|x64">
<       <Configuration>Debug MFC MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
16,19d11
<     <ProjectConfiguration Include="Debug MFC MD|x64">
<       <Configuration>Debug MFC MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
24,27d15
<     <ProjectConfiguration Include="Debug MFC MT|x64">
<       <Configuration>Debug MFC MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
32,35d19
<     <ProjectConfiguration Include="Debug STL MD DLL|x64">
<       <Configuration>Debug STL MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
40,43d23
<     <ProjectConfiguration Include="Debug STL MD|x64">
<       <Configuration>Debug STL MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
48,51d27
<     <ProjectConfiguration Include="Debug STL MT|x64">
<       <Configuration>Debug STL MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
56,59d31
<     <ProjectConfiguration Include="Debug Unicode MFC MD DLL|x64">
<       <Configuration>Debug Unicode MFC MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
64,67d35
<     <ProjectConfiguration Include="Debug Unicode MFC MD|x64">
<       <Configuration>Debug Unicode MFC MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
72,75d39
<     <ProjectConfiguration Include="Debug Unicode MFC MT|x64">
<       <Configuration>Debug Unicode MFC MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
80,83d43
<     <ProjectConfiguration Include="Debug Unicode STL MD DLL|x64">
<       <Configuration>Debug Unicode STL MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
88,91d47
<     <ProjectConfiguration Include="Debug Unicode STL MD|x64">
<       <Configuration>Debug Unicode STL MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
96,99d51
<     <ProjectConfiguration Include="Debug Unicode STL MT|x64">
<       <Configuration>Debug Unicode STL MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
104,107d55
<     <ProjectConfiguration Include="Release MFC MD DLL|x64">
<       <Configuration>Release MFC MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
112,115d59
<     <ProjectConfiguration Include="Release MFC MD|x64">
<       <Configuration>Release MFC MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
120,123d63
<     <ProjectConfiguration Include="Release MFC MT|x64">
<       <Configuration>Release MFC MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
128,131d67
<     <ProjectConfiguration Include="Release STL MD DLL|x64">
<       <Configuration>Release STL MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
136,139d71
<     <ProjectConfiguration Include="Release STL MD|x64">
<       <Configuration>Release STL MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
144,147d75
<     <ProjectConfiguration Include="Release STL MT|x64">
<       <Configuration>Release STL MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
152,155d79
<     <ProjectConfiguration Include="Release Unicode MFC MD DLL|x64">
<       <Configuration>Release Unicode MFC MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
160,163d83
<     <ProjectConfiguration Include="Release Unicode MFC MD|x64">
<       <Configuration>Release Unicode MFC MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
168,171d87
<     <ProjectConfiguration Include="Release Unicode MFC MT|x64">
<       <Configuration>Release Unicode MFC MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
176,179d91
<     <ProjectConfiguration Include="Release Unicode STL MD DLL|x64">
<       <Configuration>Release Unicode STL MD DLL</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
184,187d95
<     <ProjectConfiguration Include="Release Unicode STL MD|x64">
<       <Configuration>Release Unicode STL MD</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
192,195d99
<     <ProjectConfiguration Include="Release Unicode STL MT|x64">
<       <Configuration>Release Unicode STL MT</Configuration>
<       <Platform>x64</Platform>
<     </ProjectConfiguration>
201,202d104
<     <VCProjectVersion>16.0</VCProjectVersion>
<     <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
210,217d111
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
223,229d116
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
236,243d122
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
249,255d127
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
262,269d133
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
275,281d138
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
288,295d144
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
301,307d149
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'" Label="Configuration">
<     <ConfigurationType>DynamicLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
314,321d155
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Static</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
327,333d160
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Static</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
340,347d166
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Static</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
353,359d171
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Static</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
366,373d177
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
379,385d182
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
392,399d188
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
405,411d193
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
418,425d199
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
431,437d204
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
444,451d210
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
457,463d215
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>false</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
470,477d221
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
483,489d226
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>Unicode</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
496,503d232
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <WholeProgramOptimization>true</WholeProgramOptimization>
<     <PlatformToolset>v143</PlatformToolset>
509,515d237
<     <PlatformToolset>v143</PlatformToolset>
<   </PropertyGroup>
<   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'" Label="Configuration">
<     <ConfigurationType>StaticLibrary</ConfigurationType>
<     <UseOfMfc>Dynamic</UseOfMfc>
<     <CharacterSet>MultiByte</CharacterSet>
<     <PlatformToolset>v143</PlatformToolset>
523,525d244
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
529,531d247
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
535,537d250
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
541,543d253
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
547,549d256
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
553,555d259
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
559,561d262
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
565,567d265
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
571,573d268
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
577,579d271
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
583,585d274
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
589,591d277
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
595,597d280
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
601,603d283
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
607,609d286
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
613,615d289
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
619,621d292
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
625,627d295
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
631,633d298
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
637,639d301
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
643,645d304
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
649,651d307
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
655,657d310
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
661,663d313
<   <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'" Label="PropertySheets">
<     <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
<   </ImportGroup>
665a316
>     <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
701d351
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">true</LinkIncremental>
705d354
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">false</LinkIncremental>
709d357
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">true</LinkIncremental>
713d360
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">false</LinkIncremental>
717d363
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">true</LinkIncremental>
721d366
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">false</LinkIncremental>
725d369
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">true</LinkIncremental>
729d372
<     <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">false</LinkIncremental>
731d373
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
733d374
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'" />
735d375
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'" />
737d376
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
739d377
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'" />
741d378
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'" />
743d379
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
745d380
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'" />
747d381
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'" />
749d382
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
751d383
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'" />
753d384
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'" />
755d385
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
757d386
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'" />
759d387
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'" />
761d388
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
763d389
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'" />
765d390
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'" />
767d391
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
769d392
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'" />
771d393
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'" />
773d394
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
775d395
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'" />
777d396
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'" />
779d397
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
781d398
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'" />
783d399
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'" />
785d400
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
787d401
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'" />
789d402
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'" />
791d403
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
793d404
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'" />
795d405
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'" />
797d406
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
799d407
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'" />
801d408
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'" />
803d409
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
805d410
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'" />
807d411
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'" />
809d412
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
811d413
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'" />
813d414
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'" />
815d415
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
817d416
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'" />
819d417
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'" />
821d418
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
823d419
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'" />
825d420
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'" />
827d421
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
829d422
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'" />
831d423
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'" />
833d424
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
835d425
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'" />
837d426
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'" />
839d427
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
841d428
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'" />
843d429
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'" />
845d430
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
847d431
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'" />
849d432
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'" />
851d433
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
853d434
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'" />
855d435
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'" />
857d436
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
859d437
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'" />
861d438
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'" />
863d439
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
865d440
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'" />
867d441
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'" />
869d442
<     <CodeAnalysisRuleSet Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">AllRules.ruleset</CodeAnalysisRuleSet>
871d443
<     <CodeAnalysisRules Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'" />
873,877d444
<     <CodeAnalysisRuleAssemblies Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'" />
<     <RunCodeAnalysis Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|Win32'">false</RunCodeAnalysis>
<     <RunCodeAnalysis Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">false</RunCodeAnalysis>
<     <RunCodeAnalysis Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|Win32'">false</RunCodeAnalysis>
<     <RunCodeAnalysis Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">false</RunCodeAnalysis>
882a450
>       <MinimalRebuild>true</MinimalRebuild>
888,903d455
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_DEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
917,934d468
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
940a475
>       <MinimalRebuild>true</MinimalRebuild>
946,961d480
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_UNICODE;_DEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
975,994d493
<       <EnablePREfast>false</EnablePREfast>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>_UNICODE;NDEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <EnablePREfast>false</EnablePREfast>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1000a500
>       <MinimalRebuild>true</MinimalRebuild>
1006,1021d505
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>WIN32;_DEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1035,1052d518
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>WIN32;NDEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1058a525
>       <MinimalRebuild>true</MinimalRebuild>
1064,1108d530
<       <AdditionalIncludeDirectories>
<       </AdditionalIncludeDirectories>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<     <Lib>
<       <AdditionalDependencies>
<       </AdditionalDependencies>
<     </Lib>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_UNICODE;WIN32;_DEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalIncludeDirectories>
<       </AdditionalIncludeDirectories>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Lib>
<       <AdditionalDependencies>
<       </AdditionalDependencies>
<     </Lib>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|Win32'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>_UNICODE;WIN32;NDEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <EnablePREfast>true</EnablePREfast>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1111c533
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
---
>   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|Win32'">
1122,1124d543
<       <EnablePREfast>false</EnablePREfast>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1130a550
>       <MinimalRebuild>true</MinimalRebuild>
1136,1151d555
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>WIN32;_DEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1165,1182d568
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>WIN32;NDEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1188a575
>       <MinimalRebuild>true</MinimalRebuild>
1194,1209d580
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_UNICODE;WIN32;_DEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1223,1240d593
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>_UNICODE;WIN32;NDEBUG;_LIB;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1246a600
>       <MinimalRebuild>true</MinimalRebuild>
1252,1267d605
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_DEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1281,1298d618
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1304a625
>       <MinimalRebuild>true</MinimalRebuild>
1310,1325d630
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_UNICODE;_DEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1339,1356d643
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
<     </ClCompile>
<   </ItemDefinitionGroup>
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>_UNICODE;NDEBUG;WIN32;_WINDOWS;_LIB;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
1362a650
>       <MinimalRebuild>true</MinimalRebuild>
1368,1370d655
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1373,1374c658,659
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
---
>       <AdditionalDependencies>mfcs100d.lib;msvcrtd.lib;%(AdditionalDependencies)</AdditionalDependencies>
>       <IgnoreSpecificDefaultLibraries>mfcs100d.lib;msvcrtd.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
1380,1398d664
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_DEBUG;WIN32;_WINDOWS;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
<       <GenerateDebugInformation>true</GenerateDebugInformation>
<       <SubSystem>Windows</SubSystem>
<     </Link>
<   </ItemDefinitionGroup>
1410,1412d675
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1415,1416c678,679
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
---
>       <AdditionalDependencies>mfcs100.lib;msvcrt.lib;%(AdditionalDependencies)</AdditionalDependencies>
>       <IgnoreSpecificDefaultLibraries>mfcs100.lib;msvcrt.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
1423,1444d685
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>NDEBUG;WIN32;_WINDOWS;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
<       <SubSystem>Windows</SubSystem>
<       <OptimizeReferences>true</OptimizeReferences>
<       <EnableCOMDATFolding>true</EnableCOMDATFolding>
<     </Link>
<   </ItemDefinitionGroup>
1448a690
>       <MinimalRebuild>true</MinimalRebuild>
1454,1456d695
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1459,1460c698,699
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
---
>       <AdditionalDependencies>mfcs100ud.lib;msvcrtd.lib;%(AdditionalDependencies)</AdditionalDependencies>
>       <IgnoreSpecificDefaultLibraries>mfcs100ud.lib;msvcrtd.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
1466,1484d704
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_UNICODE;_DEBUG;WIN32;_WINDOWS;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
<       <GenerateDebugInformation>true</GenerateDebugInformation>
<       <SubSystem>Windows</SubSystem>
<     </Link>
<   </ItemDefinitionGroup>
1496,1498d715
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1501,1502c718,719
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
---
>       <AdditionalDependencies>mfcs100u.lib;msvcrt.lib;%(AdditionalDependencies)</AdditionalDependencies>
>       <IgnoreSpecificDefaultLibraries>mfcs100u.lib;msvcrt.lib;%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
1509,1530d725
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>_UNICODE;NDEBUG;WIN32;_WINDOWS;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;_ZIP_IMPL_MFC;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <AdditionalDependencies>%(AdditionalDependencies)</AdditionalDependencies>
<       <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
<       <SubSystem>Windows</SubSystem>
<       <OptimizeReferences>true</OptimizeReferences>
<       <EnableCOMDATFolding>true</EnableCOMDATFolding>
<     </Link>
<   </ItemDefinitionGroup>
1534a730
>       <MinimalRebuild>true</MinimalRebuild>
1540,1542d735
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1550,1566d742
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>WIN32;_DEBUG;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <GenerateDebugInformation>true</GenerateDebugInformation>
<       <SubSystem>Windows</SubSystem>
<     </Link>
<   </ItemDefinitionGroup>
1578,1580d753
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1589,1608d761
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>WIN32;NDEBUG;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <SubSystem>Windows</SubSystem>
<       <OptimizeReferences>true</OptimizeReferences>
<       <EnableCOMDATFolding>true</EnableCOMDATFolding>
<     </Link>
<   </ItemDefinitionGroup>
1612a766
>       <MinimalRebuild>true</MinimalRebuild>
1618,1620d771
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1628,1644d778
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<     <ClCompile>
<       <Optimization>Disabled</Optimization>
<       <PreprocessorDefinitions>_UNICODE;WIN32;_DEBUG;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
<       <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level3</WarningLevel>
<       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <GenerateDebugInformation>true</GenerateDebugInformation>
<       <SubSystem>Windows</SubSystem>
<     </Link>
<   </ItemDefinitionGroup>
1656,1658d789
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<       <LanguageStandard>stdcpp20</LanguageStandard>
1667,1686d797
<   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<     <ClCompile>
<       <Optimization>MaxSpeed</Optimization>
<       <IntrinsicFunctions>true</IntrinsicFunctions>
<       <PreprocessorDefinitions>_UNICODE;WIN32;NDEBUG;_USRDLL;ZIP_BUILD_DLL;ZIP_HAS_DLL;NO_DUMMY_DECL;_CRT_RAND_S;%(PreprocessorDefinitions)</PreprocessorDefinitions>
<       <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
<       <FunctionLevelLinking>true</FunctionLevelLinking>
<       <PrecompiledHeader>Use</PrecompiledHeader>
<       <WarningLevel>Level4</WarningLevel>
<       <DebugInformationFormat>
<       </DebugInformationFormat>
<       <AdditionalOptions>/permissive- /Zc:twoPhase- %(AdditionalOptions)</AdditionalOptions>
<       <DisableSpecificWarnings>26493;26440;26477;26409</DisableSpecificWarnings>
<     </ClCompile>
<     <Link>
<       <SubSystem>Windows</SubSystem>
<       <OptimizeReferences>true</OptimizeReferences>
<       <EnableCOMDATFolding>true</EnableCOMDATFolding>
<     </Link>
<   </ItemDefinitionGroup>
1701d811
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">Create</PrecompiledHeader>
1703d812
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">Create</PrecompiledHeader>
1705d813
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">Create</PrecompiledHeader>
1707d814
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">Create</PrecompiledHeader>
1709d815
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">Create</PrecompiledHeader>
1711d816
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">Create</PrecompiledHeader>
1713d817
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">Create</PrecompiledHeader>
1715d818
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">Create</PrecompiledHeader>
1717d819
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">Create</PrecompiledHeader>
1719d820
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">Create</PrecompiledHeader>
1721d821
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">Create</PrecompiledHeader>
1723d822
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">Create</PrecompiledHeader>
1725d823
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">Create</PrecompiledHeader>
1727d824
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">Create</PrecompiledHeader>
1729d825
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">Create</PrecompiledHeader>
1731d826
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">Create</PrecompiledHeader>
1733d827
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">Create</PrecompiledHeader>
1735d828
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">Create</PrecompiledHeader>
1737d829
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">Create</PrecompiledHeader>
1739d830
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">Create</PrecompiledHeader>
1741d831
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">Create</PrecompiledHeader>
1743d832
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">Create</PrecompiledHeader>
1745d833
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">Create</PrecompiledHeader>
1747d834
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">Create</PrecompiledHeader>
1773,1774d859
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
1777,1778d861
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
1781,1782d863
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
1785,1786d865
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
1789,1790d867
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
1793,1794d869
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
1797,1798d871
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
1801,1802d873
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
1805,1806d875
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
1809,1810d877
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
1813,1814d879
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
1817,1818d881
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
1821,1822d883
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
1825,1826d885
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
1829,1830d887
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
1833,1834d889
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
1837,1838d891
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
1841,1842d893
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
1845,1846d895
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
1849,1850d897
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
1853,1854d899
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
1857,1858d901
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
1861,1862d903
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
1865,1866d905
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
1871,1872d909
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
1875,1876d911
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
1879,1880d913
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
1883,1884d915
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
1887,1888d917
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
1891,1892d919
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
1895,1896d921
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
1899,1900d923
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
1903,1904d925
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
1907,1908d927
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
1911,1912d929
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
1915,1916d931
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
1919,1920d933
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
1923,1924d935
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
1927,1928d937
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
1931,1932d939
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
1935,1936d941
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
1939,1940d943
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
1943,1944d945
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
1947,1948d947
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
1951,1952d949
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
1955,1956d951
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
1959,1960d953
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
1963,1964d955
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
1969,1970d959
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
1973,1974d961
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
1977,1978d963
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
1981,1982d965
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
1985,1986d967
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
1989,1990d969
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
1993,1994d971
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
1997,1998d973
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2001,2002d975
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2005,2006d977
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2009,2010d979
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2013,2014d981
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2017,2018d983
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2021,2022d985
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2025,2026d987
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2029,2030d989
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2033,2034d991
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2037,2038d993
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2041,2042d995
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2045,2046d997
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2049,2050d999
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2053,2054d1001
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2057,2058d1003
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2061,2062d1005
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2067,2068d1009
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2071,2072d1011
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2075,2076d1013
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2079,2080d1015
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2083,2084d1017
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2087,2088d1019
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2091,2092d1021
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2095,2096d1023
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2099,2100d1025
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2103,2104d1027
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2107,2108d1029
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2111,2112d1031
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2115,2116d1033
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2119,2120d1035
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2123,2124d1037
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2127,2128d1039
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2131,2132d1041
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2135,2136d1043
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2139,2140d1045
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2143,2144d1047
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2147,2148d1049
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2151,2152d1051
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2155,2156d1053
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2159,2160d1055
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2165,2166d1059
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2169,2170d1061
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2173,2174d1063
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2177,2178d1065
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2181,2182d1067
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2185,2186d1069
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2189,2190d1071
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2193,2194d1073
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2197,2198d1075
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2201,2202d1077
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2205,2206d1079
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2209,2210d1081
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2213,2214d1083
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2217,2218d1085
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2221,2222d1087
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2225,2226d1089
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2229,2230d1091
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2233,2234d1093
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2237,2238d1095
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2241,2242d1097
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2245,2246d1099
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2249,2250d1101
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2253,2254d1103
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2257,2258d1105
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2263,2264d1109
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2267,2268d1111
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2271,2272d1113
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2275,2276d1115
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2279,2280d1117
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2283,2284d1119
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2287,2288d1121
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2291,2292d1123
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2295,2296d1125
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2299,2300d1127
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2303,2304d1129
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2307,2308d1131
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2311,2312d1133
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2315,2316d1135
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2319,2320d1137
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2323,2324d1139
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2327,2328d1141
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2331,2332d1143
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2335,2336d1145
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2339,2340d1147
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2343,2344d1149
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2347,2348d1151
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2351,2352d1153
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2355,2356d1155
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2361,2362d1159
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2365,2366d1161
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2369,2370d1163
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2373,2374d1165
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2377,2378d1167
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2381,2382d1169
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2385,2386d1171
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2389,2390d1173
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2393,2394d1175
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2397,2398d1177
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2401,2402d1179
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2405,2406d1181
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2409,2410d1183
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2413,2414d1185
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2417,2418d1187
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2421,2422d1189
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2425,2426d1191
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2429,2430d1193
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2433,2434d1195
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2437,2438d1197
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2441,2442d1199
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2445,2446d1201
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2449,2450d1203
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2453,2454d1205
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2459,2460d1209
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2463,2464d1211
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2467,2468d1213
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2471,2472d1215
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2475,2476d1217
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2479,2480d1219
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2483,2484d1221
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2487,2488d1223
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2491,2492d1225
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2495,2496d1227
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2499,2500d1229
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2503,2504d1231
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2507,2508d1233
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2511,2512d1235
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2515,2516d1237
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2519,2520d1239
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2523,2524d1241
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2527,2528d1243
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2531,2532d1245
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2535,2536d1247
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2539,2540d1249
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2543,2544d1251
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2547,2548d1253
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2551,2552d1255
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2557,2558d1259
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2561,2562d1261
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2565,2566d1263
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2569,2570d1265
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2573,2574d1267
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2577,2578d1269
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2581,2582d1271
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2585,2586d1273
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2589,2590d1275
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2593,2594d1277
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2597,2598d1279
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2601,2602d1281
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2605,2606d1283
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2609,2610d1285
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2613,2614d1287
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2617,2618d1289
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2621,2622d1291
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2625,2626d1293
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2629,2630d1295
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2633,2634d1297
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2637,2638d1299
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2641,2642d1301
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2645,2646d1303
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2649,2650d1305
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2655,2656d1309
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2659,2660d1311
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2663,2664d1313
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2667,2668d1315
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2671,2672d1317
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2675,2676d1319
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2679,2680d1321
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2683,2684d1323
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2687,2688d1325
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2691,2692d1327
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2695,2696d1329
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2699,2700d1331
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2703,2704d1333
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2707,2708d1335
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2711,2712d1337
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2715,2716d1339
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2719,2720d1341
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2723,2724d1343
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2727,2728d1345
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2731,2732d1347
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2735,2736d1349
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2739,2740d1351
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2743,2744d1353
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2747,2748d1355
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2753,2754d1359
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2757,2758d1361
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2761,2762d1363
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2765,2766d1365
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2769,2770d1367
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2773,2774d1369
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2777,2778d1371
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2781,2782d1373
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2785,2786d1375
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2789,2790d1377
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2793,2794d1379
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2797,2798d1381
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2801,2802d1383
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2805,2806d1385
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2809,2810d1387
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2813,2814d1389
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2817,2818d1391
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2821,2822d1393
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2825,2826d1395
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2829,2830d1397
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2833,2834d1399
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2837,2838d1401
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2841,2842d1403
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2845,2846d1405
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2851,2852d1409
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2855,2856d1411
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2859,2860d1413
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2863,2864d1415
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2867,2868d1417
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2871,2872d1419
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2875,2876d1421
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2879,2880d1423
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2883,2884d1425
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2887,2888d1427
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2891,2892d1429
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2895,2896d1431
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2899,2900d1433
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
2903,2904d1435
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
2907,2908d1437
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
2911,2912d1439
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
2915,2916d1441
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
2919,2920d1443
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
2923,2924d1445
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2927,2928d1447
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2931,2932d1449
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2935,2936d1451
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2939,2940d1453
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
2943,2944d1455
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
2949,2950d1459
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
2953,2954d1461
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
2957,2958d1463
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
2961,2962d1465
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
2965,2966d1467
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
2969,2970d1469
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
2973,2974d1471
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
2977,2978d1473
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
2981,2982d1475
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
2985,2986d1477
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
2989,2990d1479
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
2993,2994d1481
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
2997,2998d1483
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
3001,3002d1485
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
3005,3006d1487
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
3009,3010d1489
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
3013,3014d1491
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
3017,3018d1493
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
3021,3022d1495
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3025,3026d1497
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3029,3030d1499
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3033,3034d1501
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3037,3038d1503
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
3041,3042d1505
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
3047,3048d1509
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
3051,3052d1511
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
3055,3056d1513
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
3059,3060d1515
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
3063,3064d1517
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
3067,3068d1519
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
3071,3072d1521
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3075,3076d1523
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3079,3080d1525
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3083,3084d1527
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3087,3088d1529
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
3091,3092d1531
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
3095,3096d1533
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
3099,3100d1535
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
3103,3104d1537
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
3107,3108d1539
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
3111,3112d1541
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
3115,3116d1543
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
3119,3120d1545
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3123,3124d1547
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3127,3128d1549
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3131,3132d1551
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3135,3136d1553
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
3139,3140d1555
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
3145,3146d1559
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
3149,3150d1561
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
3153,3154d1563
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
3157,3158d1565
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
3161,3162d1567
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
3165,3166d1569
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
3169,3170d1571
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3173,3174d1573
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3177,3178d1575
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3181,3182d1577
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3185,3186d1579
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
3189,3190d1581
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
3193,3194d1583
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
3197,3198d1585
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
3201,3202d1587
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
3205,3206d1589
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
3209,3210d1591
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
3213,3214d1593
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
3217,3218d1595
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3221,3222d1597
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3225,3226d1599
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3229,3230d1601
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3233,3234d1603
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
3237,3238d1605
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
3243,3244d1609
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
3247,3248d1611
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
3251,3252d1613
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
3255,3256d1615
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
3259,3260d1617
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
3263,3264d1619
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
3267,3268d1621
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3271,3272d1623
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3275,3276d1625
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3279,3280d1627
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3283,3284d1629
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
3287,3288d1631
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
3291,3292d1633
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
3295,3296d1635
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
3299,3300d1637
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
3303,3304d1639
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
3307,3308d1641
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
3311,3312d1643
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
3315,3316d1645
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3319,3320d1647
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3323,3324d1649
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3327,3328d1651
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3331,3332d1653
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
3335,3336d1655
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
3341,3342d1659
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
3345,3346d1661
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
3349,3350d1663
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
3353,3354d1665
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
3357,3358d1667
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
3361,3362d1669
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
3365,3366d1671
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3369,3370d1673
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3373,3374d1675
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3377,3378d1677
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3381,3382d1679
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
3385,3386d1681
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
3389,3390d1683
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
3393,3394d1685
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
3397,3398d1687
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
3401,3402d1689
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
3405,3406d1691
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
3409,3410d1693
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
3413,3414d1695
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3417,3418d1697
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3421,3422d1699
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3425,3426d1701
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3429,3430d1703
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
3433,3434d1705
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
3439,3440d1709
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD DLL|x64'">
<       </PrecompiledHeader>
3443,3444d1711
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">
<       </PrecompiledHeader>
3447,3448d1713
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">
<       </PrecompiledHeader>
3451,3452d1715
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD DLL|x64'">
<       </PrecompiledHeader>
3455,3456d1717
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">
<       </PrecompiledHeader>
3459,3460d1719
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">
<       </PrecompiledHeader>
3463,3464d1721
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3467,3468d1723
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3471,3472d1725
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3475,3476d1727
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3479,3480d1729
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">
<       </PrecompiledHeader>
3483,3484d1731
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">
<       </PrecompiledHeader>
3487,3488d1733
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD DLL|x64'">
<       </PrecompiledHeader>
3491,3492d1735
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">
<       </PrecompiledHeader>
3495,3496d1737
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">
<       </PrecompiledHeader>
3499,3500d1739
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD DLL|x64'">
<       </PrecompiledHeader>
3503,3504d1741
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">
<       </PrecompiledHeader>
3507,3508d1743
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">
<       </PrecompiledHeader>
3511,3512d1745
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD DLL|x64'">
<       </PrecompiledHeader>
3515,3516d1747
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">
<       </PrecompiledHeader>
3519,3520d1749
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">
<       </PrecompiledHeader>
3523,3524d1751
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD DLL|x64'">
<       </PrecompiledHeader>
3527,3528d1753
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">
<       </PrecompiledHeader>
3531,3532d1755
<       <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">
<       </PrecompiledHeader>
3610d1832
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug MFC MD|x64'">true</ExcludedFromBuild>
3612d1833
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug MFC MT|x64'">true</ExcludedFromBuild>
3614d1834
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug STL MD|x64'">true</ExcludedFromBuild>
3616d1835
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug STL MT|x64'">true</ExcludedFromBuild>
3618d1836
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MD|x64'">true</ExcludedFromBuild>
3620d1837
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug Unicode MFC MT|x64'">true</ExcludedFromBuild>
3622d1838
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MD|x64'">true</ExcludedFromBuild>
3624d1839
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug Unicode STL MT|x64'">true</ExcludedFromBuild>
3626d1840
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release MFC MD|x64'">true</ExcludedFromBuild>
3628d1841
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release MFC MT|x64'">true</ExcludedFromBuild>
3630d1842
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release STL MD|x64'">true</ExcludedFromBuild>
3632d1843
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release STL MT|x64'">true</ExcludedFromBuild>
3634d1844
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MD|x64'">true</ExcludedFromBuild>
3636d1845
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release Unicode MFC MT|x64'">true</ExcludedFromBuild>
3638d1846
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MD|x64'">true</ExcludedFromBuild>
3640d1847
<       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release Unicode STL MT|x64'">true</ExcludedFromBuild>
Only in lookaside-ziparchive_src.zip-extracted/ZipArchive: ZipArchive.vcxproj.user
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipAutoBuffer.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipAutoBuffer.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
18,20d17
< #ifdef __ANDROID__
< #include "string.h"
< #endif
84,87c81
< 		if (m_pBuffer)
< 		{			
< 			memcpy(m_pBuffer, buffer.m_pBuffer, buffer.m_iSize);
< 		}
---
> 		memcpy(m_pBuffer, buffer.m_pBuffer, buffer.m_iSize);
98,101c92
< 		if (m_pBuffer)
< 		{
< 			memcpy(m_pBuffer, buffer.m_pBuffer, buffer.m_iSize);
< 		}
---
> 		memcpy(m_pBuffer, buffer.m_pBuffer, buffer.m_iSize);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipAutoBuffer.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipAutoBuffer.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipBaseException.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipBaseException.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCallback.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCallback.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
409,412d408
< 		m_iCurrentStep = 0;
< 		m_iType = 0;
< 		m_uAccumulatedProgress = 0;
< 		m_iCachedStepSize = 0;
485,487d480
< 		\param lpszFileInZip
< 			The file that is being processed in the archive.
< 
497c490
< 	virtual bool MultiActionsNext(LPCTSTR = NULL)
---
> 	virtual bool MultiActionsNext()
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCallbackProvider.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCallbackProvider.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCentralDir.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCentralDir.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
37d36
< #pragma warning(suppress: 26495)
44,47c43,44
< 	m_specialFlags = CZipArchive::sfNone;
< 	m_iIgnoredChecks = CZipArchive::checkIgnoredByDefault;
< 	m_pArchive = NULL;
< 	m_pStorage = NULL;
---
> 	m_iIgnoredChecks = 0;
> 	m_specialFlags = CZipArchive::sfNone;	
68c65,66
< 	m_pOpenedFile = NULL;		
---
> 	m_pOpenedFile = NULL;	
> 	m_iIgnoredChecks = CZipArchive::checkIgnoredByDefault;	
106c104
< 	const ZIP_FILE_USIZE location = LocateSignature();
---
> 	ZIP_FILE_USIZE location = LocateSignature();
111c109
< 	const bool isBinary = m_pStorage->IsBinarySplit();
---
> 	bool isBinary = m_pStorage->IsBinarySplit();
119c117
< 		const ZIP_FILE_USIZE uPos = m_pStorage->m_pFile->GetPosition();
---
> 		ZIP_FILE_USIZE uPos = m_pStorage->m_pFile->GetPosition();
150c148
< 				m_pStorage->SeekInBinary(-(ZIP_FILE_SIZE)CENTRAL_DIR_END_SIZE - uCommentSize - CENTRAL_DIR_END64_LOCATOR_SIZE);
---
> 				m_pStorage->SeekInBinary(-CENTRAL_DIR_END_SIZE - uCommentSize - CENTRAL_DIR_END64_LOCATOR_SIZE);
153,155c151,153
< 			char buffer[4];
< 			m_pStorage->Read(buffer, 4, true);
< 			if (memcmp(buffer, m_gszSignature64Locator, 4) == 0)
---
> 			char buf[4];
> 			m_pStorage->Read(buf, 4, true);
> 			if (memcmp(buf, m_gszSignature64Locator, 4) == 0)
169d166
< 	bool bCheckBytesBeforeZip;
171,177c168
< 	{
< 		if (IsConsistencyCheckOn(CZipArchive::checkTrimmedCentralDir))
< 			ThrowError(CZipException::badZipFile);
< 		bCheckBytesBeforeZip = false;
< 	}
< 	else
< 		bCheckBytesBeforeZip = true;
---
> 		ThrowError(CZipException::badZipFile);
179c170
< 	if (bCheckBytesBeforeZip && m_pStorage->m_uBytesBeforeZip == 0 && m_pInfo->m_uLastVolume == 0)
---
> 	if (m_pStorage->m_uBytesBeforeZip == 0 && m_pInfo->m_uLastVolume == 0)
209c200
< 	for (ZIP_INDEX_TYPE i = 0; ; i++)
---
> 	for (ZIP_INDEX_TYPE i = 0; i < m_pInfo->m_uEntriesNumber; i++)
211,215d201
< 		if (i == m_pInfo->m_uEntriesNumber)
< 		{
< 			break;
< 		}
< 
227c213
< 			if (uPosition != m_pInfo->m_uEndOffset || (m_pStorage->IsSegmented() && !m_pStorage->IsBinarySplit() && m_pStorage->GetCurrentVolume() != m_pInfo->m_uLastVolume))
---
> 			if (uPosition != m_pInfo->m_uEndOffset || m_pStorage->IsSegmented() && !m_pStorage->IsBinarySplit() && m_pStorage->GetCurrentVolume() != m_pInfo->m_uLastVolume)
241,244c227,228
< 	// This is necessary when removing data descriptors, CZipArchive::MakeSpaceForReplace, deleting, replacing or encrypting files
< 	// sort always, to yield the same results in requesting files by index regardless of the reason for opening. 
< 	// We don't want to throw an exception while sorting headers as doing so from within std::sort can have unpredictable results.
< 	// That's why we first sort them and then we verify the offsets of headers.
---
> 	// this is necessary when removing data descriptors, CZipArchive::MakeSpaceForReplace, deleting, replacing or encrypting files
> 	// sort always, to yield the same results in requesting files by index regardless of the reason for opening
246,260d229
< 	// verify the headers
< 	size_t iSize = m_pHeaders->GetSize();
< 	if (iSize > 1)	// need at least 2 items to compare
< 	{
< 		CZipFileHeader* previous = m_pHeaders->GetAt(0);
< 		for (size_t i = 1; i < iSize; i++)
< 		{
< 			CZipFileHeader* current = m_pHeaders->GetAt(i);
< 			if (previous->m_uVolumeStart == current->m_uVolumeStart && previous->m_uOffset == current->m_uOffset)
< 			{
< 				CZipException::Throw(CZipException::badZipFile);
< 			}
< 			previous = current;
< 		}
< 	}
312,314d280
< 		pHeader->m_tModificationTime = header.m_tModificationTime;
< 		pHeader->m_tCreationTime = header.m_tCreationTime;
< 		pHeader->m_tLastAccessTime = header.m_tLastAccessTime;
536c502
< 		const ZIP_INDEX_TYPE uLast = (ZIP_INDEX_TYPE)(m_pInfo->m_uEntriesNumber - 1);
---
> 		ZIP_INDEX_TYPE uLast = (ZIP_INDEX_TYPE)(m_pInfo->m_uEntriesNumber - 1);
542c508
< 			m_pInfo->m_uSize += pHeader->Write(this);
---
> 			m_pInfo->m_uSize += pHeader->Write(m_pStorage);
613c579
< 	ZIP_SIZE_TYPE uSize = CENTRAL_DIR_END_SIZE + (ZIP_SIZE_TYPE)m_pInfo->m_pszComment.GetSize();
---
> 	ZIP_SIZE_TYPE uSize = CENTRAL_DIR_END_SIZE + m_pInfo->m_pszComment.GetSize();
746c712
< 	ZIP_SIZE_TYPE uTotal = CENTRAL_DIR_END_SIZE + (ZIP_SIZE_TYPE)m_pInfo->m_pszComment.GetSize();
---
> 	ZIP_SIZE_TYPE uTotal = CENTRAL_DIR_END_SIZE + m_pInfo->m_pszComment.GetSize();
1011c977
< bool CZipCentralDir::OnFileNameChange(CZipFileHeader* pHeader, bool bInCentralOnly)
---
> bool CZipCentralDir::OnFileNameChange(CZipFileHeader* pHeader)
1014c980
< 	if (m_pArchive->GetCommitMode() == CZipArchive::cmOnChange && !bInCentralOnly)
---
> 	if (m_pArchive->GetCommitMode() == CZipArchive::cmOnChange)
1019c985
< 	if (result)
---
> 	if (result && m_pInfo->m_bFindFastEnabled)
1021,1029c987
< 		if (bInCentralOnly)
< 		{
< 			RemoveFromDisk();
< 		}
< 
< 		if (m_pInfo->m_bFindFastEnabled)
< 		{
< 			InsertFindFastElement(pHeader, RemoveFindFastElement(pHeader, false));
< 		}
---
> 		InsertFindFastElement(pHeader, RemoveFindFastElement(pHeader, false));
1048a1007
> 	m_pInfo->Init();	
1108d1066
< 	m_pStorage->m_pFile->SeekToEnd();
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCentralDir.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCentralDir.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
90,94c90
< #pragma warning(suppress: 26495)
< 		CInfo()
< 		{
< 			Init();
< 		}
---
> 		
552c548
< 	bool OnFileNameChange(CZipFileHeader* pHeader, bool bInCentralOnly);
---
> 	bool OnFileNameChange(CZipFileHeader* pHeader);
629,633c625,628
< 	{	
< 		CZipFileHeader* pHeader1 = *(CZipFileHeader**)pArg1;
< 		CZipFileHeader* pHeader2 = *(CZipFileHeader**)pArg2;
< 
< 		if (pHeader1 == pHeader2)
---
> 	{
> 		CZipFileHeader* pw1 = *(CZipFileHeader**)pArg1;
> 		CZipFileHeader* pw2 = *(CZipFileHeader**)pArg2;
> 		if (pw1 == pw2)
636c631
< 		if (pHeader1->m_uVolumeStart == pHeader2->m_uVolumeStart)
---
> 		if (pw1->m_uVolumeStart == pw2->m_uVolumeStart)
638c633
< 			if (pHeader1->m_uOffset < pHeader2->m_uOffset)
---
> 			if (pw1->m_uOffset < pw2->m_uOffset)
640c635
< 			else if (pHeader1->m_uOffset > pHeader2->m_uOffset)
---
> 			else if (pw1->m_uOffset > pw2->m_uOffset)
642,645c637,642
< 			// if we have two headers with the same offset on the same volume, 
< 			// we want them to be next to each other so that we can throw an exception while verifying headers after sorting
< 			else 
< 				return 0;
---
> 				ASSERT(FALSE);
> 
> 
> 			// two files with the same offsets in the same volume???
> 			CZipException::Throw(CZipException::badZipFile);
> 			return 0; // just for the compiler comfort (and discomfort of another)
647c644
< 		else if (pHeader1->m_uVolumeStart < pHeader2->m_uVolumeStart)
---
> 		else if (pw1->m_uVolumeStart < pw2->m_uVolumeStart)
649,650c646,647
< 		else // if (pHeader1->m_uVolumeStart > pHeader2->m_uVolumeStart)
< 			return 1;
---
> 		else // if (pw1->m_uVolumeStart > pw2->m_uVolumeStart)
> 			return 1;		
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCollections.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCollections.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCollections_mfc.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCollections_mfc.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
55c55
< 		INT_PTR uSize = CArray<TYPE, TYPE>::GetSize();
---
> 		INT_PTR uSize = GetSize();
61,62d60
< 
< typedef CZipArray<WORD> CZipWordArray;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCollections_stl.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCollections_stl.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
91c91
< 	size_t Add(const TYPE& x) {this->push_back(x);return GetUpperBound();}
---
> 	size_t Add(const TYPE& x) {push_back(x);return GetUpperBound();}
93,94c93,94
< 	void RemoveAt(size_t uIndex) { this->erase(GetIterFromIndex(uIndex));}
< 	void InsertAt(size_t uIndex, const TYPE& x){this->insert(GetIterFromIndex(uIndex), x);}
---
> 	void RemoveAt(size_t uIndex) { erase(GetIterFromIndex(uIndex));}
> 	void InsertAt(size_t uIndex, const TYPE& x){insert(GetIterFromIndex(uIndex), x);}
118c118
< 	void AddTail(const TYPE& x){this->push_back(x);}
---
> 	void AddTail(const TYPE& x){push_back(x);}
135c135
< 	void RemoveAt(iterator& pos) { this->erase(pos);}
---
> 	void RemoveAt(iterator& pos) { erase(pos);}
171c171
< 		this->insert(v_type(key, newValue));
---
> 		insert(v_type(key, newValue));
175c175
< 		return this->erase(key) != 0;
---
> 		return erase(key) != 0;
179c179
< #if (__GNUC__ >= 3 || _MSC_VER >= 1910) // The actual version number might be different.
---
> #if (__GNUC__ >= 3) // The actual version number may be different.
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCompatibility.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCompatibility.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
106d105
< 		{
108,109d106
< 			return 0; // for Code Analysis
< 		}
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCompatibility.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCompatibility.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
62,63c62,63
< 	   zcTops20,		///< TOPS-20 (value of 10 used by PKZIP for NTFS)
<        zcNtfs,			///< Windows NTFS (value of 11 used for NTFS by WinZip and WinRar)
---
> 	   zcTops20,		///< TOPS-20
>        zcNtfs,			///< Windows NTFS
72c72
< 	   zcMacDarwin,		///< OS X (Darwin)
---
> 	   zcMacDarwin,		///< Mac OS/X (Darwin)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCompressor.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCompressor.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
32c32
< 	m_pFile->m_uCrc32 = (DWORD)zarch_crc32(m_pFile->m_uCrc32, (zarch_Bytef*)pBuffer, uSize);
---
> 	m_pFile->m_uCrc32 = zarch_crc32(m_pFile->m_uCrc32, (zarch_Bytef*)pBuffer, uSize);
37c37
< 	m_uCrc32 = (DWORD)zarch_crc32(m_uCrc32, (zarch_Bytef*)pBuffer, uSize);
---
> 	m_uCrc32 = zarch_crc32(m_uCrc32, (zarch_Bytef*)pBuffer, uSize);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCompressor.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCompressor.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
63d62
< 		m_pFile = NULL;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCrc32Cryptograph.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCrc32Cryptograph.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCrc32Cryptograph.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCrc32Cryptograph.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
46,49c46
< 	CZipCrc32Cryptograph()	
< 	{
< 		memset(m_keys, 0, 3 * sizeof(DWORD));
< 	}
---
> 	CZipCrc32Cryptograph(){}
88c85
< 	static const z_crc_t* GetCRCTable()
---
> 	static const unsigned long* GetCRCTable()
109,110c106,107
< 		const z_crc_t* CRC_TABLE = zarch_get_crc_table();
< 		return (DWORD)CRC_TABLE[(l ^ c) & 0xff] ^ (l >> 8);
---
> 		const unsigned long* CRC_TABLE = zarch_get_crc_table();
> 		return CRC_TABLE[(l ^ c) & 0xff] ^ (l >> 8);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCryptograph.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCryptograph.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipCryptograph.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipCryptograph.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipException.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipException.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
44c44
< CZipException::~CZipException() _NOEXCEPT
---
> CZipException::~CZipException() throw()
104,105c104,106
< #ifdef WIN32	
< 	if (m_iSystemError)
---
> #ifdef WIN32
> 	DWORD x = GetLastError();
> 	if (x)
109c110
< 			          NULL, m_iSystemError, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), 
---
> 			          NULL, x, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipException.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipException.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
85,87c85
< #if _MSC_VER > 1000
< #pragma warning (disable : 26432)
< #endif
---
> 
157d154
< 		notFound,			///< A file was not found.
159c156
< 		notRenamed,			///< Error while renaming a file. Examine #m_iSystemError for more information.		
---
> 		notRenamed,			///< Error while renaming a file. Examine #m_iSystemError for more information.
189c186
< 	virtual ~CZipException() _NOEXCEPT;
---
> 	virtual ~CZipException() throw();
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipExport.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipExport.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipExtraData.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipExtraData.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipExtraData.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipExtraData.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
32,34d31
< #ifdef __ANDROID__
< #include "string.h"
< #endif
66d62
< #pragma warning(suppress: 26495)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipExtraField.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipExtraField.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
74,75c74
< 			|| headerID == ZIP_EXTRA_ZARCH_NAME
< 			|| headerID == ZIP_EXTRA_NTFS)
---
> 			|| headerID == ZIP_EXTRA_ZARCH_NAME)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipExtraField.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipExtraField.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
35,36d34
< #define ZIP_EXTRA_NTFS 0x000A
< 
156,158d153
< 		\param bAppend
< 			If \c true, add the header at the end of the collection; otherwise add the header at the beginning of the collection
< 
165c160
< 	CZipExtraData* CreateNew(WORD headerID, bool bAppend = true)
---
> 	CZipExtraData* CreateNew(WORD headerID)
168c163
< 		return CreateNew(headerID, temp, bAppend);
---
> 		return CreateNew(headerID, temp);
182,184d176
< 		\param bAppend
< 			If \c true, add the header at the end of the collection; otherwise add the header at the beginning of the collection
< 
191c183
< 	CZipExtraData* CreateNew(WORD headerID, int& idx, bool bAppend = true)
---
> 	CZipExtraData* CreateNew(WORD headerID, int& idx)
195,201c187
< 		if (bAppend)
< 			idx = (int)m_aData.Add(pData);
< 		else
< 		{
< 			idx = 0;
< 			m_aData.InsertAt(0, pData);
< 		}
---
> 		idx = (int)m_aData.Add(pData);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFileHeader.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFileHeader.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
32d31
< #define ZIP_EXTRA_NTFS_TAG 0x0001
38d36
< #pragma warning(suppress: 26495)
45d42
< #pragma warning(suppress: 26495)
60d56
< 	m_tModificationTime = m_tCreationTime = m_tLastAccessTime = (time_t)0;
134c130
< 	if (!m_aCentralExtraData.Read(pStorage, uExtraFieldSize) && m_pCentralDir->IsConsistencyCheckOn(CZipArchive::checkInvalidExtraData))
---
> 	if (!m_aCentralExtraData.Read(pStorage, uExtraFieldSize))
136,152c132,134
< 
< 	CZipExtraData* pExtra = m_aCentralExtraData.Lookup(ZIP_EXTRA_NTFS);
< 	if (pExtra != NULL && pExtra->m_data.GetSize() >= 32)
< 	{
< 		WORD temp;
< 		CBytesWriter::ReadBytes(temp, pExtra->m_data + 4);			
< 		if (temp == ZIP_EXTRA_NTFS_TAG)
< 		{
< 			CBytesWriter::ReadBytes(temp, pExtra->m_data + 6);			
< 			if (temp == 24)
< 			{
< 				m_tModificationTime = ReadFileTime(pExtra->m_data + 8);
< 				m_tCreationTime = ReadFileTime(pExtra->m_data + 16);
< 				m_tLastAccessTime = ReadFileTime(pExtra->m_data + 24);
< 			}
< 		}
< 	}
---
> #if defined _ZIP_UNICODE || defined _ZIP_UNICODE_CUSTOM || defined _ZIP_AES || defined _ZIP_ZIP64
> 	CZipExtraData* pExtra;
> #endif
216c198
< 		else if ((m_pCentralDir->GetUnicodeMode() & CZipArchive::umCustom) != 0)
---
> 		else if (m_pCentralDir->GetUnicodeMode() == CZipArchive::umCustom)
237c219
< time_t CZipFileHeader::GetModificationTime()const
---
> time_t CZipFileHeader::GetTime()const
239,242d220
< 	if (m_tModificationTime != (time_t) 0)
< 	{
< 		return m_tModificationTime;
< 	}
255,347d232
< void CZipFileHeader::SetModificationTime(const time_t& ttime, bool bFullResolution, bool bUseUtcTime)
< {
< 	if (bFullResolution)
< 	{
< 		m_tModificationTime = ttime;
< 	}	
< 	else
< 	{
< 		m_tModificationTime = m_tCreationTime = m_tLastAccessTime = (time_t)0;
< 	}
< #if _MSC_VER >= 1400
< 	tm gts;
< 	tm* gt = &gts;
< 	if (bUseUtcTime)
< 	{
< 		gmtime_s(gt, &ttime);
< 	}
< 	else
< 	{
< 		localtime_s(gt, &ttime);
< 	}
< #else
< 	tm* gt;
< 	if (bUseUtcTime)
< 	{
< 		gt = gmtime(&ttime);
< 	}
< 	else
< 	{
< 		gt = localtime(&ttime);
< 	}
< #endif
< 	WORD year, month, day, hour, min, sec;
< 	if (gt == NULL)
< 	{
< 		year = 0;
< 		month = day = 1;
< 		hour = min = sec = 0;
< 	}
< 	else
< 	{
< 		year = (WORD)(gt->tm_year + 1900);		
< 		if (year <= 1980)
< 			year = 0;
< 		else
< 			year -= 1980;
< 		month = (WORD)gt->tm_mon + 1;
< 		day = (WORD)gt->tm_mday;
< 		hour = (WORD)gt->tm_hour;
< 		min = (WORD)gt->tm_min;
< 		sec = (WORD)gt->tm_sec;
< 	}
< 	    
<     m_uModDate = (WORD) (day + ( month << 5) + (year << 9));
<     m_uModTime = (WORD) ((sec >> 1) + (min << 5) + (hour << 11));
< }
< 
< void CZipFileHeader::WriteFileTime(const time_t& ttime, char* buffer, bool bUseUtcTime)
< {
< 	
< 	time_t tFileTime;
< 	if (bUseUtcTime)
< 	{
< #if _MSC_VER >= 1400
< 		tm gts;
< 		tm* gt = &gts;
< 		gmtime_s(gt, &ttime);
< #else
< 		tm* gt = gmtime(&ttime);
< #endif
< 		gt->tm_isdst = -1;
< 		tFileTime = mktime(gt);
< 	}
< 	else
< 	{
< 		tFileTime = ttime;
< 	}
< 	ZFILETIME ft;
< 	ZipPlatform::ConvertTimeToFileTime(tFileTime, ft);
< 	CBytesWriter::WriteBytes(buffer, ft.dwLowDateTime);
< 	CBytesWriter::WriteBytes(buffer + 4, ft.dwHighDateTime);	
< }
< 
< time_t CZipFileHeader::ReadFileTime(const char* buffer)
< {
< 	ZFILETIME ft = {0};
< 	CBytesWriter::ReadBytes(ft.dwLowDateTime, buffer);
< 	CBytesWriter::ReadBytes(ft.dwHighDateTime, buffer + 4);	
< 	time_t ret;	
< 	return ZipPlatform::ConvertFileTimeToTime(ft, ret) ? ret : (time_t)0;
< }
< 
< 
349c234
< DWORD CZipFileHeader::Write(CZipCentralDir* pCentralDir)
---
> DWORD CZipFileHeader::Write(CZipStorage *pStorage)
351d235
< 	CZipStorage* pStorage = pCentralDir->GetStorage();
353,369d236
< 	if (m_tModificationTime != (time_t)0 || m_tCreationTime != (time_t)0 || m_tLastAccessTime != (time_t)0)
< 	{
< 		CZipExtraData* pExtra = m_aCentralExtraData.CreateNew(ZIP_EXTRA_NTFS);
< 		CZipAutoBuffer& buf = pExtra->m_data;
< 		buf.Allocate(32, true);
< 		// first 4 bytes are reserved
< 		WORD temp = ZIP_EXTRA_NTFS_TAG; // tag for the attribute
< 		CBytesWriter::WriteBytes((char*)(buf + 4), temp);
< 		temp = 3 * 8; // the size of the attribute
< 		CBytesWriter::WriteBytes((char*)(buf + 6), temp);
< 
< 		bool bUseUtc = pCentralDir->GetArchive()->IsUseUtcFileTimes();
< 		WriteFileTime(m_tModificationTime, (char*)(buf + 8), bUseUtc);
< 		WriteFileTime(m_tCreationTime, (char*)(buf + 16), bUseUtc);
< 		WriteFileTime(m_tLastAccessTime, (char*)(buf + 24), bUseUtc);
< 	}
< 	ZIP_SIZE_TYPE uComprSize = m_uComprSize;
438,442c305,307
< 			if (data != NULL) // just in case
< 			{
< 				data[0] = ZIP_EXTRA_ZARCH_NAME_VER;
< 				data[1] = flag;
< 			}
---
> 
> 			data[0] = ZIP_EXTRA_ZARCH_NAME_VER;
> 			data[1] = flag;
462c327
< 	CBytesWriter::WriteBytes(dest + 20, CBytesWriter::WriteSafeU32(uComprSize));
---
> 	CBytesWriter::WriteBytes(dest + 20, CBytesWriter::WriteSafeU32(m_uComprSize));
531c396
< 	if (!m_aLocalExtraData.Read(pStorage, uExtraFieldSize) && pCentralDir->IsConsistencyCheckOn(CZipArchive::checkInvalidExtraData))
---
> 	if (!m_aLocalExtraData.Read(pStorage, uExtraFieldSize))
552c417
< 				return false;
---
> 			return false;
557,558c422,423
< 			&& ( (m_uLocalComprSize != 0 && m_uLocalComprSize != m_uComprSize) || m_uLocalUncomprSize != m_uUncomprSize))
< 				return false;
---
> 			&& ( m_uLocalComprSize != 0 && m_uLocalComprSize != m_uComprSize || m_uLocalUncomprSize != m_uUncomprSize))
> 			return false;
562a428,461
> void CZipFileHeader::SetTime(const time_t & ttime)
> {
> #if _MSC_VER >= 1400
> 	tm gts;
> 	tm* gt = &gts;
> 	localtime_s(gt, &ttime);
> #else
> 	tm* gt = localtime(&ttime);
> #endif
> 	WORD year, month, day, hour, min, sec;
> 	if (gt == NULL)
> 	{
> 		year = 0;
> 		month = day = 1;
> 		hour = min = sec = 0;
> 	}
> 	else
> 	{
> 		year = (WORD)(gt->tm_year + 1900);		
> 		if (year <= 1980)
> 			year = 0;
> 		else
> 			year -= 1980;
> 		month = (WORD)gt->tm_mon + 1;
> 		day = (WORD)gt->tm_mday;
> 		hour = (WORD)gt->tm_hour;
> 		min = (WORD)gt->tm_min;
> 		sec = (WORD)gt->tm_sec;
> 	}
> 	    
>     m_uModDate = (WORD) (day + ( month << 5) + (year << 9));
>     m_uModTime = (WORD) ((sec >> 1) + (min << 5) + (hour << 11));
> }
> 
902c801
< bool CZipFileHeader::SetFileName(LPCTSTR lpszFileName, bool bInCentralOnly)
---
> bool CZipFileHeader::SetFileName(LPCTSTR lpszFileName)
929,930c828,829
< 		ret = m_pCentralDir->OnFileNameChange(this, bInCentralOnly);
< 		if (!bInCentralOnly)
---
> 		ret = m_pCentralDir->OnFileNameChange(this);
> 		if (ret)
932,935c831
< 			if (ret)
< 				SetModified();
< 			else
< 				m_fileName.SetString(oldFileName);
---
> 			SetModified();
936a833,834
> 		else
> 			m_fileName.SetString(oldFileName);
964,989d861
< CZipString CZipFileHeader::GetFileTitle(bool bLowerCase, bool bClearBuffer)
< {
< 	CZipString sz = GetFileName(bClearBuffer);
< 	CZipPathComponent::RemoveSeparators(sz);
< 	CZipPathComponent zpc(sz);               
< 	CZipString ret = zpc.GetFileTitle();
< 	if (bLowerCase)
< 	{
< 		ret.MakeLower();
< 	}
< 	return ret;
< }
< 
< CZipString CZipFileHeader::GetFileExtension(bool bLowerCase, bool bClearBuffer)
< {
< 	CZipString sz = GetFileName(bClearBuffer);
< 	CZipPathComponent::RemoveSeparators(sz);
< 	CZipPathComponent zpc(sz);               
< 	CZipString ret = zpc.GetFileExt();
< 	if (bLowerCase)
< 	{
< 		ret.MakeLower();
< 	}
< 	return ret;
< }
< 
998c870
< 	{
---
> 	{		
1001,1003c873
< 		// some zip files seem to report size greater than 0 for folders
< 		if ((m_uComprSize == 0 || m_uExternalAttr == 0) && !ZipPlatform::IsDirectory(uConvertedAttr) && CZipPathComponent::HasEndingSeparator(GetFileName()))
< 		{
---
> 		if (m_uComprSize == 0 && !ZipPlatform::IsDirectory(uConvertedAttr) && CZipPathComponent::HasEndingSeparator(GetFileName()))			
1006,1009c876
< 			// We convert again as uConvertedAttr were treated as a file during ZipCompatibility::ConvertToSystem above
< 			DWORD uSystemDirAttributes = ZipCompatibility::ConvertToSystem(ZipPlatform::GetDefaultDirAttributes(), ZipPlatform::GetSystemID(), GetSystemCompatibility());
< 			return ZipCompatibility::ConvertToSystem(uAttr | uSystemDirAttributes, GetSystemCompatibility(), ZipPlatform::GetSystemID());
< 		}
---
> 			return ZipPlatform::GetDefaultDirAttributes() | uConvertedAttr; 
1011c878
< 		{                                      
---
> 		{						
1025a893,895
> 	// The high-word should no be set in attributes, 
> 	// It will be overwritten by Unix attributes, which are stored in high-word.
> 	ASSERT((uAttr & 0xFFFF0000) == 0);
1061,1063d930
< 	m_tModificationTime = header.m_tModificationTime;
< 	m_tCreationTime = header.m_tCreationTime;
< 	m_tLastAccessTime = header.m_tLastAccessTime;
1137,1138c1004,1005
< 			m_uLocalComprSize = CBytesWriter::WriteSafeU32(m_uComprSize);
< 			m_uLocalUncomprSize = CBytesWriter::WriteSafeU32(m_uUncomprSize);
---
> 		m_uLocalComprSize = CBytesWriter::WriteSafeU32(m_uComprSize);
> 		m_uLocalUncomprSize = CBytesWriter::WriteSafeU32(m_uUncomprSize);
1175c1042
< 	bool isCustom = iMode.IsSetAny(CZipArchive::umCustom);
---
> 	bool isCustom = iMode == CZipArchive::umCustom;
1237c1104
< 		bool isCustom = iMode.IsSetAny(CZipArchive::umCustom);
---
> 		bool isCustom = iMode == CZipArchive::umCustom;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFileHeader.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFileHeader.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
67d66
< #pragma warning(suppress: 26495)
128,131d126
< 			GetFileTitle
< 		\see
< 			GetFileExtension
< 		\see 
139,199d133
< 		Returns the filename without the extension. If necessary, performs the conversion using the current filename code page.
< 		Caches the result of conversion for faster access the next time.
< 
< 		\param bLowerCase
< 			If \c true, the returned string will be lower-cased (for string comparison purposes).
< 		\param bClearBuffer
< 			If \c true, releases the internal buffer after performing the filename conversion.
< 			If \c false, the internal buffer is not released and both representations of the 
< 			filename are kept in memory (converted and not converted). This takes more memory, but the 
< 			conversion does not take place again when the central directory is written back to the archive.
< 
< 		\return
< 			The filename title.
< 
< 		\see
< 			<a href="kb">0610051525</a>
< 		\see
< 			GetFileName
< 		\see
< 			SetFileName
< 		\see
< 			GetFileExtension
< 		\see 
< 			GetStringStoreSettings
< 		\see
< 			CZipStringStoreSettings::m_uNameCodePage
< 	*/
< 	CZipString GetFileTitle(bool bLowerCase = false, bool bClearBuffer = true);
< 
< 
< 	/**
< 		Returns the extension of the filename. If necessary, performs the conversion using the current filename code page.
< 		Caches the result of conversion for faster access the next time.
< 
< 		\param bLowerCase
< 			If \c true, the returned string will be lower-cased (for string comparison purposes).
< 		\param bClearBuffer
< 			If \c true, releases the internal buffer after performing the filename conversion.
< 			If \c false, the internal buffer is not released and both representations of the 
< 			filename are kept in memory (converted and not converted). This takes more memory, but the 
< 			conversion does not take place again when the central directory is written back to the archive.
< 
< 		\return
< 			The filename extension.
< 
< 		\see
< 			<a href="kb">0610051525</a>
< 		\see
< 			GetFileName
< 		\see
< 			SetFileName
< 		\see
< 			GetFileTitle
< 		\see 
< 			GetStringStoreSettings
< 		\see
< 			CZipStringStoreSettings::m_uNameCodePage
< 	*/
< 	CZipString GetFileExtension(bool bLowerCase = false, bool bClearBuffer = true);
< 
< 	/**
206,208d139
< 		\param bInCentralOnly
< 			If set to \c true, rename the file in the central directory only. The local header will not be changed. 
< 			This way a file can be renamed quickly and safer. Most of the software (excluding XCeed) usually doesn't pay an attention to the information in the local header.
221,224d151
< 			GetFileTitle
< 		\see
< 			GetFileExtension
< 		\see 
227c154
< 	bool SetFileName(LPCTSTR lpszFileName, bool bInCentralOnly = false);
---
> 	bool SetFileName(LPCTSTR lpszFileName);
383c310
< 		Sets the file creation time. The time will be stored in a dedicated extra header.
---
> 		Sets the file modification date.
386c313
< 			The time to set.
---
> 			The date to set. If this value is incorrect, the date defaults to January 1, 1980.
389,393c316
< 			GetCreationTime
< 		\see
< 			SetModificationTime
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
---
> 			GetTime
395,428c318
< 	void SetCreationTime(const time_t& ttime){m_tCreationTime = ttime;}
< 
< 	/**
< 		Returns the file creation time. 
< 
< 		\return
< 			The creation time.
< 		\see
< 			SetCreationTime
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	time_t GetCreationTime()const{return m_tCreationTime;}
< 
< 	/**
< 		Sets the file modification time.
< 
< 		\param ttime
< 			The time to set.
< 		\param bFullResolution 
< 			If \c true, file time will be additionally stored as 64-bit Windows file time in a dedicated extra header. 
< 			Regular PKZIP format will be preserved allowing proper extraction of the archive by software that do not support this extension.
< 			If \c false, the extra header will not be used and creation and last access time will be cleared.
< 		\param bUseUtcTime
< 			If \c true, UTC time will be used.
< 			If \c false, local time will be used.			
< 		\see
< 			CZipArchive::SetFullFileTimes
< 		\see
< 			GetModificationTime
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	void SetModificationTime(const time_t& ttime, bool bFullResolution = false, bool bUseUtcTime = false );
---
> 	void SetTime(const time_t& ttime);
437,464c327
< 			SetModificationTime
< 	*/
< 	time_t GetModificationTime()const;	
< 
< 	/**
< 		Returns the file last access time. 
< 
< 		\return
< 			The last access time.
< 		\see
< 			SetLastAccessTime
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
< 	*/
< 	time_t GetLastAccessTime()const{return m_tLastAccessTime;}
< 
< 	/**
< 		Sets the file last access time. The time will be stored in a dedicated extra header.
< 
< 		\param ttime
< 			The time to set.
< 
< 		\see
< 			GetLastAccessTime
< 		\see
< 			SetModificationTime
< 		\see
< 			<a href="kb">0610231944|filetimes</a>
---
> 			SetTime
466c329
< 	void SetLastAccessTime(const time_t& ttime){m_tLastAccessTime = ttime;}
---
> 	time_t GetTime()const;
506c369
< 			The attributes to set. The high-word should no be set in attributes, it will be overwritten by Unix attributes, which are stored in high-word.
---
> 			The attributes to set.
509c372
< 			Throws an exception, if the archive system or the current system is not supported by the ZipArchive Library.			
---
> 			Throws an exception, if the archive system or the current system is not supported by the ZipArchive Library.
642,644c505,507
< 	WORD m_uMethod;						///< The compression method. It can be one of the CZipCompressor::CompressionMethod values.	
< 	WORD m_uModTime;					///< The file last modification time. Don't set directly, but rather use CZipFileHeader::SetModificationTime method.
< 	WORD m_uModDate;					///< The file last modification date. Don't set directly, but rather use CZipFileHeader::SetModificationTime method.
---
> 	WORD m_uMethod;						///< The compression method. It can be one of the CZipCompressor::CompressionMethod values.
> 	WORD m_uModTime;					///< The file last modification time.
> 	WORD m_uModDate;					///< The file last modification date.
656,659d518
< 	time_t m_tModificationTime;			///< The file modification time (stored in the NTFS extra field).
< 	time_t m_tCreationTime;				///< The file creation time (stored in the NTFS extra field).
< 	time_t m_tLastAccessTime;			///< The file last access time (stored in the NTFS extra field).
< 
764,765c623,624
< 		\param pCentralDir
< 			The central directory the header belongs to.
---
> 		\param	pStorage
> 			The storage to write the central file header to.
771c630
< 	DWORD Write(CZipCentralDir* pCentralDir);
---
> 	DWORD Write(CZipStorage *pStorage);
1031,1033d889
< 
< 	time_t ReadFileTime(const char* buffer);
< 	void WriteFileTime(const time_t& ttime, char* buffer, bool bUseUtcTime);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFileMapping.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFileMapping.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFileMapping_lnx.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFileMapping_lnx.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
35c35
< 			m_iSize = (size_t)pFile->GetLength();
---
> 			m_iSize = pFile->GetLength();
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFileMapping_win.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFileMapping_win.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile_mfc.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile_mfc.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile_mfc.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile_mfc.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
55,56c55,56
< 	size_t Read(void *lpBuf, size_t nCount){return (size_t)CFile::Read(lpBuf, (UINT)nCount);}
< 	void Write(const void* lpBuf, size_t nCount){CFile::Write(lpBuf, (UINT)nCount);}
---
> 	UINT Read(void *lpBuf, UINT nCount){return CFile::Read(lpBuf, nCount);}
> 	void Write(const void* lpBuf, UINT nCount){CFile::Write(lpBuf, nCount);}
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile_stl.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile_stl.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
116d115
<     {
121d119
<     }
195c193
< void CZipFile::Write(const void* lpBuf, size_t nCount)
---
> void CZipFile::Write(const void* lpBuf, UINT nCount)
201,205c199
< #ifdef _MSC_VER
< 	if (_write(m_hFile, lpBuf, (unsigned int)nCount) != (int) nCount)
< #else
< 	if (_write(m_hFile, lpBuf, nCount) != (int)nCount)
< #endif
---
> 	if (_write(m_hFile, lpBuf, nCount) != (int) nCount)
209c203
< size_t CZipFile::Read(void *lpBuf, size_t nCount)
---
> UINT CZipFile::Read(void *lpBuf, UINT nCount)
216,220c210
< #ifdef _MSC_VER
< 	int ret = (int)_read(m_hFile, lpBuf, (unsigned int)nCount);
< #else
< 	int ret = (int)_read(m_hFile, lpBuf, nCount);
< #endif
---
> 	int ret = _read(m_hFile, lpBuf, nCount);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile_stl.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile_stl.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
25a26
> 	#include <unistd.h>
86c87
< 	void Write(const void* lpBuf, size_t nCount);
---
> 	void Write(const void* lpBuf, UINT nCount);
89c90
< 	size_t Read(void *lpBuf, size_t nCount);
---
> 	UINT Read(void *lpBuf, UINT nCount);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile_win.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile_win.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
207c207
< 	bool ok = ::CloseHandle(m_hFile) != FALSE;
---
> 	bool ok = ::CloseHandle(m_hFile) == TRUE;
231c231
< void CZipFile::Write(const void* lpBuf, size_t nCount)
---
> void CZipFile::Write(const void* lpBuf, UINT nCount)
245c245
< size_t CZipFile::Read(void *lpBuf, size_t nCount)
---
> UINT CZipFile::Read(void *lpBuf, UINT nCount)
257c257
< 	return (size_t)read;
---
> 	return (UINT)read;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipFile_win.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipFile_win.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
60c60
< 	void Write(const void* lpBuf, size_t nCount);
---
> 	void Write(const void* lpBuf, UINT nCount);
63c63
< 	size_t Read(void *lpBuf, size_t nCount);
---
> 	UINT Read(void *lpBuf, UINT nCount);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipMemFile.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipMemFile.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
29c29
< 	if (m_nBufSize < nGrowTo)
---
> 	if (m_nBufSize < (UINT)nGrowTo)
47a48
> 
57c58
< size_t CZipMemFile::Read(void *lpBuf, size_t nCount)
---
> UINT CZipMemFile::Read(void *lpBuf, UINT nCount)
61c62
< 	size_t nToRead = (m_nPos + nCount > m_nDataSize) ? (size_t)(m_nDataSize - m_nPos) : nCount;
---
> 	UINT nToRead = (m_nPos + nCount > m_nDataSize) ? (UINT)(m_nDataSize - m_nPos) : nCount;
68c69
< void CZipMemFile::Write(const void *lpBuf, size_t nCount)
---
> void CZipMemFile::Write(const void *lpBuf, UINT nCount)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipMemFile.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipMemFile.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
71,72c71,72
< 	void Write(const void* lpBuf, size_t nCount);
< 	size_t Read(void* lpBuf, size_t nCount);
---
> 	void Write(const void* lpBuf, UINT nCount);
> 	UINT Read(void* lpBuf, UINT nCount);
80d79
< #pragma warning(suppress: 26495)
88,89c87
< #pragma warning(suppress: 26495)
< 	CZipMemFile(BYTE* lpBuf, size_t nBufSize, long nGrowBy = 0)
---
> 	CZipMemFile(BYTE* lpBuf, UINT nBufSize, long nGrowBy = 0)
95d92
< #pragma warning(suppress: 26495)
104c101
< 		from.Read(m_lpBuf, from.m_nDataSize);
---
> 		from.Read(m_lpBuf, (UINT)from.m_nDataSize);
108c105
< 	void Attach(BYTE* lpBuf, size_t nBufSize, long nGrowBy = 0)
---
> 	void Attach(BYTE* lpBuf, UINT nBufSize, long nGrowBy = 0)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipMutex.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipMutex.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipMutex_lnx.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipMutex_lnx.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
70d69
<         {
72d70
<             {
74d71
<             }
76,79c73
<             {
<                 CZipException::Throw(CZipException::mutexError);
<             }
<         }
---
> 				CZipException::Throw(CZipException::mutexError);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipMutex_win.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipMutex_win.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
29d28
< #pragma warning(suppress: 26495)
53d51
< 	#pragma warning(suppress: 26135)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPathComponent.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPathComponent.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
107c107
< 	static const TCHAR m_cSeparator; ///< A system specific default path separator.	
---
> 	static const TCHAR m_cSeparator; ///< A system specific default path separator.
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPathComponent_lnx.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPathComponent_lnx.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
20a21
> 
23d23
< 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPathComponent_win.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPathComponent_win.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
20d19
< #include "ZipAutoBuffer.h"
91,93d89
< 	// moving to heap to avoid C6262
< 	CZipAutoBuffer szDirBuffer;
< 	
95c91
< 	const int dirBufferLength = 32767;
---
> 	TCHAR szDir[32767];
97c93
< 	const int dirBufferLength = _MAX_DIR;
---
> 	TCHAR szDir[_MAX_DIR];
99,100d94
< 	szDirBuffer.Allocate(dirBufferLength * sizeof (TCHAR), true);		
< 	TCHAR* szDir = (TCHAR*)(char*)szDirBuffer;
115,119c109,111
< 	_tsplitpath_s(szTempPath, szDrive, _MAX_DRIVE, szDir, dirBufferLength, szFname, _MAX_FNAME, szExt, _MAX_EXT);
< #elif defined __MINGW32__ || _MSC_VER >= 1200	
< 	_tsplitpath(szTempPath, szDrive, szDir, szFname, szExt);
< #else 
< 	_tsplitpath(szTempPath, szDrive, _MAX_DRIVE, szDir, dirBufferLength, szFname, _MAX_FNAME, szExt, _MAX_EXT);
---
> 	_tsplitpath_s(szTempPath, szDrive , szDir, szFname, szExt);
> #else
> 	_tsplitpath(szTempPath, szDrive , szDir, szFname, szExt);
125,126c117,118
< 	RemoveSeparatorsLeft(m_szDirectory);
< 	RemoveSeparators(m_szDirectory);
---
> 	m_szDirectory.TrimLeft(m_cSeparator);
> 	m_szDirectory.TrimRight(m_cSeparator);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPlatformComm.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPlatformComm.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
19d18
< #include "ZipAutoBuffer.h"
42c41
< 	if (!f.Open(lpszFileName, CZipFile::modeRead | CZipFile::shareDenyNone, false))
---
> 	if (!f.Open(lpszFileName, CZipFile::modeRead | CZipFile::shareDenyWrite, false))
60c59
< 	catch(CZipBaseException&)
---
> 	catch(CZipBaseException e)
76c75
< 	catch(CZipBaseException&)
---
> 	catch(CZipBaseException e)
84,126d82
< void ZipPlatform::ConvertTimeToFileTime(const time_t& ttime, ZFILETIME& fileTime)
< {
< 	time_t t = ttime > 0 ? ttime : time(NULL);
< 	LONGLONG val = ((LONGLONG)t * 10000000) + SUFFIX_I64(116444736000000000);
< 	fileTime.dwLowDateTime = (DWORD)(val & 0xFFFFFFFF);
<     fileTime.dwHighDateTime = (DWORD)((val >> 32) & 0xFFFFFFFF);
< }
< 
< bool ZipPlatform::ConvertFileTimeToTime(const ZFILETIME& fileTime, time_t& ttime)
< {	
< 	if ( fileTime.dwLowDateTime == 0 && fileTime.dwHighDateTime == 0)
< 	{
< 		ttime = 0;
< 		return false;
< 	}
< 	LONGLONG val = (fileTime.dwLowDateTime & 0xFFFFFFFF);
< 
< 	val |= ((LONGLONG)fileTime.dwHighDateTime << 32) & SUFFIX_I64(0xFFFFFFFF00000000);
< 	val -= SUFFIX_I64(116444736000000000);
< 
< 	ttime = (time_t)(val / 10000000);	
< 	return ttime > 0;
< }
< 
< #ifdef _UNICODE
< 
< int ZipPlatform::WideToMultiByte(LPCWSTR lpszIn, CZipAutoBuffer &szOut, UINT uCodePage)
< {
< 	return WideToMultiByte(lpszIn, szOut, false, uCodePage);
< }
< 
< int ZipPlatform::MultiByteToWide(const CZipAutoBuffer &szIn, CZipString& szOut, UINT uCodePage)
< {
< 	int singleLen = szIn.GetSize();	
< 	if (singleLen == 0)
< 	{
< 		szOut.Empty();
< 		return 0;
< 	}
< 	return MultiByteToWide(szIn, singleLen, szOut, uCodePage);
< }
< 
< #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPlatform.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPlatform.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
43c43
< 	enum FileOverwriteMode
---
> 	enum DeleteFileMode
45,47c45,46
< 		fomRegular = 0x00,				///< No special action is taken when overwriting a file.
< 		fomRemoveReadOnly = 0x01,		///< The read-only attribute is cleared before overwriting a file.
< 		fomOnlyIfNewer = 0x02			///< The file will be overwritten during extraction, only if the file being extracted is newer.
---
> 		dfmRegular = 0x00,				///< No special action is taken when overwriting a file.
> 		dfmRemoveReadOnly = 0x01		///< The read-only attribute is cleared before overwriting a file.
49c48
< 		,fomRecycleBin = 0x04			///< The overwritten file is moved to the Recycle Bin (Windows only).
---
> 		,dfmRecycleBin = 0x02			///< The overwritten file is moved to the Recycle Bin (Windows only).
119,120c118,119
< 	ZIP_API bool GetFileTimes(LPCTSTR lpFileName, time_t* tModificationTime, time_t* tCreationTime = NULL, time_t* tLastAccessTime = NULL); ///< Retrieves file times.
< 	ZIP_API bool SetFileTimes(LPCTSTR lpFileName, const time_t* tModificationTime, const time_t* tCreationTime = NULL, const time_t* tLastAccessTime = NULL);	 ///< Sets file times.
---
> 	ZIP_API bool GetFileModTime(LPCTSTR lpFileName, time_t & ttime); ///< Returns the file modification time.
> 	ZIP_API bool SetFileModTime(LPCTSTR lpFileName, time_t ttime);	 ///< Set the file modification time.
125c124
< 	ZIP_API bool RemoveFile(LPCTSTR lpszFileName, bool bThrow = true, int iMode = fomRegular); ///< Removes a file.
---
> 	ZIP_API bool RemoveFile(LPCTSTR lpszFileName, bool bThrow = true, int iMode = dfmRegular); ///< Removes a file.
127,128d125
< 	void ConvertTimeToFileTime(const time_t& ttime, ZFILETIME& fileTime); // Converts time from the \c time_t format to the \c FILETIME format.
< 	bool ConvertFileTimeToTime(const ZFILETIME& fileTime, time_t& ttime); // Converts time from the \c time_t format to the \c FILETIME format.
135c132
< 	ZIP_API bool SetFileTimes(HANDLE handle, const time_t* tModificationTime, const time_t* tCreationTime = NULL, const time_t* tLastAccessTime = NULL);	 ///< Set file times.
---
> 	ZIP_API bool SetFileModTime(HANDLE handle, time_t ttime);	 ///< Set the file modification time.
199d195
< 
248,271d243
< 		Converts a wide character string to a multi-byte character string.
< 
< 		\param	lpszIn
< 			The wide character string to convert.
< 
< 		\param	szOut
< 			The buffer to receive the converted string.
< 			It contains the terminating \c NULL character depending on the \c bAddNull parameter.
< 
< 		\param bAddNull
< 			If \c true, adds the terminating \c NULL character to the end of the resulting string; \c false otherwise.
< 
< 		\param uCodePage
< 			The code page used in conversion.
< 
< 		\return	
< 			The \a szOut buffer length, or \c -1 when not succeeded.
< 
< 		\note 
< 			Defined only in the UNICODE version.
< 	*/
< 	ZIP_API int WideToMultiByte(LPCWSTR lpszIn, CZipAutoBuffer &szOut, bool bAddNull, UINT uCodePage);
< 
< 	/**
292,317d263
< 	
< 
< 	/**
< 		Converts a multi-byte character string to a wide character string.
< 
< 		\param	szIn
< 			The multi-byte character string to convert.
< 			Should contain the terminating \c NULL character or the size should be specified (not less than 0)
< 
< 		\param iInSize
< 			The size of the string to convert or less than to if the size should be determined (the \c szIn string needs to include the terminating \c NULL character).
< 
< 		\param	szOut
< 			Receives the converted string.
< 
< 		\param uCodePage
< 			The code page used in conversion.
< 
< 		\return
< 			The length of the string after the conversion (without the terminating \c NULL character)
< 			or \c -1 when the function did not succeed.
< 
< 		\note 
< 			Defined only in the UNICODE version.
< 	*/	
< 	ZIP_API int MultiByteToWide(const char* szIn, int iInSize, CZipString& szOut, UINT uCodePage);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPlatform_lnx.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPlatform_lnx.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
58,712c58,60
< #ifdef _UNICODE
< /* 
< 	The UNICODE conversions are derived from the UTF-8 CPP project at: http://sourceforge.net/projects/utfcpp/
< 	
< 	The original copyright notice is provided below.	
< */
< 
< /* BEGIN OF UNICODE CODE */
< 
< // Copyright 2006 Nemanja Trifunovic
< 
< /*
< Permission is hereby granted, free of charge, to any person or organization
< obtaining a copy of the software and accompanying documentation covered by
< this license (the "Software") to use, reproduce, display, distribute,
< execute, and transmit the Software, and to prepare derivative works of the
< Software, and to permit third-parties to whom the Software is furnished to
< do so, all subject to the following:
< 
< The copyright notices in the Software and this entire statement, including
< the above license grant, this restriction and the following disclaimer,
< must be included in all copies of the Software, in whole or in part, and
< all derivative works of the Software, unless such copies or derivative
< works are solely in the form of machine-executable object code generated by
< a source language processor.
< 
< THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
< IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
< FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
< SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
< FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
< ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
< DEALINGS IN THE SOFTWARE.
< */
<  
< 
< #include <iterator>
< #include <stdexcept>  
< 
< namespace utf8
< {
<     // The typedefs for 8-bit, 16-bit and 32-bit unsigned integers
<     // You may need to change them to match your system.
<     // These typedefs have the same names as ones from cstdint, or boost/cstdint
<     typedef unsigned char   uint8_t;
<     typedef unsigned short  uint16_t;
<     typedef unsigned int    uint32_t;
< 
< // Helper code - not intended to be directly called by the library users. May be changed at any time
< namespace internal
< {
<     // Unicode constants
<     // Leading (high) surrogates: 0xd800 - 0xdbff
<     // Trailing (low) surrogates: 0xdc00 - 0xdfff
<     const uint16_t LEAD_SURROGATE_MIN  = 0xd800u;
<     const uint16_t LEAD_SURROGATE_MAX  = 0xdbffu;
<     const uint16_t TRAIL_SURROGATE_MIN = 0xdc00u;
<     const uint16_t TRAIL_SURROGATE_MAX = 0xdfffu;
<     const uint16_t LEAD_OFFSET         = LEAD_SURROGATE_MIN - (0x10000 >> 10);
<     const uint32_t SURROGATE_OFFSET    = 0x10000u - (LEAD_SURROGATE_MIN << 10) - TRAIL_SURROGATE_MIN;
< 
<     // Maximum valid value for a Unicode code point
<     const uint32_t CODE_POINT_MAX      = 0x0010ffffu;
< 
<     template<typename octet_type>
<     inline uint8_t mask8(octet_type oc)
<     {
<         return static_cast<uint8_t>(0xff & oc);
<     }
<     template<typename u16_type>
<     inline uint16_t mask16(u16_type oc)
<     {
<         return static_cast<uint16_t>(0xffff & oc);
<     }
<     template<typename octet_type>
<     inline bool is_trail(octet_type oc)
<     {
<         return ((utf8::internal::mask8(oc) >> 6) == 0x2);
<     }
< 
<     template <typename u16>
<     inline bool is_lead_surrogate(u16 cp)
<     {
<         return (cp >= LEAD_SURROGATE_MIN && cp <= LEAD_SURROGATE_MAX);
<     }
< 
<     template <typename u16>
<     inline bool is_trail_surrogate(u16 cp)
<     {
<         return (cp >= TRAIL_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);
<     }
< 
<     template <typename u16>
<     inline bool is_surrogate(u16 cp)
<     {
<         return (cp >= LEAD_SURROGATE_MIN && cp <= TRAIL_SURROGATE_MAX);
<     }
< 
<     template <typename u32>
<     inline bool is_code_point_valid(u32 cp)
<     {
<         return (cp <= CODE_POINT_MAX && !utf8::internal::is_surrogate(cp));
<     }
< 
<     template <typename octet_iterator>
<     inline typename std::iterator_traits<octet_iterator>::difference_type
<     sequence_length(octet_iterator lead_it)
<     {
<         uint8_t lead = utf8::internal::mask8(*lead_it);
<         if (lead < 0x80)
<             return 1;
<         else if ((lead >> 5) == 0x6)
<             return 2;
<         else if ((lead >> 4) == 0xe)
<             return 3;
<         else if ((lead >> 3) == 0x1e)
<             return 4;
<         else
<             return 0;
<     }
< 
<     template <typename octet_difference_type>
<     inline bool is_overlong_sequence(uint32_t cp, octet_difference_type length)
<     {
<         if (cp < 0x80)
< 		{
<             if (length != 1) 
<                 return true;
<         }
<         else if (cp < 0x800) 
< 		{
<             if (length != 2) 
<                 return true;
<         }
<         else if (cp < 0x10000)
< 		{
<             if (length != 3) 
<                 return true;
<         }
< 
<         return false;
<     }
< 
<     enum utf_error {UTF8_OK, NOT_ENOUGH_ROOM, INVALID_LEAD, INCOMPLETE_SEQUENCE, OVERLONG_SEQUENCE, INVALID_CODE_POINT};
< 
<     /// Helper for get_sequence_x
<     template <typename octet_iterator>
<     utf_error increase_safely(octet_iterator& it, octet_iterator end)
<     {
<         if (++it == end)
<             return NOT_ENOUGH_ROOM;
< 
<         if (!utf8::internal::is_trail(*it))
<             return INCOMPLETE_SEQUENCE;
<         
<         return UTF8_OK;
<     }
< 
<     #define UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(IT, END) {utf_error ret = increase_safely(IT, END); if (ret != UTF8_OK) return ret;}    
< 
<     /// get_sequence_x functions decode utf-8 sequences of the length x
<     template <typename octet_iterator>
<     utf_error get_sequence_1(octet_iterator& it, octet_iterator end, uint32_t& code_point)
<     {
<         if (it == end)
<             return NOT_ENOUGH_ROOM;
< 
<         code_point = utf8::internal::mask8(*it);
< 
<         return UTF8_OK;
<     }
< 
<     template <typename octet_iterator>
<     utf_error get_sequence_2(octet_iterator& it, octet_iterator end, uint32_t& code_point)
<     {
<         if (it == end) 
<             return NOT_ENOUGH_ROOM;
<         
<         code_point = utf8::internal::mask8(*it);
< 
<         UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)
< 
<         code_point = ((code_point << 6) & 0x7ff) + ((*it) & 0x3f);
< 
<         return UTF8_OK;
<     }
< 
<     template <typename octet_iterator>
<     utf_error get_sequence_3(octet_iterator& it, octet_iterator end, uint32_t& code_point)
<     {
<         if (it == end)
<             return NOT_ENOUGH_ROOM;
<             
<         code_point = utf8::internal::mask8(*it);
< 
<         UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)
< 
<         code_point = ((code_point << 12) & 0xffff) + ((utf8::internal::mask8(*it) << 6) & 0xfff);
< 
<         UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)
< 
<         code_point += (*it) & 0x3f;
< 
<         return UTF8_OK;
<     }
< 
<     template <typename octet_iterator>
<     utf_error get_sequence_4(octet_iterator& it, octet_iterator end, uint32_t& code_point)
<     {
<         if (it == end)
<            return NOT_ENOUGH_ROOM;
< 
<         code_point = utf8::internal::mask8(*it);
< 
<         UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)
< 
<         code_point = ((code_point << 18) & 0x1fffff) + ((utf8::internal::mask8(*it) << 12) & 0x3ffff);
< 
<         UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)
< 
<         code_point += (utf8::internal::mask8(*it) << 6) & 0xfff;
< 
<         UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR(it, end)
< 
<         code_point += (*it) & 0x3f;
< 
<         return UTF8_OK;
<     }
< 
<     #undef UTF8_CPP_INCREASE_AND_RETURN_ON_ERROR
< 
<     template <typename octet_iterator>
<     utf_error validate_next(octet_iterator& it, octet_iterator end, uint32_t& code_point)
<     {
<         // Save the original value of it so we can go back in case of failure
<         // Of course, it does not make much sense with i.e. stream iterators
<         octet_iterator original_it = it;
< 
<         uint32_t cp = 0;
<         // Determine the sequence length based on the lead octet
<         typedef typename std::iterator_traits<octet_iterator>::difference_type octet_difference_type;
<         const octet_difference_type length = utf8::internal::sequence_length(it);
< 
<         // Get trail octets and calculate the code point
<         utf_error err = UTF8_OK;
<         switch (length) 
< 		{
<             case 0: 
<                 return INVALID_LEAD;
<             case 1:
<                 err = utf8::internal::get_sequence_1(it, end, cp);
<                 break;
<             case 2:
<                 err = utf8::internal::get_sequence_2(it, end, cp);
< 				break;
<             case 3:
<                 err = utf8::internal::get_sequence_3(it, end, cp);
< 				break;
<             case 4:
<                 err = utf8::internal::get_sequence_4(it, end, cp);
< 				break;
<         }
< 
<         if (err == UTF8_OK) 
< 		{
<             // Decoding succeeded. Now, security checks...
<             if (utf8::internal::is_code_point_valid(cp)) 
< 			{
<                 if (!utf8::internal::is_overlong_sequence(cp, length))
< 				{
<                     // Passed! Return here.
<                     code_point = cp;
<                     ++it;
<                     return UTF8_OK;
<                 }
<                 else
<                     err = OVERLONG_SEQUENCE;
<             }
<             else 
<                 err = INVALID_CODE_POINT;
<         }
< 
<         // Failure branch - restore the original value of the iterator
<         it = original_it;
<         return err;
<     }
< 
<     template <typename octet_iterator>
<     inline utf_error validate_next(octet_iterator& it, octet_iterator end) 
< 	{
<         uint32_t ignored;
<         return utf8::internal::validate_next(it, end, ignored);
<     }
< 
< } // namespace internal
< 
<     /// The library API - functions intended to be called by the users
< 
<     // Byte order mark
<     const uint8_t bom[] = {0xef, 0xbb, 0xbf};
< 
<     template <typename octet_iterator>
<     octet_iterator find_invalid(octet_iterator start, octet_iterator end)
<     {
<         octet_iterator result = start;
<         while (result != end) {
<             utf8::internal::utf_error err_code = utf8::internal::validate_next(result, end);
<             if (err_code != internal::UTF8_OK)
<                 return result;
<         }
<         return result;
<     }
< 
<     template <typename octet_iterator>
<     inline bool is_valid(octet_iterator start, octet_iterator end)
<     {
<         return (utf8::find_invalid(start, end) == end);
<     }
< 
<     template <typename octet_iterator>
<     inline bool starts_with_bom (octet_iterator it, octet_iterator end)
<     {
<         return (
<             ((it != end) && (utf8::internal::mask8(*it++)) == bom[0]) &&
<             ((it != end) && (utf8::internal::mask8(*it++)) == bom[1]) &&
<             ((it != end) && (utf8::internal::mask8(*it))   == bom[2])
<            );
<     }
< 	
<     //Deprecated in release 2.3 
<     template <typename octet_iterator>
<     inline bool is_bom (octet_iterator it)
<     {
<         return (
<             (utf8::internal::mask8(*it++)) == bom[0] &&
<             (utf8::internal::mask8(*it++)) == bom[1] &&
<             (utf8::internal::mask8(*it))   == bom[2]
<            );
<     }
< 
< 	 // Base for the exceptions that may be thrown from the library
<     class exception : public ::std::exception
< 	{
<     };
< 
<     // Exceptions that may be thrown from the library functions.
<     class invalid_code_point : public exception 
< 	{
<         uint32_t cp;
<     public:
<         invalid_code_point(uint32_t cp) : cp(cp) {}
<         virtual const char* what() const throw() { return "Invalid code point"; }
<         uint32_t code_point() const {return cp;}
<     };
< 
<     class invalid_utf8 : public exception
< 	{
<         uint8_t u8;
<     public:
<         invalid_utf8 (uint8_t u) : u8(u) {}
<         virtual const char* what() const throw() { return "Invalid UTF-8"; }
<         uint8_t utf8_octet() const {return u8;}
<     };
< 
<     class invalid_utf16 : public exception 
< 	{
<         uint16_t u16;
<     public:
<         invalid_utf16 (uint16_t u) : u16(u) {}
<         virtual const char* what() const throw() { return "Invalid UTF-16"; }
<         uint16_t utf16_word() const {return u16;}
<     };
< 
<     class not_enough_room : public exception
< 	{
<     public:
<         virtual const char* what() const throw() { return "Not enough space"; }
<     };
< 
<     /// The library API - functions intended to be called by the users
< 
<     template <typename octet_iterator>
<     octet_iterator append(uint32_t cp, octet_iterator result)
<     {
<         if (!utf8::internal::is_code_point_valid(cp))
<             throw invalid_code_point(cp);
< 
<         if (cp < 0x80)                        // one octet
<             *(result++) = static_cast<uint8_t>(cp);
<         else if (cp < 0x800) 
< 		{                // two octets
<             *(result++) = static_cast<uint8_t>((cp >> 6)            | 0xc0);
<             *(result++) = static_cast<uint8_t>((cp & 0x3f)          | 0x80);
<         }
<         else if (cp < 0x10000) 
< 		{              // three octets
<             *(result++) = static_cast<uint8_t>((cp >> 12)           | 0xe0);
<             *(result++) = static_cast<uint8_t>(((cp >> 6) & 0x3f)   | 0x80);
<             *(result++) = static_cast<uint8_t>((cp & 0x3f)          | 0x80);
<         }
<         else 
< 		{                                // four octets
<             *(result++) = static_cast<uint8_t>((cp >> 18)           | 0xf0);
<             *(result++) = static_cast<uint8_t>(((cp >> 12) & 0x3f)  | 0x80);
<             *(result++) = static_cast<uint8_t>(((cp >> 6) & 0x3f)   | 0x80);
<             *(result++) = static_cast<uint8_t>((cp & 0x3f)          | 0x80);
<         }
<         return result;
<     }
< 
<     template <typename octet_iterator, typename output_iterator>
<     output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out, uint32_t replacement)
<     {
<         while (start != end) {
<             octet_iterator sequence_start = start;
<             internal::utf_error err_code = utf8::internal::validate_next(start, end);
<             switch (err_code) 
< 			{
<                 case internal::UTF8_OK :
<                     for (octet_iterator it = sequence_start; it != start; ++it)
<                         *out++ = *it;
<                     break;
<                 case internal::NOT_ENOUGH_ROOM:
<                     throw not_enough_room();
<                 case internal::INVALID_LEAD:
<                     out = utf8::append (replacement, out);
<                     ++start;
<                     break;
<                 case internal::INCOMPLETE_SEQUENCE:
<                 case internal::OVERLONG_SEQUENCE:
<                 case internal::INVALID_CODE_POINT:
<                     out = utf8::append (replacement, out);
<                     ++start;
<                     // just one replacement mark for the sequence
<                     while (start != end && utf8::internal::is_trail(*start))
<                         ++start;
<                     break;
<             }
<         }
<         return out;
<     }
< 
<     template <typename octet_iterator, typename output_iterator>
<     inline output_iterator replace_invalid(octet_iterator start, octet_iterator end, output_iterator out)
<     {
<         static const uint32_t replacement_marker = utf8::internal::mask16(0xfffd);
<         return utf8::replace_invalid(start, end, out, replacement_marker);
<     }
< 
<     template <typename octet_iterator>
<     uint32_t next(octet_iterator& it, octet_iterator end)
<     {
<         uint32_t cp = 0;
<         internal::utf_error err_code = utf8::internal::validate_next(it, end, cp);
<         switch (err_code) {
<             case internal::UTF8_OK :
<                 break;
<             case internal::NOT_ENOUGH_ROOM :
<                 throw not_enough_room();
<             case internal::INVALID_LEAD :
<             case internal::INCOMPLETE_SEQUENCE :
<             case internal::OVERLONG_SEQUENCE :
<                 throw invalid_utf8(*it);
<             case internal::INVALID_CODE_POINT :
<                 throw invalid_code_point(cp);
<         }
<         return cp;
<     }
< 
<     template <typename octet_iterator>
<     uint32_t peek_next(octet_iterator it, octet_iterator end)
<     {
<         return utf8::next(it, end);
<     }
< 
<     template <typename octet_iterator>
<     uint32_t prior(octet_iterator& it, octet_iterator start)
<     {
<         // can't do much if it == start
<         if (it == start)
<             throw not_enough_room();
< 
<         octet_iterator end = it;
<         // Go back until we hit either a lead octet or start
<         while (utf8::internal::is_trail(*(--it)))
<             if (it == start)
<                 throw invalid_utf8(*it); // error - no lead byte in the sequence
<         return utf8::peek_next(it, end);
<     }
< 
<     /// Deprecated in versions that include "prior"
<     template <typename octet_iterator>
<     uint32_t previous(octet_iterator& it, octet_iterator pass_start)
<     {
<         octet_iterator end = it;
<         while (utf8::internal::is_trail(*(--it)))
<             if (it == pass_start)
<                 throw invalid_utf8(*it); // error - no lead byte in the sequence
<         octet_iterator temp = it;
<         return utf8::next(temp, end);
<     }
< 
<     template <typename octet_iterator, typename distance_type>
<     void advance (octet_iterator& it, distance_type n, octet_iterator end)
<     {
<         for (distance_type i = 0; i < n; ++i)
<             utf8::next(it, end);
<     }
< 
<     template <typename octet_iterator>
<     typename std::iterator_traits<octet_iterator>::difference_type
<     distance (octet_iterator first, octet_iterator last)
<     {
<         typename std::iterator_traits<octet_iterator>::difference_type dist;
<         for (dist = 0; first < last; ++dist)
<             utf8::next(first, last);
<         return dist;
<     }
< 
<     template <typename u16bit_iterator, typename octet_iterator>
<     octet_iterator utf16to8 (u16bit_iterator start, u16bit_iterator end, octet_iterator result)
<     {
<         while (start != end)
< 		{
<             uint32_t cp = utf8::internal::mask16(*start++);
<             // Take care of surrogate pairs first
<             if (utf8::internal::is_lead_surrogate(cp))
< 			{
<                 if (start != end) 
< 				{
<                     uint32_t trail_surrogate = utf8::internal::mask16(*start++);
<                     if (utf8::internal::is_trail_surrogate(trail_surrogate))
<                         cp = (cp << 10) + trail_surrogate + internal::SURROGATE_OFFSET;
<                     else
<                         throw invalid_utf16(static_cast<uint16_t>(trail_surrogate));
<                 }
<                 else
<                     throw invalid_utf16(static_cast<uint16_t>(cp));
< 
<             }
<             // Lone trail surrogate
<             else if (utf8::internal::is_trail_surrogate(cp))
<                 throw invalid_utf16(static_cast<uint16_t>(cp));
< 
<             result = utf8::append(cp, result);
<         }
<         return result;
<     }
< 
<     template <typename u16bit_iterator, typename octet_iterator>
<     u16bit_iterator utf8to16 (octet_iterator start, octet_iterator end, u16bit_iterator result)
<     {
<         while (start != end)
< 		{
<             uint32_t cp = utf8::next(start, end);
<             if (cp > 0xffff) 
< 			{
< 				//make a surrogate pair
<                 *result++ = static_cast<uint16_t>((cp >> 10)   + internal::LEAD_OFFSET);
<                 *result++ = static_cast<uint16_t>((cp & 0x3ff) + internal::TRAIL_SURROGATE_MIN);
<             }
<             else
<                 *result++ = static_cast<uint16_t>(cp);
<         }
<         return result;
<     }
< 
<     template <typename octet_iterator, typename u32bit_iterator>
<     octet_iterator utf32to8 (u32bit_iterator start, u32bit_iterator end, octet_iterator result)
<     {
<         while (start != end)
<             result = utf8::append(*(start++), result);
< 
<         return result;
<     }
< 
<     template <typename octet_iterator, typename u32bit_iterator>
<     u32bit_iterator utf8to32 (octet_iterator start, octet_iterator end, u32bit_iterator result)
<     {
<         while (start != end)
<             (*result++) = utf8::next(start, end);
< 
<         return result;
<     }
< 
<     // The iterator class
<     template <typename octet_iterator>
<     class iterator : public std::iterator <std::bidirectional_iterator_tag, uint32_t> {
<       octet_iterator it;
<       octet_iterator range_start;
<       octet_iterator range_end;
<       public:
<       iterator () {}
<       explicit iterator (const octet_iterator& octet_it,
<                          const octet_iterator& range_start,
<                          const octet_iterator& range_end) :
<                it(octet_it), range_start(range_start), range_end(range_end)
<       {
<           if (it < range_start || it > range_end)
<               throw std::out_of_range("Invalid utf-8 iterator position");
<       }
<       // the default "big three" are OK
<       octet_iterator base () const { return it; }
<       uint32_t operator * () const
<       {
<           octet_iterator temp = it;
<           return utf8::next(temp, range_end);
<       }
<       bool operator == (const iterator& rhs) const
<       {
<           if (range_start != rhs.range_start || range_end != rhs.range_end)
<               throw std::logic_error("Comparing utf-8 iterators defined with different ranges");
<           return (it == rhs.it);
<       }
<       bool operator != (const iterator& rhs) const
<       {
<           return !(operator == (rhs));
<       }
<       iterator& operator ++ ()
<       {
<           utf8::next(it, range_end);
<           return *this;
<       }
<       iterator operator ++ (int)
<       {
<           iterator temp = *this;
<           utf8::next(it, range_end);
<           return temp;
<       }
<       iterator& operator -- ()
<       {
<           utf8::prior(it, range_start);
<           return *this;
<       }
<       iterator operator -- (int)
<       {
<           iterator temp = *this;
<           utf8::prior(it, range_start);
<           return temp;
<       }
<     }; // class iterator 
< } // namespace utf8 
< 
< /* END OF UNICODE CODE */
< 
< #if !defined(SIZEOFWCHART)
< 	#if __SIZEOF_WCHAR_T__ == 4 || __WCHAR_MAX__ > 0x10000
< 		#define SIZEOFWCHART 4
< 	#else
< 		#define SIZEOFWCHART 2
< 	#endif
< #endif
< 
< #endif
< 
---
> //////////////////////////////////////////////////////////////////////
> // Construction/Destruction
> //////////////////////////////////////////////////////////////////////
715,716c63
< 		struct statfs sStats;
< 		_ZIP_WIDE_TO_MULTIBYTE(lpszPath, path)		
---
> 	struct statfs sStats;
719c66
< 		if (statvfs(path, &sStats) == -1) // Solaris
---
> 		if (statvfs(lpszPath, &sStats) == -1) // Solaris
721c68
< 		if (statfs(path, &sStats) == -1)
---
> 		if (statfs(lpszPath, &sStats) == -1)
734c81
< 		tempPath = _T("/tmp");
---
> 		tempPath = "/tmp";
740,748c87
< 	int handle;
< #ifdef _UNICODE
< 	CZipAutoBuffer tempPathBuffer;	
< 	WideToMultiByte(tempPath, tempPathBuffer, true, 0);
< 	handle = mkstemp(tempPathBuffer);
< 	// copy back to tempPath
< 	MultiByteToWide(tempPathBuffer, -1, tempPath, 0);	
< #else	
< 	handle = mkstemp(tempPath.GetBuffer(tempPath.GetLength()));
---
> 	int handle = mkstemp(tempPath.GetBuffer(tempPath.GetLength()));
750d88
< #endif	
765,767d102
< #ifdef _UNICODE	
< 	MultiByteToWide(pBuf, -1, sz, 0);
< #else	
769d103
< #endif	
776,777c110
<     _ZIP_WIDE_TO_MULTIBYTE(lpFileName, fileName)
< 	return chmod(fileName, uAttr) == 0;
---
> 	return chmod(lpFileName, uAttr) == 0;
781,783c114
< {	
< 	_ZIP_WIDE_TO_MULTIBYTE(lpFileName, fileName)
<     
---
> {
785c116
< 	if (stat(fileName, &sStats) == -1)
---
> 	if (stat(lpFileName, &sStats) == -1)
792c123
< {	
---
> {
801c132
< bool ZipPlatform::GetFileTimes(LPCTSTR lpFileName, time_t* tModificationTime, time_t* tCreationTime, time_t* tLastAccessTime)
---
> bool ZipPlatform::GetFileModTime(LPCTSTR lpFileName, time_t & ttime)
803,815d133
< 	if (tModificationTime != NULL)
< 	{
< 		*tModificationTime = 0;
< 	}
< 	if (tCreationTime != NULL)
< 	{
< 		*tCreationTime = 0;
< 	}
< 	if (tLastAccessTime != NULL)
< 	{
< 		*tLastAccessTime = 0;
< 	}
< 	_ZIP_WIDE_TO_MULTIBYTE(lpFileName, fileName)
817,829c135,136
< 	bool ret;
< 	if (stat(fileName, &st) == 0)
< 	{
< 		ret = true;
< 		if (tModificationTime != NULL)
< 			*tModificationTime = st.st_mtime;
< 		if (tCreationTime != NULL)
< 			*tCreationTime = st.st_ctime;
< 		if (tLastAccessTime != NULL)
< 			*tLastAccessTime = st.st_atime;
< 	}
< 	else 
< 		ret = false; 
---
> 	if (stat(lpFileName, &st) != 0)
> 		return false;
831c138,139
< 	if (ret == false)
---
>  	ttime = st.st_mtime;
> 	if (ttime == (time_t)-1)
833,845c141,142
< 		time_t tNow = time(NULL);
< 		if (tModificationTime != NULL && *tModificationTime <= 0)
< 		{
< 			*tModificationTime = tNow;
< 		}
< 		if (tCreationTime != NULL && *tCreationTime <= 0)
< 		{
< 			*tCreationTime = tNow;
< 		}
< 		if (tLastAccessTime != NULL && *tLastAccessTime <= 0)
< 		{
< 			*tLastAccessTime = tNow;
< 		}
---
> 		ttime = time(NULL);
> 		return false;
847c144,145
< 	return ret;
---
> 	else
> 		return true;
850c148
< bool ZipPlatform::SetFileTimes(LPCTSTR lpFileName, const time_t* tModificationTime, const time_t* tCreationTime, const time_t* tLastAccessTime)
---
> bool ZipPlatform::SetFileModTime(LPCTSTR lpFileName, time_t ttime)
852d149
< 	_ZIP_WIDE_TO_MULTIBYTE(lpFileName, fileName)
854,858c151,153
< 	// if wrong file time, set it to the current
< 	ub.actime = tLastAccessTime != NULL && *tLastAccessTime > 0 ? *tLastAccessTime : time(NULL);
< 	ub.modtime = tModificationTime != NULL && *tModificationTime > 0 ? *tModificationTime : time(NULL);
< 	// no creation time
< 	return utime(fileName, &ub) == 0;
---
> 	ub.actime = time(NULL);
> 	ub.modtime = ttime == -1 ? time(NULL) : ttime; // if wrong file time, set it to the current
> 	return utime(lpFileName, &ub) == 0;
864,865c159
< 	_ZIP_WIDE_TO_MULTIBYTE(lpDirectory, directory)
< 	return chdir(directory) == 0; 
---
> 	return chdir(lpDirectory) == 0; 
869,871c163,164
< 	_ZIP_WIDE_TO_MULTIBYTE(lpszName, name)
<     struct stat st;
< 	if (stat(name, &st) != 0)
---
>     	struct stat st;
> 	if (stat(lpszName, &st) != 0)
901c194
< 	if ((iMode & ZipPlatform::fomRemoveReadOnly) != 0)
---
> 	if ((iMode & ZipPlatform::dfmRemoveReadOnly) != 0)
910,912c203
< 	_ZIP_WIDE_TO_MULTIBYTE(lpszFileName, name)
< 	if (unlink(name) != 0)
<     {
---
> 	if (unlink(lpszFileName) != 0)
917,918c208
< 	}
<     return true;
---
> 	return true;
923,925c213
< 	_ZIP_WIDE_TO_MULTIBYTE(lpszOldName, oldName)
< 	_ZIP_WIDE_TO_MULTIBYTE(lpszNewName, newName)
< 	if (rename(oldName, newName) != 0)
---
> 	if (rename(lpszOldName, lpszNewName) != 0)
941,942c229
< 	_ZIP_WIDE_TO_MULTIBYTE(lpDirectory, directory)
< 	return mkdir(directory, ZIP_DEFAULT_DIR_ATTRIBUTES) == 0;
---
> 	return mkdir(lpDirectory, ZIP_DEFAULT_DIR_ATTRIBUTES) == 0;
954a242
> 
964a253
> 
967,971c256
< #if defined FILE_FUNCTIONS_64B_BY_DEFAULT || defined __ANDROID__
< 	#ifdef __ANDROID__
< 		if (uSize > 0x7FFFFFFF)
< 			CZipException::Throw();
< 	#endif
---
> #ifdef FILE_FUNCTIONS_64B_BY_DEFAULT
982,984c267,268
< 	_ZIP_WIDE_TO_MULTIBYTE(lpszFileName, fileName)
< #if defined FILE_FUNCTIONS_64B_BY_DEFAULT || defined __ANDROID__
< 	return open(fileName, iMode, S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH );	
---
> #ifdef FILE_FUNCTIONS_64B_BY_DEFAULT
> 	return open(lpszFileName, iMode, S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH );	
986c270
< 	return open64(fileName, iMode, S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH );	
---
> 	return open64(lpszFileName, iMode, S_IRUSR | S_IWUSR | S_IRGRP |S_IROTH );	
997c281
< 	return iDes;
---
>         return iDes;
1000,1083d283
< 
< #ifdef _UNICODE
< 
< int ZipPlatform::WideToMultiByte(LPCWSTR lpszIn, CZipAutoBuffer &szOut, bool bAddNull, UINT uCodePage)
< {
< 	size_t wideLen = wcslen(lpszIn);
< 	if (wideLen == 0)
< 	{
< 		szOut.Release();
< 		return 0;
< 	}	
< 	std::vector<utf8::uint8_t> result;
< 	try
< 	{
< #if SIZEOFWCHART == 4
< 		utf8::utf32to8(lpszIn, lpszIn + wideLen, std::back_inserter(result));
< #else
< 		utf8::utf16to8(lpszIn, lpszIn + wideLen, std::back_inserter(result));
< #endif		
< 	}
< 	catch(utf8::exception&)
< 	{
< 		szOut.Release();
< 		return -1;
< 	}
< 
< 	size_t resultSize = result.size();
< 	if (resultSize == 0)
< 	{
< 		szOut.Release();
< 		// here it means an error
< 		return -1;
< 	}
< 
< 	szOut.Allocate(bAddNull ? resultSize + 1 : resultSize);
< 	std::copy(result.begin(), result.end(), (char*)szOut);
< 	if (bAddNull)
< 	{
< 		szOut[resultSize] = 0;
< 	}
< 	return szOut.GetSize();
< }
< 
< // TODO: implement normalization
< int ZipPlatform::MultiByteToWide(const char* szIn, int iInSize, CZipString& szOut, UINT uCodePage)
< {	
< 	szOut.Empty();
< 	if (iInSize < 0)
< 	{
< 		iInSize = (int)std::string(szIn).length();
< 	}	
< 	if (iInSize == 0)
< 	{		
< 		return 0;
< 	}
< 	
< #if SIZEOFWCHART == 4
< 	std::vector<utf8::uint32_t> result;
< #else
< 	std::vector<utf8::uint16_t> result;
< #endif
< 	try
< 	{
< 		const char* input = szIn;
< #if SIZEOFWCHART == 4
< 		utf8::utf8to32(input, input + iInSize, std::back_inserter(result));
< #else
< 		utf8::utf8to16(input, input + iInSize, std::back_inserter(result));
< #endif
< 		if (result.size() == 0)
< 		{
< 			// here it means an error
< 			return -1;
< 		}
< 	}
< 	catch(utf8::exception&)
< 	{		
< 		return -1;
< 	}
< 	stdbs& out = szOut;
< 	out.insert(out.begin(), result.begin(), result.end());
< 	return szOut.GetLength();
< }
< #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipPlatform_win.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipPlatform_win.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
49d48
< #include <locale>
105,120c104,105
< 		CZipPathComponent::AppendSeparator(tempPath);
< 		tempPath += _T("ZAR");
< 		tempPath += _T("XXXXXX");
< 		int length = tempPath.GetLength() + 1;
< #if _MSC_VER >= 1400	
< 		errno_t err = _tmktemp_s(tempPath.GetBuffer(length), (size_t)length);
< #else // defined __MINGW32__ || _MSC_VER >= 1200		
< 		LPTSTR err = _tmktemp(tempPath.GetBuffer(length));
< #endif
< 		tempPath.ReleaseBuffer();
< #if _MSC_VER >= 1400	
< 		if (err != 0)
< #else
< 		if (err == NULL)
< #endif
< 		{
---
> 		CZipString tempName;
> 		if (!GetTempFileName(tempPath, _T("ZAR"), 0, tempName.GetBuffer(_MAX_PATH)))
122,123c107,108
< 		}
< 		return tempPath;
---
> 		tempName.ReleaseBuffer();
> 		return tempName;
157c142
< bool ZipPlatform::GetFileTimes(LPCTSTR lpFileName, time_t* tModificationTime, time_t* tCreationTime, time_t* tLastAccessTime)
---
> bool ZipPlatform::GetFileModTime(LPCTSTR lpFileName, time_t & ttime)
160,171c145,146
< 	CZipString szPath = CZipPathComponent::AddPrefix(lpFileName);
< 	HANDLE handle = ::FindFirstFile(szPath, &findData);
< 
< 	if (tModificationTime != NULL)
< 	{
< 		*tModificationTime = 0;
< 	}
< 	if (tCreationTime != NULL)
< 	{
< 		*tCreationTime = 0;
< 	}
< 	if (tLastAccessTime != NULL)
---
> 	HANDLE handle = ::FindFirstFile(CZipPathComponent::AddPrefix(lpFileName), &findData);
> 	if (handle == INVALID_HANDLE_VALUE)
173c148,149
< 		*tLastAccessTime = 0;
---
> 		ttime = time(NULL);
> 		return false;
176,221c152,164
< 	if (handle != INVALID_HANDLE_VALUE)
< 	{
< 		FindClose(handle);
< 		ret = true;			
< 	}
< 	else
< 	{
< 		// handle the situation when there are no permissions for reading the list of files, but there are permissions for reading the file
< 		handle = ::CreateFile(szPath, GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
< 		if (handle != INVALID_HANDLE_VALUE)
< 		{
< 			ZBOOL bResult = ::GetFileTime(handle, &findData.ftCreationTime, &findData.ftLastAccessTime, &findData.ftLastWriteTime);
< 			CloseHandle(handle);
< 			if (bResult != FALSE)
< 			{
< 				ret = true;				
< 			}						
< 		}
< 	}
< 
< 	if (ret)
< 	{
< 		if (tModificationTime != NULL && !ConvertFileTimeToTime(findData.ftLastWriteTime, *tModificationTime))
< 			ret = false;
< 		if (tCreationTime != NULL && !ConvertFileTimeToTime(findData.ftCreationTime, *tCreationTime))
< 			ret = false;
< 		if (tLastAccessTime != NULL && !ConvertFileTimeToTime(findData.ftLastAccessTime, *tLastAccessTime))
< 			ret = false;
< 	}
< 
< 	if (!ret)
< 	{
< 		time_t tNow = time(NULL);
< 		if (tModificationTime != NULL && *tModificationTime <= 0)
< 		{
< 			*tModificationTime = tNow;
< 		}
< 		if (tCreationTime != NULL && *tCreationTime <= 0)
< 		{
< 			*tCreationTime = tNow;
< 		}
< 		if (tLastAccessTime != NULL && *tLastAccessTime <= 0)
< 		{
< 			*tLastAccessTime = tNow;
< 		}
< 	}
---
>     if ( findData.ftLastWriteTime.dwLowDateTime || findData.ftLastWriteTime.dwHighDateTime )
>     {
> 		LONGLONG val = (findData.ftLastWriteTime.dwLowDateTime & 0xFFFFFFFF);
> 
> 		val |= ((LONGLONG)findData.ftLastWriteTime.dwHighDateTime << 32) & SUFFIX_I64(0xFFFFFFFF00000000);
> 		val -= SUFFIX_I64(116444736000000000);
> 
> 		ttime = (time_t)(val / 10000000);
> 		ret = ttime >= 0;
>     }
> 	FindClose(handle);
> 	if (ret == false)
> 		ttime = time(NULL);	
225c168
< bool ZipPlatform::SetFileTimes(LPCTSTR lpFileName, const time_t* tModificationTime, const time_t* tCreationTime, const time_t* tLastAccessTime)
---
> bool ZipPlatform::SetFileModTime(LPCTSTR lpFileName, time_t ttime)
232c175
< 	bool ret = ZipPlatform::SetFileTimes(handle, tModificationTime, tCreationTime, tLastAccessTime);	
---
> 	bool ret = ZipPlatform::SetFileModTime(handle, ttime);	
237,238c180
< 
< bool ZipPlatform::SetFileTimes(HANDLE handle, const time_t* tModificationTime, const time_t* tCreationTime, const time_t* tLastAccessTime)
---
> bool ZipPlatform::SetFileModTime(HANDLE handle, time_t ttime)
240,274c182,187
< 	ZFILETIME ftModTime = {0};
< 	ZFILETIME* pftModTime;
< 	if (tModificationTime != NULL)
< 	{
< 		ZipPlatform::ConvertTimeToFileTime(*tModificationTime, ftModTime);
< 		pftModTime = &ftModTime;
< 	}
< 	else
< 	{
< 		pftModTime = NULL;
< 	}
< 	ZFILETIME ftCreationTime = {0};
< 	ZFILETIME* pftCreationTime;
< 	if (tCreationTime != NULL)
< 	{
< 		ZipPlatform::ConvertTimeToFileTime(*tCreationTime, ftCreationTime);
< 		pftCreationTime = &ftCreationTime;
< 	}
< 	else
< 	{
< 		pftCreationTime = NULL;
< 	}
< 	ZFILETIME ftLastAccessTime = {0};
< 	ZFILETIME* pftLastAccessTime;
< 	if (tLastAccessTime != NULL)
< 	{
< 		ZipPlatform::ConvertTimeToFileTime(*tLastAccessTime, ftLastAccessTime);
< 		pftLastAccessTime = &ftLastAccessTime;
< 	}
< 	else
< 	{
< 		pftLastAccessTime = NULL;
< 	}
< 	
< 	return ::SetFileTime(handle, pftCreationTime, pftLastAccessTime , pftModTime) != 0;
---
> 	FILETIME ft;
> 	LONGLONG val = ((LONGLONG)ttime * 10000000) + SUFFIX_I64(116444736000000000);
>     ft.dwLowDateTime = (DWORD)(val & 0xFFFFFFFF);
>     ft.dwHighDateTime = (DWORD)((val >> 32) & 0xFFFFFFFF);
> 
> 	return ::SetFileTime(handle, NULL, NULL, &ft) != 0;
323c236
< 	int iLen = ::MultiByteToWideChar(cpIn, MB_PRECOMPOSED, buffer, size, NULL, 0);
---
> 	int iLen = MultiByteToWideChar(cpIn, MB_PRECOMPOSED, buffer, size, NULL, 0);
328c241
< 	iLen = ::MultiByteToWideChar(cpIn, MB_PRECOMPOSED, buffer, size, lpszWide, iLen);
---
> 	iLen = MultiByteToWideChar(cpIn, MB_PRECOMPOSED, buffer, size, lpszWide, iLen);
332c245
< 	size = ::WideCharToMultiByte(cpOut, 0, lpszWide, iLen, NULL, 0, NULL, NULL);
---
> 	size = WideCharToMultiByte(cpOut, 0, lpszWide, iLen, NULL, 0, NULL, NULL);
336c249
< 	size = ::WideCharToMultiByte(cpOut, 0, lpszWide, iLen, buffer, size, NULL, NULL);
---
> 	size = WideCharToMultiByte(cpOut, 0, lpszWide, iLen, buffer, size, NULL, NULL);
340c253
< 		::CharToOemBuffA(buffer, buffer, buffer.GetSize());
---
> 		CharToOemBuffA(buffer, buffer, buffer.GetSize());
342c255
< 		::OemToCharBuffA(buffer, buffer, buffer.GetSize());
---
> 		OemToCharBuffA(buffer, buffer, buffer.GetSize());
348c261
< 	if ((iMode & ZipPlatform::fomRemoveReadOnly) != 0)
---
> 	if ((iMode & ZipPlatform::dfmRemoveReadOnly) != 0)
358c271
< 	if ((iMode & ZipPlatform::fomRecycleBin) == 0)
---
> 	if ((iMode & ZipPlatform::dfmRecycleBin) == 0)
458c371
< int ZipPlatform::WideToMultiByte(LPCWSTR lpszIn, CZipAutoBuffer &szOut, bool bAddNull, UINT uCodePage)
---
> int ZipPlatform::WideToMultiByte(LPCWSTR lpszIn, CZipAutoBuffer &szOut, UINT uCodePage)
468c381
< 	int iLen = ::WideCharToMultiByte(uCodePage, 0, lpszIn, (int)wideLen, szOut,
---
> 	int iLen = WideCharToMultiByte(uCodePage, 0, lpszIn, (int)wideLen, szOut, 
472,473c385,386
< 		szOut.Allocate(bAddNull ? iLen + 1 : iLen, true);
< 		iLen = ::WideCharToMultiByte(uCodePage, 0, lpszIn, (int)wideLen, szOut,
---
> 		szOut.Allocate(iLen, true);
> 		iLen = WideCharToMultiByte(uCodePage, 0, lpszIn , (int)wideLen, szOut, 
476,479d388
< 		if (bAddNull)
< 		{
< 			szOut[iLen] = 0;
< 		}
488c397
< int ZipPlatform::MultiByteToWide(const char* szIn, int iInSize, CZipString& szOut, UINT uCodePage)
---
> int ZipPlatform::MultiByteToWide(const CZipAutoBuffer &szIn, CZipString& szOut, UINT uCodePage)
490,491c399,400
< 	szOut.Empty();
< 	if (iInSize < 0)
---
> 	int singleLen = szIn.GetSize();
> 	if (singleLen == 0)
493,496c402
< 		iInSize = (int)std::string(szIn).length();
< 	}	
< 	if (iInSize == 0)
< 	{		
---
> 		szOut.Empty();
502c408
< 	int iLen = ::MultiByteToWideChar(uCodePage, dwFlags, szIn, iInSize, NULL, 0);
---
> 	int iLen = MultiByteToWideChar(uCodePage, dwFlags, szIn.GetBuffer(), singleLen, NULL, 0);
505c411,412
< 		iLen = ::MultiByteToWideChar(uCodePage, dwFlags, szIn, iInSize, szOut.GetBuffer(iLen), iLen);
---
> 		iLen = MultiByteToWideChar(uCodePage, dwFlags, szIn.GetBuffer(), singleLen, 
> 			szOut.GetBuffer(iLen) , iLen);
512c419
< 		if (::IsNormalizedString(NormalizationC, szOut, iLen + 1) != FALSE)
---
> 		if (IsNormalizedString(NormalizationC, szOut, iLen + 1) == TRUE)
514c421
< 		int iNewLen = ::NormalizeString(NormalizationC, szOut, iLen, NULL, 0);
---
> 		int iNewLen = NormalizeString(NormalizationC, szOut, iLen, NULL, 0);
520c427
< 		iNewLen = ::NormalizeString(NormalizationC, szOut, iLen, szNormalized.GetBuffer(iNewLen), iNewLen);		
---
> 		iNewLen = NormalizeString(NormalizationC, szOut, iLen, szNormalized.GetBuffer(iNewLen), iNewLen);		
534c441,442
< 	{		
---
> 	{
> 		szOut.Empty();
560c468
< 		li.LowPart = ::SetFilePointer(handle, li.LowPart, (LONG*)&li.HighPart, FILE_BEGIN);
---
> 		li.LowPart = SetFilePointer(handle, li.LowPart, (LONG*)&li.HighPart, FILE_BEGIN);
563c471
< 		return ::SetEndOfFile(handle) != FALSE;
---
> 		return SetEndOfFile(handle) == TRUE;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipSplitNamesHandler.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipSplitNamesHandler.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
194,196d193
< #ifdef _UNICODE                
< 		ret = (__int64)wcstoll((LPCTSTR)szExt, NULL, 10);
< #else
198d194
< #endif                
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipStorage.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipStorage.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
27d26
< #pragma warning(suppress: 26495)
61c60
< 		iRead = (DWORD)m_pFile->Read(pBuf, iSize);
---
> 		iRead = m_pFile->Read(pBuf, iSize);
81c80
< 		UINT iNewRead = (UINT)m_pFile->Read((char*)pBuf + iRead, iSize - iRead);
---
> 		UINT iNewRead = m_pFile->Read((char*)pBuf + iRead, iSize - iRead);
270,273d268
< 	else if (!ZipPlatform::FileExists(szVolumeName))
< 	{
< 		CZipException::Throw(CZipException::notFound, szVolumeName);
< 	}
430d424
< 	{
432,433d425
< 		return; // for Code Analysis
< 	}
577c569,570
< {	
---
> {
> 	m_pFile->SeekToEnd();
622c615
< 		int actuallyRead = (int)m_pFile->Read((char*)buffer + offset, toRead);
---
> 		int actuallyRead = m_pFile->Read((char*)buffer + offset, toRead);
631c624
< 					return (ZIP_FILE_SIZE)(uFileLength - ( position - ( (ZIP_FILE_SIZE)pos - offset ) ));
---
> 					return (ZIP_FILE_USIZE)(uFileLength - ( position - ( pos - offset ) ));
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipStorage.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipStorage.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
82,84d81
< 
< 	static const ZIP_FILE_USIZE SignatureNotFound;
< 
102,126d98
< 	
< 	/** 
< 		Gets the expected path of a volume name in a split archive.
< 
< 		\param uVolume
< 			The volume's zero-based index.
< 
< 		\param bLast
< 			If \c true, the volume is expected to be the last volume; \c false otherwise.
< 
< 		\return
< 			The expected path of a volume name in a split archive.
< 	*/
< 	CZipString GetSplitVolumeName(ZIP_VOLUME_TYPE uVolume, bool bLast)
< 	{
< 		if (m_pSplitNames == NULL)
< 		{
< 			ThrowError(CZipException::genericError);
< 			return _T(""); // for Code Analysis
< 		}
< 		int flags = bLast ? CZipSplitNamesHandler::flLast : CZipSplitNamesHandler::flNone;
< 		if (IsExisting())
< 			flags |= CZipSplitNamesHandler::flExisting;
< 		return m_pSplitNames->GetVolumeName(m_szArchiveName, (ZIP_VOLUME_TYPE)(uVolume + 1), flags);
< 	}
192c164
< 			return !m_pFile || (m_state.IsSetAny(stateAutoClose) && m_pFile->IsClosed());
---
> 			return !m_pFile || m_state.IsSetAny(stateAutoClose) && m_pFile->IsClosed();
510,524d481
< 	/**
< 	Reverse-finds the location of the given signature starting from the current position in file.
< 
< 	\param szSignature
< 	The signature to locate.
< 
< 	\param uMaxDepth
< 	The maximum number of bytes to search for \a szSignature.
< 
< 	\return
< 	The location of the signature.
< 
< 	*/
< 	ZIP_FILE_USIZE LocateSignature(char* szSignature, ZIP_SIZE_TYPE uMaxDepth);
< 
536a494,509
> 	
> 	/**
> 		Reverse-finds the location of the given signature starting from the current position in file.
> 
> 		\param szSignature
> 			The signature to locate.
> 
> 		\param uMaxDepth
> 			The maximum number of bytes to search for \a szSignature.
> 
> 		\return
> 			The location of the signature.
> 
> 	*/
> 	ZIP_FILE_USIZE LocateSignature(char* szSignature, ZIP_SIZE_TYPE uMaxDepth);
> 		
710d682
< 
713c685,692
< 		return GetSplitVolumeName(m_uCurrentVolume, bLast);
---
> 		if (m_pSplitNames == NULL)
> 		{
> 			ThrowError(CZipException::genericError);
> 		}
> 		int flags = bLast ? CZipSplitNamesHandler::flLast : CZipSplitNamesHandler::flNone;
> 		if (IsExisting())
> 			flags |= CZipSplitNamesHandler::flExisting;
> 		return m_pSplitNames->GetVolumeName(m_szArchiveName, (ZIP_VOLUME_TYPE)(m_uCurrentVolume + 1), flags);
770c749,750
< 	bool m_bAutoDeleteSplitNames;	
---
> 	bool m_bAutoDeleteSplitNames;
> 	static const ZIP_FILE_USIZE SignatureNotFound;
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipString.cpp lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipString.cpp
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
17,24d16
< 
< #ifdef _ZIP_IMPL_STL
< 	std::locale CZipString::m_gCurrentLocale = std::locale("");
< 	#if defined __GNUC__ && !defined __MINGW32__ 
< 		std::locale CZipString::m_gGlobalLocale = std::locale();
< 		std::locale CZipString::m_gClassicLocale = std::locale::classic();
< 	#endif
< #endif
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipString.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipString.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipString_mfc.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipString_mfc.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipString_stl.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipString_stl.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
37,49c37,42
< #ifndef _vsntprintf 
< 	#ifndef __GNUC__    
< 			#ifdef  _UNICODE
< 				#define _vsntprintf _vsnwprintf
< 			#else
< 				#define _vsntprintf _vsnprintf
< 			#endif
< 	#else 
< 		#ifdef  _UNICODE
< 			#define _vsntprintf vswprintf
< 		#else
< 			#define _vsntprintf vsnprintf
< 		#endif
---
> #ifndef __GNUC__
>     #ifndef _vsntprintf 
> 	#ifdef  _UNICODE
> 		#define _vsntprintf _vsnwprintf
> 	#else
> 		#define _vsntprintf _vsnprintf
50a44,46
>     #endif
> #elif !defined(_vsntprintf)
>        #define _vsntprintf vsnprintf
54d49
< 
60,64c55
< 	static std::locale m_gCurrentLocale;
< #if defined __GNUC__ && !defined __MINGW32__ 
< 	static std::locale m_gGlobalLocale;
< 	static std::locale m_gClassicLocale;
< #endif
---
>         stdbs m_str; 
66,80c57,69
<     stdbs m_str; 
< 
<     void TrimInternalL(stdbs::size_type iPos) 
<     { 
<         if (iPos == stdbs::npos) 
<                 m_str.erase (); 
<         if (iPos) 
<                 m_str.erase(0, iPos); 
<     } 
<     void TrimInternalR(stdbs::size_type iPos) 
<     { 
<         if (iPos == stdbs::npos) 
<                 m_str.erase (); 
<         m_str.erase(++iPos); 
<     } 
---
>         void TrimInternalL(stdbs::size_type iPos) 
>         { 
>                 if (iPos == stdbs::npos) 
>                         m_str.erase (); 
>                 if (iPos) 
>                         m_str.erase(0, iPos); 
>         } 
>         void TrimInternalR(stdbs::size_type iPos) 
>         { 
>                 if (iPos == stdbs::npos) 
>                         m_str.erase (); 
>                 m_str.erase(++iPos); 
>         } 
83,94c72,83
<     static int zslen(const TCHAR* lpsz) 
<     { 
<         if (!lpsz) return 0; 
< 
<         // we want to take into account the locale stuff (by using standard templates) 
< 
<         #ifdef _UNICODE 
<                 return (int)std::wstring(lpsz).length(); 
<         #else 
<                 return (int)std::string(lpsz).length(); 
<         #endif 
<     }         
---
>         static int zslen(const TCHAR* lpsz) 
>         { 
>                 if (!lpsz) return 0; 
> 
>                 // we want to take into account the locale stuff (by using standard templates) 
> 
>                 #ifdef _UNICODE 
>                         return (int)std::wstring(lpsz).length(); 
>                 #else 
>                         return (int)std::string(lpsz).length(); 
>                 #endif 
>         }         
96,102c85,91
<     static int zslen(const TCHAR* lpsz) 
<     { 
<         #if (__GNUC__ < 3) // I'm not sure which precisely version should be put here 
<             return lpsz ? (int)std::string_char_traits<TCHAR>::length(lpsz) : 0;
<         #else 
<             return lpsz ? (int)std::char_traits<TCHAR>::length(lpsz) : 0;
<         #endif 
---
>            static int zslen(const TCHAR* lpsz) 
>            { 
>                   #if (__GNUC__ < 3) // I'm not sure which precisely version should be put here 
>                       return lpsz ? std::string_char_traits<TCHAR>::length(lpsz) : 0; 
>                 #else 
>                       return lpsz ? std::char_traits<TCHAR>::length(lpsz) : 0; 
>                 #endif 
104c93
< 	}         
---
>         }         
107,116c96,107
< 	static TCHAR tl(TCHAR c) 
< 	{ 
< 			// use_facet doesn't work here well (doesn't convert all the local characters properly) 
< 		return std::tolower(c, m_gCurrentLocale); 
< 	} 
< 	static TCHAR tu(TCHAR c) 
< 	{ 
< 			// use_facet doesn't work here well (doesn't convert all the local characters properly) 
< 		return std::toupper(c, m_gCurrentLocale); 
< 	} 
---
> 
> 
> static TCHAR tl(TCHAR c) 
> { 
>         // use_facet doesn't work here well (doesn't convert all the local characters properly) 
>         return std::tolower(c, std::locale()); 
> } 
> static TCHAR tu(TCHAR c) 
> { 
>         // use_facet doesn't work here well (doesn't convert all the local characters properly) 
>         return std::toupper(c, std::locale()); 
> } 
119,130c110,121
<     CZipString(){} 
<     explicit CZipString (TCHAR ch, int nRepeat = 1):m_str(nRepeat, ch){} 
< 	CZipString( const CZipString& stringSrc ) {m_str.assign(stringSrc.m_str);} 
<     CZipString( const stdbs& stringSrc ) {m_str.assign(stringSrc);} 
<     CZipString( LPCTSTR lpsz ){if (!lpsz) Empty(); else m_str.assign(lpsz);} 
<     operator LPCTSTR() const{return m_str.c_str();} 		
< 	operator stdbs&() {return m_str;} 
< 	operator const stdbs&() const {return m_str;} 
< 	void SetString(const stdbs& stringSrc)
< 	{
< 		m_str = stringSrc;
< 	}
---
>         CZipString(){} 
>         explicit CZipString (TCHAR ch, int nRepeat = 1):m_str(nRepeat, ch){} 
> 		CZipString( const CZipString& stringSrc ) {m_str.assign(stringSrc.m_str);} 
>         CZipString( const stdbs& stringSrc ) {m_str.assign(stringSrc);} 
>         CZipString( LPCTSTR lpsz ){if (!lpsz) Empty(); else m_str.assign(lpsz);} 
>         operator LPCTSTR() const{return m_str.c_str();} 		
> 		operator stdbs&() {return m_str;} 
> 		operator const stdbs&() const {return m_str;} 
> 		void SetString(stdbs& stringSrc)
> 		{
> 			m_str = stringSrc;
> 		}
132,181c123,172
<     int GetLength() const {return (int) m_str.size();} 
<     bool IsEmpty() const {return m_str.empty();} 
<     void Empty() {m_str.erase(m_str.begin(), m_str.end());} 
<     TCHAR GetAt (int iIndex) const{return m_str.at(iIndex);} 
<     TCHAR operator[] (int iIndex) const{return m_str.at(iIndex);} 
<     void SetAt( int nIndex, TCHAR ch ) {m_str.at(nIndex) = ch;} 
<     LPTSTR GetBuffer(int nMinBufLength) 
<     { 
< 		if ((int)m_str.size() < nMinBufLength) 
< 				m_str.resize(nMinBufLength); 
< 		return m_str.empty() ? const_cast<TCHAR*>(m_str.data()) : &(m_str.at(0)); 
<     } 
<     void ReleaseBuffer( int nNewLength = -1 ) { m_str.resize(nNewLength > -1 ? nNewLength : zslen(m_str.c_str()));} 
<     void TrimLeft( TCHAR chTarget ) 
<     { 
< 		TrimInternalL(m_str.find_first_not_of(chTarget)); 
<     } 
<     void TrimLeft( LPCTSTR lpszTargets ) 
<     { 
< 		TrimInternalL(m_str.find_first_not_of(lpszTargets)); 
<     } 
<     void TrimRight( TCHAR chTarget ) 
<     { 
< 		TrimInternalR(m_str.find_last_not_of(chTarget)); 
<     } 
<     void TrimRight( LPCTSTR lpszTargets ) 
<     { 
< 		TrimInternalR(m_str.find_last_not_of(lpszTargets)); 
<     } 
< 
<     CZipString& operator+=(TCHAR str) 
< 	{
< 		return operator+=(CZipString(str));        
< 	} 
< 
<     CZipString& operator+=(const CZipString& str) 
< 	{
< 		m_str += str.m_str;
< 		return *this; 
< 	} 
< 
<     CZipString& operator+=(const stdbs& str)
< 	{ 
< 		return operator+=(CZipString(str));        
< 	} 
< 
<     CZipString& operator+=(LPCTSTR str)
< 	{
< 		return operator+=(CZipString(str)); 
< 	} 
---
>         int GetLength() const {return (int) m_str.size();} 
>         bool IsEmpty() const {return m_str.empty();} 
>         void Empty() {m_str.erase(m_str.begin(), m_str.end());} 
>         TCHAR GetAt (int iIndex) const{return m_str.at(iIndex);} 
>         TCHAR operator[] (int iIndex) const{return m_str.at(iIndex);} 
>         void SetAt( int nIndex, TCHAR ch ) {m_str.at(nIndex) = ch;} 
>         LPTSTR GetBuffer(int nMinBufLength) 
>         { 
>                 if ((int)m_str.size() < nMinBufLength) 
>                         m_str.resize(nMinBufLength); 
> 				return m_str.empty() ? const_cast<TCHAR*>(m_str.data()) : &(m_str.at(0)); 
>         } 
>         void ReleaseBuffer( int nNewLength = -1 ) { m_str.resize(nNewLength > -1 ? nNewLength : zslen(m_str.c_str()));} 
>         void TrimLeft( TCHAR chTarget ) 
>         { 
>                 TrimInternalL(m_str.find_first_not_of(chTarget)); 
>         } 
>         void TrimLeft( LPCTSTR lpszTargets ) 
>         { 
>                 TrimInternalL(m_str.find_first_not_of(lpszTargets)); 
>         } 
>         void TrimRight( TCHAR chTarget ) 
>         { 
>                 TrimInternalR(m_str.find_last_not_of(chTarget)); 
>         } 
>         void TrimRight( LPCTSTR lpszTargets ) 
>         { 
>                 TrimInternalR(m_str.find_last_not_of(lpszTargets)); 
>         } 
> 
>         CZipString& operator+=(TCHAR str) 
> 		{
> 			return operator+=(CZipString(str));        
> 		} 
> 
>         CZipString& operator+=(const CZipString& str) 
> 		{
> 			m_str += str.m_str;
> 			return *this; 
> 		} 
> 
>         CZipString& operator+=(const stdbs& str)
> 		{ 
> 			return operator+=(CZipString(str));        
> 		} 
> 
>         CZipString& operator+=(LPCTSTR str)
> 		{
> 			return operator+=(CZipString(str)); 
> 		} 
183,201c174,192
<     CZipString operator+(TCHAR str) const 
< 	{
< 		return operator+(CZipString(str));        
< 	} 
< 
<     CZipString operator+(const CZipString& str) const 
< 	{
< 		return CZipString(m_str + str.m_str);
< 	} 
< 
<     CZipString operator+(const stdbs& str) const
< 	{
< 		return operator+(CZipString(str)); 		
< 	} 
< 
<     CZipString operator+(LPCTSTR str) const
< 	{ 
< 		return operator+(CZipString(str)); 
< 	} 
---
>         CZipString operator+(TCHAR str) const 
> 		{
> 			return operator+(CZipString(str));        
> 		} 
> 
>         CZipString operator+(const CZipString& str) const 
> 		{
> 			return CZipString(m_str + str.m_str);
> 		} 
> 
>         CZipString operator+(const stdbs& str) const
> 		{
> 			return operator+(CZipString(str)); 		
> 		} 
> 
>         CZipString operator+(LPCTSTR str) const
> 		{ 
> 			return operator+(CZipString(str)); 
> 		} 
205,209c196,197
<     #pragma warning( push ) 
<     #pragma warning (disable : 4793) // 'vararg' : causes native code generation for function 'void CZipString::Format(LPCTSTR,...)' 
< #if _MSC_VER > 1310 
< 	#pragma warning (disable : 6001)
< #endif
---
>         #pragma warning( push ) 
>         #pragma warning (disable : 4793) // 'vararg' : causes native code generation for function 'void CZipString::Format(LPCTSTR,...)' 
212,221c200,209
< 	void Format(LPCTSTR lpszFormat, ...) 
< 	{ 
< 		va_list arguments; 
< 		va_start (arguments, lpszFormat); 
< 		TCHAR* pBuf = NULL; 
< 		int iCounter = 1, uTotal = 0; 
< 		do 
< 		{ 
< 				int nChars = iCounter * 1024; 
< 				const int nLen = sizeof(TCHAR) * nChars; 
---
>         void Format(LPCTSTR lpszFormat, ...) 
>         { 
>                 va_list arguments; 
>                 va_start (arguments, lpszFormat); 
>                 TCHAR* pBuf = NULL; 
>                 int iCounter = 1, uTotal = 0; 
>                 do 
>                 { 
>                         int nChars = iCounter * 1024; 
>                         int nLen = sizeof(TCHAR) * nChars; 
223,237c211,225
< 				TCHAR* pTempBuf = (TCHAR*)realloc((void*)pBuf, nLen);                         
< 				if (!pTempBuf) 
< 				{ 
< 						if (pBuf != NULL) 
< 								free(pBuf); 
< 						va_end (arguments); 
< 						return; 
< 				} 
< 				pBuf = pTempBuf; 
< 
< 	#if _MSC_VER >= 1400         
< 				uTotal = _vsntprintf_s(pBuf, nChars, nChars - 1, lpszFormat, arguments); 
< 	#else 
< 				uTotal = _vsntprintf(pBuf, nChars - 1, lpszFormat, arguments); 
< 	#endif 
---
>                         TCHAR* pTempBuf = (TCHAR*)realloc((void*)pBuf, nLen);                         
>                         if (!pTempBuf) 
>                         { 
>                                 if (pBuf != NULL) 
>                                         free(pBuf); 
>                                 va_end (arguments); 
>                                 return; 
>                         } 
>                         pBuf = pTempBuf; 
> 
> #if _MSC_VER >= 1400         
>                         uTotal = _vsntprintf_s(pBuf, nChars, nChars - 1, lpszFormat, arguments); 
> #else 
>                         uTotal = _vsntprintf(pBuf, nChars - 1, lpszFormat, arguments); 
> #endif 
239,250c227,238
< 				if (uTotal == -1 || (uTotal == nChars - 1) ) // for some implementations 
< 				{ 
< 						pBuf[nChars - 1] = _T('\0'); 
< 						if (iCounter == 7) 
< 								break; 
< 				} 
< 				else 
< 				{ 
< 						pBuf[uTotal] = _T('\0'); 
< 						break; 
< 				} 
< 				iCounter++; 
---
>                         if (uTotal == -1 || (uTotal == nChars - 1) ) // for some implementations 
>                         { 
>                                 pBuf[nChars - 1] = _T('\0'); 
>                                 if (iCounter == 7) 
>                                         break; 
>                         } 
>                         else 
>                         { 
>                                 pBuf[uTotal] = _T('\0'); 
>                                 break; 
>                         } 
>                         iCounter++; 
252,253c240
< 		} 
< 		while (true); 
---
>                 } while (true); 
255,258c242,245
< 		va_end (arguments); 
< 		*this = pBuf; 
< 		free(pBuf); 
< 	} 
---
>                 va_end (arguments); 
>             *this = pBuf; 
>                 free(pBuf); 
>         } 
261c248
< 	#pragma warning( pop ) 
---
>         #pragma warning( pop ) 
264,270c251,253
<     void Insert( int nIndex, LPCTSTR pstr ){m_str.insert(nIndex, pstr, zslen(pstr));} 
<     void Insert( int nIndex, TCHAR ch ) {m_str.insert(nIndex, 1, ch);} 
<     int Delete( int nIndex, int nCount = 1 ) 
<     { 
<         int iSize = (int) m_str.size(); 
<         int iToDelete = iSize < nIndex + nCount ? iSize - nIndex : nCount; 
<         if (iToDelete > 0) 
---
>         void Insert( int nIndex, LPCTSTR pstr ){m_str.insert(nIndex, pstr, zslen(pstr));} 
>         void Insert( int nIndex, TCHAR ch ) {m_str.insert(nIndex, 1, ch);} 
>         int Delete( int nIndex, int nCount = 1 ) 
272,273c255,262
<                 m_str.erase(nIndex, iToDelete); 
<                 iSize -= iToDelete; 
---
>                 int iSize = (int) m_str.size(); 
>                 int iToDelete = iSize < nIndex + nCount ? iSize - nIndex : nCount; 
>                 if (iToDelete > 0) 
>                 { 
>                         m_str.erase(nIndex, iToDelete); 
>                         iSize -= iToDelete; 
>                 } 
>                 return iSize; 
275,276d263
<         return iSize; 
<     } 
278,285c265,272
<     void MakeLower() 
<     { 
< 		std::transform(m_str.begin(),m_str.end(),m_str.begin(),tl); 
<     } 
<     void MakeUpper() 
<     { 
< 		std::transform(m_str.begin(),m_str.end(),m_str.begin(),tu); 
<     } 
---
>         void MakeLower() 
>         { 
>                         std::transform(m_str.begin(),m_str.end(),m_str.begin(),tl); 
>         } 
>         void MakeUpper() 
>         { 
>                         std::transform(m_str.begin(),m_str.end(),m_str.begin(),tu); 
>         } 
287,294c274,281
<     void MakeLower() 
<     { 
< 		std::transform(m_str.begin(),m_str.end(),m_str.begin(),tolower); 
<     } 
<     void MakeUpper() 
<     { 
< 		std::transform(m_str.begin(),m_str.end(),m_str.begin(),toupper); 
<     } 
---
>         void MakeLower() 
>         { 
>                         std::transform(m_str.begin(),m_str.end(),m_str.begin(),tolower); 
>         } 
>         void MakeUpper() 
>         { 
>                         std::transform(m_str.begin(),m_str.end(),m_str.begin(),toupper); 
>         } 
296,310c283,298
<     void MakeReverse() 
<     { 
<             std::reverse(m_str.begin(), m_str.end()); 
<     } 
<     CZipString Left( int nCount ) const { return m_str.substr(0, nCount);} 
<     CZipString Right( int nCount) const 
<     { 
< 	int s = (int)m_str.size();
< 	nCount = s < nCount ? s : nCount;
< 	return m_str.substr(s - nCount);
<     } 
<     CZipString Mid( int nFirst ) const {return m_str.substr(nFirst);} 
<     CZipString Mid( int nFirst, int nCount ) const {return m_str.substr(nFirst, nCount);} 
<     int Collate( LPCTSTR lpsz ) const 
<     { 
---
>         void MakeReverse() 
>         { 
>                 std::reverse(m_str.begin(), m_str.end()); 
> 
>         } 
>         CZipString Left( int nCount ) const { return m_str.substr(0, nCount);} 
>         CZipString Right( int nCount) const 
>         { 
> 			int s = (int)m_str.size();
> 			nCount = s < nCount ? s : nCount;
> 			return m_str.substr(s - nCount);
>         } 
>         CZipString Mid( int nFirst ) const {return m_str.substr(nFirst);} 
>         CZipString Mid( int nFirst, int nCount ) const {return m_str.substr(nFirst, nCount);} 
>         int Collate( LPCTSTR lpsz ) const 
>         { 
312c300
< 		return _tcscoll(m_str.c_str(), lpsz); 
---
>                 return _tcscoll(m_str.c_str(), lpsz); 
314,318c302,303
< 	#ifdef _UNICODE                
< 		return wcscoll(m_str.c_str(), lpsz); 
< 	#else
< 		return strcoll(m_str.c_str(), lpsz); 
< 	#endif
---
>                  //return m_str.compare(lpsz); 
>                 return strcoll(m_str.c_str(), lpsz); 
320c305
<      } 
---
>         } 
322,323c307,308
< 	int CollateNoCase( LPCTSTR lpsz ) const 
<     { 
---
>         int CollateNoCase( LPCTSTR lpsz ) const 
>         { 
325c310
< 		return _tcsicoll(m_str.c_str(), lpsz); 
---
>                 return _tcsicoll(m_str.c_str(), lpsz); 
327,335c312,317
< 	#ifndef _UNICODE
< 		if (m_gGlobalLocale == m_gClassicLocale) 
< 			return strcasecmp(m_str.c_str(), lpsz); 
< 	#endif
< 		CZipString first(m_str.c_str());
< 		CZipString second(lpsz);
< 		first.MakeLower();
< 		second.MakeLower();
< 		return first.Collate(second);
---
>                 if (std::locale() == std::locale::classic()) 
>                         return strcasecmp(m_str.c_str(), lpsz); 
>                 else 
>                         // this may be not case-insensitive !!! 
>                         return strcoll(m_str.c_str(), lpsz); 
>                         //return stricoll(m_str.c_str(), lpsz); 
337c319
< 	} 
---
>         } 
339,342c321,324
< 	int Compare( LPCTSTR lpsz ) const 
< 	{ 
< 			return m_str.compare(lpsz); 
< 	} 
---
>         int Compare( LPCTSTR lpsz ) const 
>         { 
>                 return m_str.compare(lpsz); 
>         } 
344,345c326,327
< 	int CompareNoCase( LPCTSTR lpsz ) const 
< 	{ 
---
>         int CompareNoCase( LPCTSTR lpsz ) const 
>         { 
347c329
< 		return _tcsicmp(m_str.c_str(), lpsz); 
---
>                 return _tcsicmp(m_str.c_str(), lpsz); 
349,357c331,332
< 	#ifndef _UNICODE			
< 		return strcasecmp(m_str.c_str(), lpsz); 
< 	#else
< 		CZipString first(m_str.c_str());
< 		CZipString second(lpsz);
< 		first.MakeLower();
< 		second.MakeLower();
< 		return first.Compare(second);
< 	#endif
---
>                 return strcasecmp(m_str.c_str(), lpsz); 
>                 //return stricmp(m_str.c_str(), lpsz); 
359c334
< 	} 
---
>         } 
361,389c336,364
< 	bool operator != (LPCTSTR lpsz) 
< 	{ 
< 		return Compare(lpsz) != 0; 
< 	} 
< 	bool operator == (LPCTSTR lpsz) 
< 	{ 
< 		return Compare(lpsz) == 0; 
< 	} 
< 	int Find( TCHAR ch, int nStart = 0) const 
< 	{ 
< 		return (int) m_str.find(ch, nStart); 
< 	} 
< 
< 	int Find( LPCTSTR pstr, int nStart = 0) const 
< 	{ 
< 		return (int) m_str.find(pstr, nStart); 
< 	} 
< 
< 	int Replace( TCHAR chOld, TCHAR chNew ) 
< 	{ 
< 		int iCount = 0; 
< 		for (stdbs::iterator it = m_str.begin(); it != m_str.end(); ++it) 
< 				if (*it == chOld) 
< 				{ 
< 						*it = chNew; 
< 						iCount++; 
< 				} 
< 		return iCount; 
< 	}         
---
>         bool operator != (LPCTSTR lpsz) 
>         { 
>                 return Compare(lpsz) != 0; 
>         } 
>         bool operator == (LPCTSTR lpsz) 
>         { 
>                 return Compare(lpsz) == 0; 
>         } 
>         int Find( TCHAR ch, int nStart = 0) const 
>         { 
>                 return (int) m_str.find(ch, nStart); 
>         } 
> 
>         int Find( LPCTSTR pstr, int nStart = 0) const 
>         { 
>                 return (int) m_str.find(pstr, nStart); 
>         } 
> 
>         int Replace( TCHAR chOld, TCHAR chNew ) 
>         { 
>                 int iCount = 0; 
>                 for (stdbs::iterator it = m_str.begin(); it != m_str.end(); ++it) 
>                         if (*it == chOld) 
>                         { 
>                                 *it = chNew; 
>                                 iCount++; 
>                         } 
>                 return iCount; 
>         }         
diff -r source-ziparchive_src.zip-extracted/ZipArchive/ZipStringStoreSettings.h lookaside-ziparchive_src.zip-extracted/ZipArchive/ZipStringStoreSettings.h
2,3c2,3
< // This source file is part of the ZipArchive Library Open Source distribution 
< // and is Copyrighted 2000 - 2022 by Artpol Software - Tadeusz Dracz
---
> // This source file is part of the ZipArchive library source distribution and
> // is Copyrighted 2000 - 2011 by Artpol Software - Tadeusz Dracz
12c12
< // Web Site: https://www.artpol-software.com
---
> // Web Site: http://www.artpol-software.com
51d50
< #pragma warning(suppress: 26495)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/zlib/adler32.c lookaside-ziparchive_src.zip-extracted/ZipArchive/zlib/adler32.c
2c2
<  * Copyright (C) 1995-2011, 2016 Mark Adler
---
>  * Copyright (C) 1995-2007 Mark Adler
10c10
< local uLong adler32_combine_ OF((uLong adler1, uLong adler2, z_off64_t len2));
---
> #define local static
12c12,14
< #define BASE 65521U     /* largest prime smaller than 65536 */
---
> local uLong adler32_combine_(uLong adler1, uLong adler2, z_off64_t len2);
> 
> #define BASE 65521UL    /* largest prime smaller than 65536 */
22,23c24
< /* use NO_DIVIDE if your processor does not do division in hardware --
<    try it both ways to see which is faster */
---
> /* use NO_DIVIDE if your processor does not do division in hardware */
25,33c26
< /* note that this assumes BASE is 65521, where 65536 % 65521 == 15
<    (thank you to John Reiser for pointing this out) */
< #  define CHOP(a) \
<     do { \
<         unsigned long tmp = a >> 16; \
<         a &= 0xffffUL; \
<         a += (tmp << 4) - tmp; \
<     } while (0)
< #  define MOD28(a) \
---
> #  define MOD(a) \
35c28,43
<         CHOP(a); \
---
>         if (a >= (BASE << 16)) a -= (BASE << 16); \
>         if (a >= (BASE << 15)) a -= (BASE << 15); \
>         if (a >= (BASE << 14)) a -= (BASE << 14); \
>         if (a >= (BASE << 13)) a -= (BASE << 13); \
>         if (a >= (BASE << 12)) a -= (BASE << 12); \
>         if (a >= (BASE << 11)) a -= (BASE << 11); \
>         if (a >= (BASE << 10)) a -= (BASE << 10); \
>         if (a >= (BASE << 9)) a -= (BASE << 9); \
>         if (a >= (BASE << 8)) a -= (BASE << 8); \
>         if (a >= (BASE << 7)) a -= (BASE << 7); \
>         if (a >= (BASE << 6)) a -= (BASE << 6); \
>         if (a >= (BASE << 5)) a -= (BASE << 5); \
>         if (a >= (BASE << 4)) a -= (BASE << 4); \
>         if (a >= (BASE << 3)) a -= (BASE << 3); \
>         if (a >= (BASE << 2)) a -= (BASE << 2); \
>         if (a >= (BASE << 1)) a -= (BASE << 1); \
38c46
< #  define MOD(a) \
---
> #  define MOD4(a) \
40,53c48,51
<         CHOP(a); \
<         MOD28(a); \
<     } while (0)
< #  define MOD63(a) \
<     do { /* this assumes a is not negative */ \
<         z_off64_t tmp = a >> 32; \
<         a &= 0xffffffffL; \
<         a += (tmp << 8) - (tmp << 5) + tmp; \
<         tmp = a >> 16; \
<         a &= 0xffffL; \
<         a += (tmp << 4) - tmp; \
<         tmp = a >> 16; \
<         a &= 0xffffL; \
<         a += (tmp << 4) - tmp; \
---
>         if (a >= (BASE << 4)) a -= (BASE << 4); \
>         if (a >= (BASE << 3)) a -= (BASE << 3); \
>         if (a >= (BASE << 2)) a -= (BASE << 2); \
>         if (a >= (BASE << 1)) a -= (BASE << 1); \
58,59c56
< #  define MOD28(a) a %= BASE
< #  define MOD63(a) a %= BASE
---
> #  define MOD4(a) a %= BASE
63c60
< uLong ZEXPORT adler32_z(adler, buf, len)
---
> uLong ZEXPORT adler32(adler, buf, len)
66c63
<     z_size_t len;
---
>     uInt len;
98c95
<         MOD28(sum2);            /* only added so many BASE's */
---
>         MOD4(sum2);             /* only added so many BASE's */
134,142d130
< uLong ZEXPORT adler32(adler, buf, len)
<     uLong adler;
<     const Bytef *buf;
<     uInt len;
< {
<     return adler32_z(adler, buf, len);
< }
< 
< /* ========================================================================= */
152,155d139
<     /* for negative len, return invalid adler32 as a clue for debugging */
<     if (len2 < 0)
<         return 0xffffffffUL;
< 
157,158c141
<     MOD63(len2);                /* assumes len2 >= 0 */
<     rem = (unsigned)len2;
---
>     rem = (unsigned)(len2 % BASE);
166c149
<     if (sum2 >= ((unsigned long)BASE << 1)) sum2 -= ((unsigned long)BASE << 1);
---
>     if (sum2 >= (BASE << 1)) sum2 -= (BASE << 1);
179,180c162
< // TD CHANGE: for Code Analysis
< #pragma warning(suppress: 28278)
---
> 
diff -r source-ziparchive_src.zip-extracted/ZipArchive/zlib/compress.c lookaside-ziparchive_src.zip-extracted/ZipArchive/zlib/compress.c
2c2
<  * Copyright (C) 1995-2005, 2014, 2016 Jean-loup Gailly, Mark Adler
---
>  * Copyright (C) 1995-2005 Jean-loup Gailly.
22c22
< int ZEXPORT compress2(dest, destLen, source, sourceLen, level)
---
> int ZEXPORT compress2 (dest, destLen, source, sourceLen, level)
31,32d30
<     const uInt max = (uInt)-1;
<     uLong left;
34,35c32,40
<     left = *destLen;
<     *destLen = 0;
---
>     stream.next_in = (Bytef*)source;
>     stream.avail_in = (uInt)sourceLen;
> #ifdef MAXSEG_64K
>     /* Check for source > 64K on 16-bit machine: */
>     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
> #endif
>     stream.next_out = dest;
>     stream.avail_out = (uInt)*destLen;
>     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
44,60c49,53
<     stream.next_out = dest;
<     stream.avail_out = 0;
<     stream.next_in = (z_const Bytef *)source;
<     stream.avail_in = 0;
< 
<     do {
<         if (stream.avail_out == 0) {
<             stream.avail_out = left > (uLong)max ? max : (uInt)left;
<             left -= stream.avail_out;
<         }
<         if (stream.avail_in == 0) {
<             stream.avail_in = sourceLen > (uLong)max ? max : (uInt)sourceLen;
<             sourceLen -= stream.avail_in;
<         }
<         err = deflate(&stream, sourceLen ? Z_NO_FLUSH : Z_FINISH);
<     } while (err == Z_OK);
< 
---
>     err = deflate(&stream, Z_FINISH);
>     if (err != Z_STREAM_END) {
>         deflateEnd(&stream);
>         return err == Z_OK ? Z_BUF_ERROR : err;
>     }
62,63c55,57
<     deflateEnd(&stream);
<     return err == Z_STREAM_END ? Z_OK : err;
---
> 
>     err = deflateEnd(&stream);
>     return err;
68c62
< int ZEXPORT compress(dest, destLen, source, sourceLen)
---
> int ZEXPORT compress (dest, destLen, source, sourceLen)
81c75
< uLong ZEXPORT compressBound(sourceLen)
---
> uLong ZEXPORT compressBound (sourceLen)
diff -r source-ziparchive_src.zip-extracted/ZipArchive/zlib/crc32.c lookaside-ziparchive_src.zip-extracted/ZipArchive/zlib/crc32.c
2c2
<  * Copyright (C) 1995-2022 Mark Adler
---
>  * Copyright (C) 1995-2006, 2010 Mark Adler
5,7c5,9
<  * This interleaved implementation of a CRC makes use of pipelined multiple
<  * arithmetic-logic units, commonly found in modern CPU cores. It is due to
<  * Kadatch and Jenkins (2010). See doc/crc-doc.1.0.pdf in this distribution.
---
>  * Thanks to Rodney Brown <rbrown64@csc.com.au> for his contribution of faster
>  * CRC methods: exclusive-oring 32 bits of data at a time, and pre-computing
>  * tables for updating the shift register in one step with three exclusive-ors
>  * instead of four steps with four exclusive-ors.  This results in about a
>  * factor of two increase in speed on a Power PC G4 (PPC7455) using gcc -O3.
15c17
<   of the crc tables. Therefore, if you #define DYNAMIC_CRC_TABLE, you should
---
>   of the crc tables.  Therefore, if you #define DYNAMIC_CRC_TABLE, you should
18,20d19
< 
<   MAKECRCH can be #defined to write out crc32.h. A main() routine is also
<   produced, so that this one source file can be compiled to an executable.
30,51c29
< #include "zutil.h"      /* for Z_U4, Z_U8, z_crc_t, and FAR definitions */
< 
<  /*
<   A CRC of a message is computed on N braids of words in the message, where
<   each word consists of W bytes (4 or 8). If N is 3, for example, then three
<   running sparse CRCs are calculated respectively on each braid, at these
<   indices in the array of words: 0, 3, 6, ..., 1, 4, 7, ..., and 2, 5, 8, ...
<   This is done starting at a word boundary, and continues until as many blocks
<   of N * W bytes as are available have been processed. The results are combined
<   into a single CRC at the end. For this code, N must be in the range 1..6 and
<   W must be 4 or 8. The upper limit on N can be increased if desired by adding
<   more #if blocks, extending the patterns apparent in the code. In addition,
<   crc32.h would need to be regenerated, if the maximum N value is increased.
< 
<   N and W are chosen empirically by benchmarking the execution time on a given
<   processor. The choices for N and W below were based on testing on Intel Kaby
<   Lake i7, AMD Ryzen 7, ARM Cortex-A57, Sparc64-VII, PowerPC POWER9, and MIPS64
<   Octeon II processors. The Intel, AMD, and ARM processors were all fastest
<   with N=5, W=8. The Sparc, PowerPC, and MIPS64 were all fastest at N=5, W=4.
<   They were all tested with either gcc or clang, all using the -O3 optimization
<   level. Your mileage may vary.
<  */
---
> #include "zutil.h"      /* for STDC and FAR definitions */
53,67c31
< /* Define N */
< #ifdef Z_TESTN
< #  define N Z_TESTN
< #else
< #  define N 5
< #endif
< #if N < 1 || N > 6
< #  error N must be in 1..6
< #endif
< 
< /*
<   z_crc_t must be at least 32 bits. z_word_t must be at least as long as
<   z_crc_t. It is assumed here that z_word_t is either 32 bits or 64 bits, and
<   that bytes are eight bits.
<  */
---
> #define local static
69,83c33,39
< /*
<   Define W and the associated z_word_t type. If W is not defined, then a
<   braided calculation is not used, and the associated tables and code are not
<   compiled.
<  */
< #ifdef Z_TESTW
< #  if Z_TESTW-1 != -1
< #    define W Z_TESTW
< #  endif
< #else
< #  ifdef MAKECRCH
< #    define W 8         /* required for MAKECRCH */
< #  else
< #    if defined(__x86_64__) || defined(__aarch64__)
< #      define W 8
---
> /* Find a four-byte integer type for crc32_little() and crc32_big(). */
> #ifndef NOBYFOUR
> #  ifdef STDC           /* need ANSI C limits.h to determine sizes */
> #    include <limits.h>
> #    define BYFOUR
> #    if (UINT_MAX == 0xffffffffUL)
>        typedef unsigned int u4;
85c41,49
< #      define W 4
---
> #      if (ULONG_MAX == 0xffffffffUL)
>          typedef unsigned long u4;
> #      else
> #        if (USHRT_MAX == 0xffffffffUL)
>            typedef unsigned short u4;
> #        else
> #          undef BYFOUR     /* can't find a four-byte integer type! */
> #        endif
> #      endif
87,117c51,52
< #  endif
< #endif
< #ifdef W
< #  if W == 8 && defined(Z_U8)
<      typedef Z_U8 z_word_t;
< #  elif defined(Z_U4)
< #    undef W
< #    define W 4
<      typedef Z_U4 z_word_t;
< #  else
< #    undef W
< #  endif
< #endif
< 
< /* If available, use the ARM processor CRC32 instruction. */
< #if defined(__aarch64__) && defined(__ARM_FEATURE_CRC32) && W == 8
< #  define ARMCRC32
< #endif
< 
< /* Local functions. */
< local z_crc_t multmodp OF((z_crc_t a, z_crc_t b));
< local z_crc_t x2nmodp OF((z_off64_t n, unsigned k));
< 
< #if defined(W) && (!defined(ARMCRC32) || defined(DYNAMIC_CRC_TABLE))
<     local z_word_t byte_swap OF((z_word_t word));
< #endif
< 
< #if defined(W) && !defined(ARMCRC32)
<     local z_crc_t crc_word OF((z_word_t data));
<     local z_word_t crc_word_big OF((z_word_t data));
< #endif
---
> #  endif /* STDC */
> #endif /* !NOBYFOUR */
119,147c54,71
< #if defined(W) && (!defined(ARMCRC32) || defined(DYNAMIC_CRC_TABLE))
< /*
<   Swap the bytes in a z_word_t to convert between little and big endian. Any
<   self-respecting compiler will optimize this to a single machine byte-swap
<   instruction, if one is available. This assumes that word_t is either 32 bits
<   or 64 bits.
<  */
< local z_word_t byte_swap(word)
<     z_word_t word;
< {
< #  if W == 8
<     return
<         (word & 0xff00000000000000) >> 56 |
<         (word & 0xff000000000000) >> 40 |
<         (word & 0xff0000000000) >> 24 |
<         (word & 0xff00000000) >> 8 |
<         (word & 0xff000000) << 8 |
<         (word & 0xff0000) << 24 |
<         (word & 0xff00) << 40 |
<         (word & 0xff) << 56;
< #  else   /* W == 4 */
<     return
<         (word & 0xff000000) >> 24 |
<         (word & 0xff0000) >> 8 |
<         (word & 0xff00) << 8 |
<         (word & 0xff) << 24;
< #  endif
< }
< #endif
---
> /* Definitions for doing the crc four data bytes at a time. */
> #ifdef BYFOUR
> #  define REV(w) ((((w)>>24)&0xff)+(((w)>>8)&0xff00)+ \
>                 (((w)&0xff00)<<8)+(((w)&0xff)<<24))
>    local unsigned long crc32_little OF((unsigned long,
>                         const unsigned char FAR *, unsigned));
>    local unsigned long crc32_big OF((unsigned long,
>                         const unsigned char FAR *, unsigned));
> #  define TBLS 8
> #else
> #  define TBLS 1
> #endif /* BYFOUR */
> 
> /* Local functions for crc concatenation */
> local unsigned long gf2_matrix_times OF((unsigned long *mat,
>                                          unsigned long vec));
> local void gf2_matrix_square OF((unsigned long *square, unsigned long *mat));
> local uLong crc32_combine_(uLong crc1, uLong crc2, z_off64_t len2);
149,150d72
< /* CRC polynomial. */
< #define POLY 0xedb88320         /* p(x) reflected, with x^32 implied */
154,155c76,77
< local z_crc_t FAR crc_table[256];
< local z_crc_t FAR x2n_table[32];
---
> local volatile int crc_table_empty = 1;
> local unsigned long FAR crc_table[TBLS][256];
157,162d78
< #ifdef W
<    local z_word_t FAR crc_big_table[256];
<    local z_crc_t FAR crc_braid_table[W][256];
<    local z_word_t FAR crc_braid_big_table[W][256];
<    local void braid OF((z_crc_t [][256], z_word_t [][256], int, int));
< #endif
164,166c80
<    local void write_table OF((FILE *, const z_crc_t FAR *, int));
<    local void write_table32hi OF((FILE *, const z_word_t FAR *, int));
<    local void write_table64 OF((FILE *, const z_word_t FAR *, int));
---
>    local void write_table OF((FILE *, const unsigned long FAR *));
168,256d81
< 
< /*
<   Define a once() function depending on the availability of atomics. If this is
<   compiled with DYNAMIC_CRC_TABLE defined, and if CRCs will be computed in
<   multiple threads, and if atomics are not available, then get_crc_table() must
<   be called to initialize the tables and must return before any threads are
<   allowed to compute or combine CRCs.
<  */
< 
< /* Definition of once functionality. */
< typedef struct once_s once_t;
< local void once OF((once_t *, void (*)(void)));
< 
< /* Check for the availability of atomics. */
< #if defined(__STDC__) && __STDC_VERSION__ >= 201112L && \
<     !defined(__STDC_NO_ATOMICS__)
< 
< #include <stdatomic.h>
< 
< /* Structure for once(), which must be initialized with ONCE_INIT. */
< struct once_s {
<     atomic_flag begun;
<     atomic_int done;
< };
< #define ONCE_INIT {ATOMIC_FLAG_INIT, 0}
< 
< /*
<   Run the provided init() function exactly once, even if multiple threads
<   invoke once() at the same time. The state must be a once_t initialized with
<   ONCE_INIT.
<  */
< local void once(state, init)
<     once_t *state;
<     void (*init)(void);
< {
<     if (!atomic_load(&state->done)) {
<         if (atomic_flag_test_and_set(&state->begun))
<             while (!atomic_load(&state->done))
<                 ;
<         else {
<             init();
<             atomic_store(&state->done, 1);
<         }
<     }
< }
< 
< #else   /* no atomics */
< 
< /* Structure for once(), which must be initialized with ONCE_INIT. */
< struct once_s {
<     volatile int begun;
<     volatile int done;
< };
< #define ONCE_INIT {0, 0}
< 
< /* Test and set. Alas, not atomic, but tries to minimize the period of
<    vulnerability. */
< local int test_and_set OF((int volatile *));
< local int test_and_set(flag)
<     int volatile *flag;
< {
<     int was;
< 
<     was = *flag;
<     *flag = 1;
<     return was;
< }
< 
< /* Run the provided init() function once. This is not thread-safe. */
< local void once(state, init)
<     once_t *state;
<     void (*init)(void);
< {
<     if (!state->done) {
<         if (test_and_set(&state->begun))
<             while (!state->done)
<                 ;
<         else {
<             init();
<             state->done = 1;
<         }
<     }
< }
< 
< #endif
< 
< /* State for once(). */
< local once_t made = ONCE_INIT;
< 
262c87
<   with the lowest powers in the most significant bit. Then adding polynomials
---
>   with the lowest powers in the most significant bit.  Then adding polynomials
264c89
<   one. If we call the above polynomial p, and represent a byte as the
---
>   one.  If we call the above polynomial p, and represent a byte as the
266c91
<   byte 0xb1 is the polynomial x^7+x^3+x^2+1), then the CRC is (q*x^32) mod p,
---
>   byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
270c95
<   taking the remainder. The register is initialized to zero, and for each
---
>   taking the remainder.  The register is initialized to zero, and for each
272,281c97,107
<   x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by x
<   (which is shifting right by one and adding x^32 mod p if the bit shifted out
<   is a one). We start with the highest power (least significant bit) of q and
<   repeat for all eight bits of q.
< 
<   The table is simply the CRC of all possible eight bit values. This is all the
<   information needed to generate CRCs on data a byte at a time for all
<   combinations of CRC register values and incoming bytes.
<  */
< 
---
>   x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
>   x (which is shifting right by one and adding x^32 mod p if the bit shifted
>   out is a one).  We start with the highest power (least significant bit) of
>   q and repeat for all eight bits of q.
> 
>   The first table is simply the CRC of all possible eight bit values.  This is
>   all the information needed to generate CRCs on data a byte at a time for all
>   combinations of CRC register values and incoming bytes.  The remaining tables
>   allow for word-at-a-time CRC calculation for both big-endian and little-
>   endian machines, where a word is four bytes.
> */
284,285c110,134
<     unsigned i, j, n;
<     z_crc_t p;
---
>     unsigned long c;
>     int n, k;
>     unsigned long poly;                 /* polynomial exclusive-or pattern */
>     /* terms of polynomial defining this crc (except x^32): */
>     static volatile int first = 1;      /* flag to limit concurrent making */
>     static const unsigned char p[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};
> 
>     /* See if another task is already doing this (not thread-safe, but better
>        than nothing -- significantly reduces duration of vulnerability in
>        case the advice about DYNAMIC_CRC_TABLE is ignored) */
>     if (first) {
>         first = 0;
> 
>         /* make exclusive-or pattern from polynomial (0xedb88320UL) */
>         poly = 0UL;
>         for (n = 0; n < sizeof(p)/sizeof(unsigned char); n++)
>             poly |= 1UL << (31 - p[n]);
> 
>         /* generate a crc for every 8-bit value */
>         for (n = 0; n < 256; n++) {
>             c = (unsigned long)n;
>             for (k = 0; k < 8; k++)
>                 c = c & 1 ? poly ^ (c >> 1) : c >> 1;
>             crc_table[0][n] = c;
>         }
287,296c136,148
<     /* initialize the CRC of bytes tables */
<     for (i = 0; i < 256; i++) {
<         p = i;
<         for (j = 0; j < 8; j++)
<             p = p & 1 ? (p >> 1) ^ POLY : p >> 1;
<         crc_table[i] = p;
< #ifdef W
<         crc_big_table[i] = byte_swap(p);
< #endif
<     }
---
> #ifdef BYFOUR
>         /* generate crc for each value followed by one, two, and three zeros,
>            and then the byte reversal of those as well as the first table */
>         for (n = 0; n < 256; n++) {
>             c = crc_table[0][n];
>             crc_table[4][n] = REV(c);
>             for (k = 1; k < 4; k++) {
>                 c = crc_table[0][c & 0xff] ^ (c >> 8);
>                 crc_table[k][n] = c;
>                 crc_table[k + 4][n] = REV(c);
>             }
>         }
> #endif /* BYFOUR */
298,307c150,156
<     /* initialize the x^2^n mod p(x) table */
<     p = (z_crc_t)1 << 30;         /* x^1 */
<     x2n_table[0] = p;
<     for (n = 1; n < 32; n++)
<         x2n_table[n] = p = multmodp(p, p);
< 
< #ifdef W
<     /* initialize the braiding tables -- needs x2n_table[] */
<     braid(crc_braid_table, crc_braid_big_table, N, W);
< #endif
---
>         crc_table_empty = 0;
>     }
>     else {      /* not first */
>         /* wait for the other guy to finish (not efficient, but rare) */
>         while (crc_table_empty)
>             ;
>     }
309a159
>     /* write out CRC tables to crc32.h */
311,319d160
<         /*
<           The crc32.h header file contains tables for both 32-bit and 64-bit
<           z_word_t's, and so requires a 64-bit type be available. In that case,
<           z_word_t must be defined to be 64-bits. This code then also generates
<           and writes out the tables for the case that z_word_t is 32 bits.
<          */
< #if !defined(W) || W != 8
< #  error Need a 64-bit integer type in order to generate crc32.h.
< #endif
321,323d161
<         int k, n;
<         z_crc_t ltl[8][256];
<         z_word_t big[8][256];
327,425c165,174
< 
<         /* write out little-endian CRC table to crc32.h */
<         fprintf(out,
<             "/* crc32.h -- tables for rapid CRC calculation\n"
<             " * Generated automatically by crc32.c\n */\n"
<             "\n"
<             "local const z_crc_t FAR crc_table[] = {\n"
<             "    ");
<         write_table(out, crc_table, 256);
<         fprintf(out,
<             "};\n");
< 
<         /* write out big-endian CRC table for 64-bit z_word_t to crc32.h */
<         fprintf(out,
<             "\n"
<             "#ifdef W\n"
<             "\n"
<             "#if W == 8\n"
<             "\n"
<             "local const z_word_t FAR crc_big_table[] = {\n"
<             "    ");
<         write_table64(out, crc_big_table, 256);
<         fprintf(out,
<             "};\n");
< 
<         /* write out big-endian CRC table for 32-bit z_word_t to crc32.h */
<         fprintf(out,
<             "\n"
<             "#else /* W == 4 */\n"
<             "\n"
<             "local const z_word_t FAR crc_big_table[] = {\n"
<             "    ");
<         write_table32hi(out, crc_big_table, 256);
<         fprintf(out,
<             "};\n"
<             "\n"
<             "#endif\n");
< 
<         /* write out braid tables for each value of N */
<         for (n = 1; n <= 6; n++) {
<             fprintf(out,
<             "\n"
<             "#if N == %d\n", n);
< 
<             /* compute braid tables for this N and 64-bit word_t */
<             braid(ltl, big, n, 8);
< 
<             /* write out braid tables for 64-bit z_word_t to crc32.h */
<             fprintf(out,
<             "\n"
<             "#if W == 8\n"
<             "\n"
<             "local const z_crc_t FAR crc_braid_table[][256] = {\n");
<             for (k = 0; k < 8; k++) {
<                 fprintf(out, "   {");
<                 write_table(out, ltl[k], 256);
<                 fprintf(out, "}%s", k < 7 ? ",\n" : "");
<             }
<             fprintf(out,
<             "};\n"
<             "\n"
<             "local const z_word_t FAR crc_braid_big_table[][256] = {\n");
<             for (k = 0; k < 8; k++) {
<                 fprintf(out, "   {");
<                 write_table64(out, big[k], 256);
<                 fprintf(out, "}%s", k < 7 ? ",\n" : "");
<             }
<             fprintf(out,
<             "};\n");
< 
<             /* compute braid tables for this N and 32-bit word_t */
<             braid(ltl, big, n, 4);
< 
<             /* write out braid tables for 32-bit z_word_t to crc32.h */
<             fprintf(out,
<             "\n"
<             "#else /* W == 4 */\n"
<             "\n"
<             "local const z_crc_t FAR crc_braid_table[][256] = {\n");
<             for (k = 0; k < 4; k++) {
<                 fprintf(out, "   {");
<                 write_table(out, ltl[k], 256);
<                 fprintf(out, "}%s", k < 3 ? ",\n" : "");
<             }
<             fprintf(out,
<             "};\n"
<             "\n"
<             "local const z_word_t FAR crc_braid_big_table[][256] = {\n");
<             for (k = 0; k < 4; k++) {
<                 fprintf(out, "   {");
<                 write_table32hi(out, big[k], 256);
<                 fprintf(out, "}%s", k < 3 ? ",\n" : "");
<             }
<             fprintf(out,
<             "};\n"
<             "\n"
<             "#endif\n"
<             "\n"
<             "#endif\n");
---
>         fprintf(out, "/* crc32.h -- tables for rapid CRC calculation\n");
>         fprintf(out, " * Generated automatically by crc32.c\n */\n\n");
>         fprintf(out, "local const unsigned long FAR ");
>         fprintf(out, "crc_table[TBLS][256] =\n{\n  {\n");
>         write_table(out, crc_table[0]);
> #  ifdef BYFOUR
>         fprintf(out, "#ifdef BYFOUR\n");
>         for (k = 1; k < 8; k++) {
>             fprintf(out, "  },\n  {\n");
>             write_table(out, crc_table[k]);
427,438c176,178
<         fprintf(out,
<             "\n"
<             "#endif\n");
< 
<         /* write out zeros operator table to crc32.h */
<         fprintf(out,
<             "\n"
<             "local const z_crc_t FAR x2n_table[] = {\n"
<             "    ");
<         write_table(out, x2n_table, 32);
<         fprintf(out,
<             "};\n");
---
>         fprintf(out, "#endif\n");
> #  endif /* BYFOUR */
>         fprintf(out, "  }\n};\n");
445,487c185
< 
< /*
<    Write the 32-bit values in table[0..k-1] to out, five per line in
<    hexadecimal separated by commas.
<  */
< local void write_table(out, table, k)
<     FILE *out;
<     const z_crc_t FAR *table;
<     int k;
< {
<     int n;
< 
<     for (n = 0; n < k; n++)
<         fprintf(out, "%s0x%08lx%s", n == 0 || n % 5 ? "" : "    ",
<                 (unsigned long)(table[n]),
<                 n == k - 1 ? "" : (n % 5 == 4 ? ",\n" : ", "));
< }
< 
< /*
<    Write the high 32-bits of each value in table[0..k-1] to out, five per line
<    in hexadecimal separated by commas.
<  */
< local void write_table32hi(out, table, k)
< FILE *out;
< const z_word_t FAR *table;
< int k;
< {
<     int n;
< 
<     for (n = 0; n < k; n++)
<         fprintf(out, "%s0x%08lx%s", n == 0 || n % 5 ? "" : "    ",
<                 (unsigned long)(table[n] >> 32),
<                 n == k - 1 ? "" : (n % 5 == 4 ? ",\n" : ", "));
< }
< 
< /*
<   Write the 64-bit values in table[0..k-1] to out, three per line in
<   hexadecimal separated by commas. This assumes that if there is a 64-bit
<   type, then there is also a long long integer type, and it is at least 64
<   bits. If not, then the type cast and format string can be adjusted
<   accordingly.
<  */
< local void write_table64(out, table, k)
---
> local void write_table(out, table)
489,490c187
<     const z_word_t FAR *table;
<     int k;
---
>     const unsigned long FAR *table;
494,497c191,193
<     for (n = 0; n < k; n++)
<         fprintf(out, "%s0x%016llx%s", n == 0 || n % 3 ? "" : "    ",
<                 (unsigned long long)(table[n]),
<                 n == k - 1 ? "" : (n % 3 == 2 ? ",\n" : ", "));
---
>     for (n = 0; n < 256; n++)
>         fprintf(out, "%s0x%08lxUL%s", n % 5 ? "" : "    ", table[n],
>                 n == 255 ? "\n" : (n % 5 == 4 ? ",\n" : ", "));
499,506d194
< 
< /* Actually do the deed. */
< int main()
< {
<     make_crc_table();
<     return 0;
< }
< 
509,533d196
< #ifdef W
< /*
<   Generate the little and big-endian braid tables for the given n and z_word_t
<   size w. Each array must have room for w blocks of 256 elements.
<  */
< local void braid(ltl, big, n, w)
<     z_crc_t ltl[][256];
<     z_word_t big[][256];
<     int n;
<     int w;
< {
<     int k;
<     z_crc_t i, p, q;
<     for (k = 0; k < w; k++) {
<         p = x2nmodp((n * w + 3 - k) << 3, 0);
<         ltl[k][0] = 0;
<         big[w - 1 - k][0] = 0;
<         for (i = 1; i < 256; i++) {
<             ltl[k][i] = q = multmodp(i << 24, p);
<             big[w - 1 - k][i] = byte_swap(q);
<         }
<     }
< }
< #endif
< 
536,537c199
<  * Tables for byte-wise and braided CRC-32 calculations, and a table of powers
<  * of x for combining CRC-32s, all made by make_crc_table().
---
>  * Tables of CRC-32s of all single-byte values, made by make_crc_table().
542,590d203
< /* ========================================================================
<  * Routines used for CRC calculation. Some are also required for the table
<  * generation above.
<  */
< 
< /*
<   Return a(x) multiplied by b(x) modulo p(x), where p(x) is the CRC polynomial,
<   reflected. For speed, this requires that a not be zero.
<  */
< local z_crc_t multmodp(a, b)
<     z_crc_t a;
<     z_crc_t b;
< {
<     z_crc_t m, p;
< 
<     m = (z_crc_t)1 << 31;
<     p = 0;
<     for (;;) {
<         if (a & m) {
<             p ^= b;
<             if ((a & (m - 1)) == 0)
<                 break;
<         }
<         m >>= 1;
<         b = b & 1 ? (b >> 1) ^ POLY : b >> 1;
<     }
<     return p;
< }
< 
< /*
<   Return x^(n * 2^k) modulo p(x). Requires that x2n_table[] has been
<   initialized.
<  */
< local z_crc_t x2nmodp(n, k)
<     z_off64_t n;
<     unsigned k;
< {
<     z_crc_t p;
< 
<     p = (z_crc_t)1 << 31;           /* x^0 == 1 */
<     while (n) {
<         if (n & 1)
<             p = multmodp(x2n_table[k & 31], p);
<         n >>= 1;
<         k++;
<     }
<     return p;
< }
< 
592,593c205
<  * This function can be used by asm versions of crc32(), and to force the
<  * generation of the CRC tables in a threaded application.
---
>  * This function can be used by asm versions of crc32()
595c207
< const z_crc_t FAR * ZEXPORT get_crc_table()
---
> const unsigned long FAR * ZEXPORT get_crc_table()
598c210,211
<     once(&made, make_crc_table);
---
>     if (crc_table_empty)
>         make_crc_table();
600c213
<     return (const z_crc_t FAR *)crc_table;
---
>     return (const unsigned long FAR *)crc_table;
603,620c216,218
< /* =========================================================================
<  * Use ARM machine instructions if available. This will compute the CRC about
<  * ten times faster than the braided calculation. This code does not check for
<  * the presence of the CRC instruction at run time. __ARM_FEATURE_CRC32 will
<  * only be defined if the compilation specifies an ARM processor architecture
<  * that has the instructions. For example, compiling with -march=armv8.1-a or
<  * -march=armv8-a+crc, or -march=native if the compile machine has the crc32
<  * instructions.
<  */
< #ifdef ARMCRC32
< 
< /*
<    Constants empirically determined to maximize speed. These values are from
<    measurements on a Cortex-A57. Your mileage may vary.
<  */
< #define Z_BATCH 3990                /* number of words in a batch */
< #define Z_BATCH_ZEROS 0xa10d3d0c    /* computed from Z_BATCH = 3990 */
< #define Z_BATCH_MIN 800             /* fewest words in a final batch */
---
> /* ========================================================================= */
> #define DO1 crc = crc_table[0][((int)crc ^ (*buf++)) & 0xff] ^ (crc >> 8)
> #define DO8 DO1; DO1; DO1; DO1; DO1; DO1; DO1; DO1
622c220,221
< unsigned long ZEXPORT crc32_z(crc, buf, len)
---
> /* ========================================================================= */
> unsigned long ZEXPORT crc32(crc, buf, len)
625c224
<     z_size_t len;
---
>     uInt len;
627,635c226
<     z_crc_t val;
<     z_word_t crc1, crc2;
<     const z_word_t *word;
<     z_word_t val0, val1, val2;
<     z_size_t last, last2, i;
<     z_size_t num;
< 
<     /* Return initial CRC, if requested. */
<     if (buf == Z_NULL) return 0;
---
>     if (buf == Z_NULL) return 0UL;
638c229,230
<     once(&made, make_crc_table);
---
>     if (crc_table_empty)
>         make_crc_table();
641,696c233,235
<     /* Pre-condition the CRC */
<     crc = (~crc) & 0xffffffff;
< 
<     /* Compute the CRC up to a word boundary. */
<     while (len && ((z_size_t)buf & 7) != 0) {
<         len--;
<         val = *buf++;
<         __asm__ volatile("crc32b %w0, %w0, %w1" : "+r"(crc) : "r"(val));
<     }
< 
<     /* Prepare to compute the CRC on full 64-bit words word[0..num-1]. */
<     word = (z_word_t const *)buf;
<     num = len >> 3;
<     len &= 7;
< 
<     /* Do three interleaved CRCs to realize the throughput of one crc32x
<        instruction per cycle. Each CRC is calculated on Z_BATCH words. The
<        three CRCs are combined into a single CRC after each set of batches. */
<     while (num >= 3 * Z_BATCH) {
<         crc1 = 0;
<         crc2 = 0;
<         for (i = 0; i < Z_BATCH; i++) {
<             val0 = word[i];
<             val1 = word[i + Z_BATCH];
<             val2 = word[i + 2 * Z_BATCH];
<             __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc) : "r"(val0));
<             __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc1) : "r"(val1));
<             __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc2) : "r"(val2));
<         }
<         word += 3 * Z_BATCH;
<         num -= 3 * Z_BATCH;
<         crc = multmodp(Z_BATCH_ZEROS, crc) ^ crc1;
<         crc = multmodp(Z_BATCH_ZEROS, crc) ^ crc2;
<     }
< 
<     /* Do one last smaller batch with the remaining words, if there are enough
<        to pay for the combination of CRCs. */
<     last = num / 3;
<     if (last >= Z_BATCH_MIN) {
<         last2 = last << 1;
<         crc1 = 0;
<         crc2 = 0;
<         for (i = 0; i < last; i++) {
<             val0 = word[i];
<             val1 = word[i + last];
<             val2 = word[i + last2];
<             __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc) : "r"(val0));
<             __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc1) : "r"(val1));
<             __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc2) : "r"(val2));
<         }
<         word += 3 * last;
<         num -= 3 * last;
<         val = x2nmodp(last, 6);
<         crc = multmodp(val, crc) ^ crc1;
<         crc = multmodp(val, crc) ^ crc2;
<     }
---
> #ifdef BYFOUR
>     if (sizeof(void *) == sizeof(ptrdiff_t)) {
>         u4 endian;
698,701c237,241
<     /* Compute the CRC on any remaining words. */
<     for (i = 0; i < num; i++) {
<         val0 = word[i];
<         __asm__ volatile("crc32x %w0, %w0, %x1" : "+r"(crc) : "r"(val0));
---
>         endian = 1;
>         if (*((unsigned char *)(&endian)))
>             return crc32_little(crc, buf, len);
>         else
>             return crc32_big(crc, buf, len);
703,710c243,247
<     word += num;
< 
<     /* Complete the CRC on any remaining bytes. */
<     buf = (const unsigned char FAR *)word;
<     while (len) {
<         len--;
<         val = *buf++;
<         __asm__ volatile("crc32b %w0, %w0, %w1" : "+r"(crc) : "r"(val));
---
> #endif /* BYFOUR */
>     crc = crc ^ 0xffffffffUL;
>     while (len >= 8) {
>         DO8;
>         len -= 8;
712,714c249,252
< 
<     /* Return the CRC, post-conditioned. */
<     return crc ^ 0xffffffff;
---
>     if (len) do {
>         DO1;
>     } while (--len);
>     return crc ^ 0xffffffffUL;
717c255
< #else
---
> #ifdef BYFOUR
719c257,261
< #ifdef W
---
> /* ========================================================================= */
> #define DOLIT4 c ^= *buf4++; \
>         c = crc_table[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ \
>             crc_table[1][(c >> 16) & 0xff] ^ crc_table[0][c >> 24]
> #define DOLIT32 DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4
721,727c263,267
< /*
<   Return the CRC of the W bytes in the word_t data, taking the
<   least-significant byte of the word as the first byte of data, without any pre
<   or post conditioning. This is used to combine the CRCs of each braid.
<  */
< local z_crc_t crc_word(data)
<     z_word_t data;
---
> /* ========================================================================= */
> local unsigned long crc32_little(crc, buf, len)
>     unsigned long crc;
>     const unsigned char FAR *buf;
>     unsigned len;
729,733c269,270
<     int k;
<     for (k = 0; k < W; k++)
<         data = (data >> 8) ^ crc_table[data & 0xff];
<     return (z_crc_t)data;
< }
---
>     register u4 c;
>     register const u4 FAR *buf4;
735,742c272,294
< local z_word_t crc_word_big(data)
<     z_word_t data;
< {
<     int k;
<     for (k = 0; k < W; k++)
<         data = (data << 8) ^
<             crc_big_table[(data >> ((W - 1) << 3)) & 0xff];
<     return data;
---
>     c = (u4)crc;
>     c = ~c;
>     while (len && ((ptrdiff_t)buf & 3)) {
>         c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
>         len--;
>     }
> 
>     buf4 = (const u4 FAR *)(const void FAR *)buf;
>     while (len >= 32) {
>         DOLIT32;
>         len -= 32;
>     }
>     while (len >= 4) {
>         DOLIT4;
>         len -= 4;
>     }
>     buf = (const unsigned char FAR *)buf4;
> 
>     if (len) do {
>         c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
>     } while (--len);
>     c = ~c;
>     return (unsigned long)c;
745c297,301
< #endif
---
> /* ========================================================================= */
> #define DOBIG4 c ^= *++buf4; \
>         c = crc_table[4][c & 0xff] ^ crc_table[5][(c >> 8) & 0xff] ^ \
>             crc_table[6][(c >> 16) & 0xff] ^ crc_table[7][c >> 24]
> #define DOBIG32 DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4
748c304
< unsigned long ZEXPORT crc32_z(crc, buf, len)
---
> local unsigned long crc32_big(crc, buf, len)
751c307
<     z_size_t len;
---
>     unsigned len;
753,761c309,310
<     /* Return initial CRC, if requested. */
<     if (buf == Z_NULL) return 0;
< 
< #ifdef DYNAMIC_CRC_TABLE
<     once(&made, make_crc_table);
< #endif /* DYNAMIC_CRC_TABLE */
< 
<     /* Pre-condition the CRC */
<     crc = (~crc) & 0xffffffff;
---
>     register u4 c;
>     register const u4 FAR *buf4;
763,1043c312,316
< #ifdef W
< 
<     /* If provided enough bytes, do a braided CRC calculation. */
<     if (len >= N * W + W - 1) {
<         z_size_t blks;
<         z_word_t const *words;
<         unsigned endian;
<         int k;
< 
<         /* Compute the CRC up to a z_word_t boundary. */
<         while (len && ((z_size_t)buf & (W - 1)) != 0) {
<             len--;
<             crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         }
< 
<         /* Compute the CRC on as many N z_word_t blocks as are available. */
<         blks = len / (N * W);
<         len -= blks * N * W;
<         words = (z_word_t const *)buf;
< 
<         /* Do endian check at execution time instead of compile time, since ARM
<            processors can change the endianess at execution time. If the
<            compiler knows what the endianess will be, it can optimize out the
<            check and the unused branch. */
<         endian = 1;
<         if (*(unsigned char *)&endian) {
<             /* Little endian. */
< 
<             z_crc_t crc0;
<             z_word_t word0;
< #if N > 1
<             z_crc_t crc1;
<             z_word_t word1;
< #if N > 2
<             z_crc_t crc2;
<             z_word_t word2;
< #if N > 3
<             z_crc_t crc3;
<             z_word_t word3;
< #if N > 4
<             z_crc_t crc4;
<             z_word_t word4;
< #if N > 5
<             z_crc_t crc5;
<             z_word_t word5;
< #endif
< #endif
< #endif
< #endif
< #endif
< 
<             /* Initialize the CRC for each braid. */
<             crc0 = crc;
< #if N > 1
<             crc1 = 0;
< #if N > 2
<             crc2 = 0;
< #if N > 3
<             crc3 = 0;
< #if N > 4
<             crc4 = 0;
< #if N > 5
<             crc5 = 0;
< #endif
< #endif
< #endif
< #endif
< #endif
< 
<             /*
<               Process the first blks-1 blocks, computing the CRCs on each braid
<               independently.
<              */
<             while (--blks) {
<                 /* Load the word for each braid into registers. */
<                 word0 = crc0 ^ words[0];
< #if N > 1
<                 word1 = crc1 ^ words[1];
< #if N > 2
<                 word2 = crc2 ^ words[2];
< #if N > 3
<                 word3 = crc3 ^ words[3];
< #if N > 4
<                 word4 = crc4 ^ words[4];
< #if N > 5
<                 word5 = crc5 ^ words[5];
< #endif
< #endif
< #endif
< #endif
< #endif
<                 words += N;
< 
<                 /* Compute and update the CRC for each word. The loop should
<                    get unrolled. */
<                 crc0 = crc_braid_table[0][word0 & 0xff];
< #if N > 1
<                 crc1 = crc_braid_table[0][word1 & 0xff];
< #if N > 2
<                 crc2 = crc_braid_table[0][word2 & 0xff];
< #if N > 3
<                 crc3 = crc_braid_table[0][word3 & 0xff];
< #if N > 4
<                 crc4 = crc_braid_table[0][word4 & 0xff];
< #if N > 5
<                 crc5 = crc_braid_table[0][word5 & 0xff];
< #endif
< #endif
< #endif
< #endif
< #endif
<                 for (k = 1; k < W; k++) {
<                     crc0 ^= crc_braid_table[k][(word0 >> (k << 3)) & 0xff];
< #if N > 1
<                     crc1 ^= crc_braid_table[k][(word1 >> (k << 3)) & 0xff];
< #if N > 2
<                     crc2 ^= crc_braid_table[k][(word2 >> (k << 3)) & 0xff];
< #if N > 3
<                     crc3 ^= crc_braid_table[k][(word3 >> (k << 3)) & 0xff];
< #if N > 4
<                     crc4 ^= crc_braid_table[k][(word4 >> (k << 3)) & 0xff];
< #if N > 5
<                     crc5 ^= crc_braid_table[k][(word5 >> (k << 3)) & 0xff];
< #endif
< #endif
< #endif
< #endif
< #endif
<                 }
<             }
< 
<             /*
<               Process the last block, combining the CRCs of the N braids at the
<               same time.
<              */
<             crc = crc_word(crc0 ^ words[0]);
< #if N > 1
<             crc = crc_word(crc1 ^ words[1] ^ crc);
< #if N > 2
<             crc = crc_word(crc2 ^ words[2] ^ crc);
< #if N > 3
<             crc = crc_word(crc3 ^ words[3] ^ crc);
< #if N > 4
<             crc = crc_word(crc4 ^ words[4] ^ crc);
< #if N > 5
<             crc = crc_word(crc5 ^ words[5] ^ crc);
< #endif
< #endif
< #endif
< #endif
< #endif
<             words += N;
<         }
<         else {
<             /* Big endian. */
< 
<             z_word_t crc0, word0, comb;
< #if N > 1
<             z_word_t crc1, word1;
< #if N > 2
<             z_word_t crc2, word2;
< #if N > 3
<             z_word_t crc3, word3;
< #if N > 4
<             z_word_t crc4, word4;
< #if N > 5
<             z_word_t crc5, word5;
< #endif
< #endif
< #endif
< #endif
< #endif
< 
<             /* Initialize the CRC for each braid. */
<             crc0 = byte_swap(crc);
< #if N > 1
<             crc1 = 0;
< #if N > 2
<             crc2 = 0;
< #if N > 3
<             crc3 = 0;
< #if N > 4
<             crc4 = 0;
< #if N > 5
<             crc5 = 0;
< #endif
< #endif
< #endif
< #endif
< #endif
< 
<             /*
<               Process the first blks-1 blocks, computing the CRCs on each braid
<               independently.
<              */
<             while (--blks) {
<                 /* Load the word for each braid into registers. */
<                 word0 = crc0 ^ words[0];
< #if N > 1
<                 word1 = crc1 ^ words[1];
< #if N > 2
<                 word2 = crc2 ^ words[2];
< #if N > 3
<                 word3 = crc3 ^ words[3];
< #if N > 4
<                 word4 = crc4 ^ words[4];
< #if N > 5
<                 word5 = crc5 ^ words[5];
< #endif
< #endif
< #endif
< #endif
< #endif
<                 words += N;
< 
<                 /* Compute and update the CRC for each word. The loop should
<                    get unrolled. */
<                 crc0 = crc_braid_big_table[0][word0 & 0xff];
< #if N > 1
<                 crc1 = crc_braid_big_table[0][word1 & 0xff];
< #if N > 2
<                 crc2 = crc_braid_big_table[0][word2 & 0xff];
< #if N > 3
<                 crc3 = crc_braid_big_table[0][word3 & 0xff];
< #if N > 4
<                 crc4 = crc_braid_big_table[0][word4 & 0xff];
< #if N > 5
<                 crc5 = crc_braid_big_table[0][word5 & 0xff];
< #endif
< #endif
< #endif
< #endif
< #endif
<                 for (k = 1; k < W; k++) {
<                     crc0 ^= crc_braid_big_table[k][(word0 >> (k << 3)) & 0xff];
< #if N > 1
<                     crc1 ^= crc_braid_big_table[k][(word1 >> (k << 3)) & 0xff];
< #if N > 2
<                     crc2 ^= crc_braid_big_table[k][(word2 >> (k << 3)) & 0xff];
< #if N > 3
<                     crc3 ^= crc_braid_big_table[k][(word3 >> (k << 3)) & 0xff];
< #if N > 4
<                     crc4 ^= crc_braid_big_table[k][(word4 >> (k << 3)) & 0xff];
< #if N > 5
<                     crc5 ^= crc_braid_big_table[k][(word5 >> (k << 3)) & 0xff];
< #endif
< #endif
< #endif
< #endif
< #endif
<                 }
<             }
< 
<             /*
<               Process the last block, combining the CRCs of the N braids at the
<               same time.
<              */
<             comb = crc_word_big(crc0 ^ words[0]);
< #if N > 1
<             comb = crc_word_big(crc1 ^ words[1] ^ comb);
< #if N > 2
<             comb = crc_word_big(crc2 ^ words[2] ^ comb);
< #if N > 3
<             comb = crc_word_big(crc3 ^ words[3] ^ comb);
< #if N > 4
<             comb = crc_word_big(crc4 ^ words[4] ^ comb);
< #if N > 5
<             comb = crc_word_big(crc5 ^ words[5] ^ comb);
< #endif
< #endif
< #endif
< #endif
< #endif
<             words += N;
<             crc = byte_swap(comb);
<         }
< 
<         /*
<           Update the pointer to the remaining bytes to process.
<          */
<         buf = (unsigned char const *)words;
---
>     c = REV((u4)crc);
>     c = ~c;
>     while (len && ((ptrdiff_t)buf & 3)) {
>         c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);
>         len--;
1046,1058c319,323
< #endif /* W */
< 
<     /* Complete the computation of the CRC on any remaining bytes. */
<     while (len >= 8) {
<         len -= 8;
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
---
>     buf4 = (const u4 FAR *)(const void FAR *)buf;
>     buf4--;
>     while (len >= 32) {
>         DOBIG32;
>         len -= 32;
1060,1062c325,327
<     while (len) {
<         len--;
<         crc = (crc >> 8) ^ crc_table[(crc ^ *buf++) & 0xff];
---
>     while (len >= 4) {
>         DOBIG4;
>         len -= 4;
1063a329,330
>     buf4++;
>     buf = (const unsigned char FAR *)buf4;
1065,1066c332,336
<     /* Return the CRC, post-conditioned. */
<     return crc ^ 0xffffffff;
---
>     if (len) do {
>         c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);
>     } while (--len);
>     c = ~c;
>     return (unsigned long)(REV(c));
1069c339,341
< #endif
---
> #endif /* BYFOUR */
> 
> #define GF2_DIM 32      /* dimension of GF(2) vectors (length of CRC) */
1072,1077c344,357
< unsigned long ZEXPORT crc32(crc, buf, len)
<     unsigned long crc;
<     const unsigned char FAR *buf;
<     uInt len;
< {
<     return crc32_z(crc, buf, len);
---
> local unsigned long gf2_matrix_times(mat, vec)
>     unsigned long *mat;
>     unsigned long vec;
> {
>     unsigned long sum;
> 
>     sum = 0;
>     while (vec) {
>         if (vec & 1)
>             sum ^= *mat;
>         vec >>= 1;
>         mat++;
>     }
>     return sum;
1081,1084c361,363
< uLong ZEXPORT crc32_combine64(crc1, crc2, len2)
<     uLong crc1;
<     uLong crc2;
<     z_off64_t len2;
---
> local void gf2_matrix_square(square, mat)
>     unsigned long *square;
>     unsigned long *mat;
1086,1089c365,368
< #ifdef DYNAMIC_CRC_TABLE
<     once(&made, make_crc_table);
< #endif /* DYNAMIC_CRC_TABLE */
<     return multmodp(x2nmodp(len2, 3), crc1) ^ (crc2 & 0xffffffff);
---
>     int n;
> 
>     for (n = 0; n < GF2_DIM; n++)
>         square[n] = gf2_matrix_times(mat, mat[n]);
1093c372
< uLong ZEXPORT crc32_combine(crc1, crc2, len2)
---
> local uLong crc32_combine_(crc1, crc2, len2)
1096,1102d374
<     z_off_t len2;
< {
<     return crc32_combine64(crc1, crc2, (z_off64_t)len2);
< }
< 
< /* ========================================================================= */
< uLong ZEXPORT crc32_combine_gen64(len2)
1105,1108c377,424
< #ifdef DYNAMIC_CRC_TABLE
<     once(&made, make_crc_table);
< #endif /* DYNAMIC_CRC_TABLE */
<     return x2nmodp(len2, 3);
---
>     int n;
>     unsigned long row;
>     unsigned long even[GF2_DIM];    /* even-power-of-two zeros operator */
>     unsigned long odd[GF2_DIM];     /* odd-power-of-two zeros operator */
> 
>     /* degenerate case (also disallow negative lengths) */
>     if (len2 <= 0)
>         return crc1;
> 
>     /* put operator for one zero bit in odd */
>     odd[0] = 0xedb88320UL;          /* CRC-32 polynomial */
>     row = 1;
>     for (n = 1; n < GF2_DIM; n++) {
>         odd[n] = row;
>         row <<= 1;
>     }
> 
>     /* put operator for two zero bits in even */
>     gf2_matrix_square(even, odd);
> 
>     /* put operator for four zero bits in odd */
>     gf2_matrix_square(odd, even);
> 
>     /* apply len2 zeros to crc1 (first square will put the operator for one
>        zero byte, eight zero bits, in even) */
>     do {
>         /* apply zeros operator for this bit of len2 */
>         gf2_matrix_square(even, odd);
>         if (len2 & 1)
>             crc1 = gf2_matrix_times(even, crc1);
>         len2 >>= 1;
> 
>         /* if no more bits set, then done */
>         if (len2 == 0)
>             break;
> 
>         /* another iteration of the loop with odd and even swapped */
>         gf2_matrix_square(odd, even);
>         if (len2 & 1)
>             crc1 = gf2_matrix_times(odd, crc1);
>         len2 >>= 1;
> 
>         /* if no more bits set, then done */
>     } while (len2 != 0);
> 
>     /* return combined crc */
>     crc1 ^= crc2;
>     return crc1;
1112c428,430
< uLong ZEXPORT crc32_combine_gen(len2)
---
> uLong ZEXPORT crc32_combine(crc1, crc2, len2)
>     uLong crc1;
>     uLong crc2;
1115c433
<     return crc32_combine_gen64((z_off64_t)len2);
---
>     return crc32_combine_(crc1, crc2, len2);
1118,1119c436
< /* ========================================================================= */
< uLong ZEXPORT crc32_combine_op(crc1, crc2, op)
---
> uLong ZEXPORT crc32_combine64(crc1, crc2, len2)
1122c439
<     uLong op;
---
>     z_off64_t len2;
1124c441
<     return multmodp(op, crc1) ^ (crc2 & 0xffffffff);
---
>     return crc32_combine_(crc1, crc2, len2);
diff -r source-ziparchive_src.zip-extracted/ZipArchive/zlib/crc32.h lookaside-ziparchive_src.zip-extracted/ZipArchive/zlib/crc32.h
1,9446c1,441
< /* crc32.h -- tables for rapid CRC calculation
<  * Generated automatically by crc32.c
<  */
< 
< local const z_crc_t FAR crc_table[] = {
<     0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
<     0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
<     0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
<     0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
<     0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
<     0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
<     0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
<     0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
<     0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
<     0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
<     0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
<     0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
<     0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
<     0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
<     0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
<     0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
<     0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
<     0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
<     0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
<     0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
<     0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
<     0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
<     0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
<     0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
<     0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
<     0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
<     0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
<     0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
<     0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
<     0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
<     0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
<     0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
<     0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
<     0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
<     0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
<     0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
<     0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
<     0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
<     0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
<     0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
<     0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
<     0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
<     0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
<     0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
<     0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
<     0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
<     0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
<     0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
<     0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
<     0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
<     0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
<     0x2d02ef8d};
< 
< #ifdef W
< 
< #if W == 8
< 
< local const z_word_t FAR crc_big_table[] = {
<     0x0000000000000000, 0x9630077700000000, 0x2c610eee00000000,
<     0xba51099900000000, 0x19c46d0700000000, 0x8ff46a7000000000,
<     0x35a563e900000000, 0xa395649e00000000, 0x3288db0e00000000,
<     0xa4b8dc7900000000, 0x1ee9d5e000000000, 0x88d9d29700000000,
<     0x2b4cb60900000000, 0xbd7cb17e00000000, 0x072db8e700000000,
<     0x911dbf9000000000, 0x6410b71d00000000, 0xf220b06a00000000,
<     0x4871b9f300000000, 0xde41be8400000000, 0x7dd4da1a00000000,
<     0xebe4dd6d00000000, 0x51b5d4f400000000, 0xc785d38300000000,
<     0x56986c1300000000, 0xc0a86b6400000000, 0x7af962fd00000000,
<     0xecc9658a00000000, 0x4f5c011400000000, 0xd96c066300000000,
<     0x633d0ffa00000000, 0xf50d088d00000000, 0xc8206e3b00000000,
<     0x5e10694c00000000, 0xe44160d500000000, 0x727167a200000000,
<     0xd1e4033c00000000, 0x47d4044b00000000, 0xfd850dd200000000,
<     0x6bb50aa500000000, 0xfaa8b53500000000, 0x6c98b24200000000,
<     0xd6c9bbdb00000000, 0x40f9bcac00000000, 0xe36cd83200000000,
<     0x755cdf4500000000, 0xcf0dd6dc00000000, 0x593dd1ab00000000,
<     0xac30d92600000000, 0x3a00de5100000000, 0x8051d7c800000000,
<     0x1661d0bf00000000, 0xb5f4b42100000000, 0x23c4b35600000000,
<     0x9995bacf00000000, 0x0fa5bdb800000000, 0x9eb8022800000000,
<     0x0888055f00000000, 0xb2d90cc600000000, 0x24e90bb100000000,
<     0x877c6f2f00000000, 0x114c685800000000, 0xab1d61c100000000,
<     0x3d2d66b600000000, 0x9041dc7600000000, 0x0671db0100000000,
<     0xbc20d29800000000, 0x2a10d5ef00000000, 0x8985b17100000000,
<     0x1fb5b60600000000, 0xa5e4bf9f00000000, 0x33d4b8e800000000,
<     0xa2c9077800000000, 0x34f9000f00000000, 0x8ea8099600000000,
<     0x18980ee100000000, 0xbb0d6a7f00000000, 0x2d3d6d0800000000,
<     0x976c649100000000, 0x015c63e600000000, 0xf4516b6b00000000,
<     0x62616c1c00000000, 0xd830658500000000, 0x4e0062f200000000,
<     0xed95066c00000000, 0x7ba5011b00000000, 0xc1f4088200000000,
<     0x57c40ff500000000, 0xc6d9b06500000000, 0x50e9b71200000000,
<     0xeab8be8b00000000, 0x7c88b9fc00000000, 0xdf1ddd6200000000,
<     0x492dda1500000000, 0xf37cd38c00000000, 0x654cd4fb00000000,
<     0x5861b24d00000000, 0xce51b53a00000000, 0x7400bca300000000,
<     0xe230bbd400000000, 0x41a5df4a00000000, 0xd795d83d00000000,
<     0x6dc4d1a400000000, 0xfbf4d6d300000000, 0x6ae9694300000000,
<     0xfcd96e3400000000, 0x468867ad00000000, 0xd0b860da00000000,
<     0x732d044400000000, 0xe51d033300000000, 0x5f4c0aaa00000000,
<     0xc97c0ddd00000000, 0x3c71055000000000, 0xaa41022700000000,
<     0x10100bbe00000000, 0x86200cc900000000, 0x25b5685700000000,
<     0xb3856f2000000000, 0x09d466b900000000, 0x9fe461ce00000000,
<     0x0ef9de5e00000000, 0x98c9d92900000000, 0x2298d0b000000000,
<     0xb4a8d7c700000000, 0x173db35900000000, 0x810db42e00000000,
<     0x3b5cbdb700000000, 0xad6cbac000000000, 0x2083b8ed00000000,
<     0xb6b3bf9a00000000, 0x0ce2b60300000000, 0x9ad2b17400000000,
<     0x3947d5ea00000000, 0xaf77d29d00000000, 0x1526db0400000000,
<     0x8316dc7300000000, 0x120b63e300000000, 0x843b649400000000,
<     0x3e6a6d0d00000000, 0xa85a6a7a00000000, 0x0bcf0ee400000000,
<     0x9dff099300000000, 0x27ae000a00000000, 0xb19e077d00000000,
<     0x44930ff000000000, 0xd2a3088700000000, 0x68f2011e00000000,
<     0xfec2066900000000, 0x5d5762f700000000, 0xcb67658000000000,
<     0x71366c1900000000, 0xe7066b6e00000000, 0x761bd4fe00000000,
<     0xe02bd38900000000, 0x5a7ada1000000000, 0xcc4add6700000000,
<     0x6fdfb9f900000000, 0xf9efbe8e00000000, 0x43beb71700000000,
<     0xd58eb06000000000, 0xe8a3d6d600000000, 0x7e93d1a100000000,
<     0xc4c2d83800000000, 0x52f2df4f00000000, 0xf167bbd100000000,
<     0x6757bca600000000, 0xdd06b53f00000000, 0x4b36b24800000000,
<     0xda2b0dd800000000, 0x4c1b0aaf00000000, 0xf64a033600000000,
<     0x607a044100000000, 0xc3ef60df00000000, 0x55df67a800000000,
<     0xef8e6e3100000000, 0x79be694600000000, 0x8cb361cb00000000,
<     0x1a8366bc00000000, 0xa0d26f2500000000, 0x36e2685200000000,
<     0x95770ccc00000000, 0x03470bbb00000000, 0xb916022200000000,
<     0x2f26055500000000, 0xbe3bbac500000000, 0x280bbdb200000000,
<     0x925ab42b00000000, 0x046ab35c00000000, 0xa7ffd7c200000000,
<     0x31cfd0b500000000, 0x8b9ed92c00000000, 0x1daede5b00000000,
<     0xb0c2649b00000000, 0x26f263ec00000000, 0x9ca36a7500000000,
<     0x0a936d0200000000, 0xa906099c00000000, 0x3f360eeb00000000,
<     0x8567077200000000, 0x1357000500000000, 0x824abf9500000000,
<     0x147ab8e200000000, 0xae2bb17b00000000, 0x381bb60c00000000,
<     0x9b8ed29200000000, 0x0dbed5e500000000, 0xb7efdc7c00000000,
<     0x21dfdb0b00000000, 0xd4d2d38600000000, 0x42e2d4f100000000,
<     0xf8b3dd6800000000, 0x6e83da1f00000000, 0xcd16be8100000000,
<     0x5b26b9f600000000, 0xe177b06f00000000, 0x7747b71800000000,
<     0xe65a088800000000, 0x706a0fff00000000, 0xca3b066600000000,
<     0x5c0b011100000000, 0xff9e658f00000000, 0x69ae62f800000000,
<     0xd3ff6b6100000000, 0x45cf6c1600000000, 0x78e20aa000000000,
<     0xeed20dd700000000, 0x5483044e00000000, 0xc2b3033900000000,
<     0x612667a700000000, 0xf71660d000000000, 0x4d47694900000000,
<     0xdb776e3e00000000, 0x4a6ad1ae00000000, 0xdc5ad6d900000000,
<     0x660bdf4000000000, 0xf03bd83700000000, 0x53aebca900000000,
<     0xc59ebbde00000000, 0x7fcfb24700000000, 0xe9ffb53000000000,
<     0x1cf2bdbd00000000, 0x8ac2baca00000000, 0x3093b35300000000,
<     0xa6a3b42400000000, 0x0536d0ba00000000, 0x9306d7cd00000000,
<     0x2957de5400000000, 0xbf67d92300000000, 0x2e7a66b300000000,
<     0xb84a61c400000000, 0x021b685d00000000, 0x942b6f2a00000000,
<     0x37be0bb400000000, 0xa18e0cc300000000, 0x1bdf055a00000000,
<     0x8def022d00000000};
< 
< #else /* W == 4 */
< 
< local const z_word_t FAR crc_big_table[] = {
<     0x00000000, 0x96300777, 0x2c610eee, 0xba510999, 0x19c46d07,
<     0x8ff46a70, 0x35a563e9, 0xa395649e, 0x3288db0e, 0xa4b8dc79,
<     0x1ee9d5e0, 0x88d9d297, 0x2b4cb609, 0xbd7cb17e, 0x072db8e7,
<     0x911dbf90, 0x6410b71d, 0xf220b06a, 0x4871b9f3, 0xde41be84,
<     0x7dd4da1a, 0xebe4dd6d, 0x51b5d4f4, 0xc785d383, 0x56986c13,
<     0xc0a86b64, 0x7af962fd, 0xecc9658a, 0x4f5c0114, 0xd96c0663,
<     0x633d0ffa, 0xf50d088d, 0xc8206e3b, 0x5e10694c, 0xe44160d5,
<     0x727167a2, 0xd1e4033c, 0x47d4044b, 0xfd850dd2, 0x6bb50aa5,
<     0xfaa8b535, 0x6c98b242, 0xd6c9bbdb, 0x40f9bcac, 0xe36cd832,
<     0x755cdf45, 0xcf0dd6dc, 0x593dd1ab, 0xac30d926, 0x3a00de51,
<     0x8051d7c8, 0x1661d0bf, 0xb5f4b421, 0x23c4b356, 0x9995bacf,
<     0x0fa5bdb8, 0x9eb80228, 0x0888055f, 0xb2d90cc6, 0x24e90bb1,
<     0x877c6f2f, 0x114c6858, 0xab1d61c1, 0x3d2d66b6, 0x9041dc76,
<     0x0671db01, 0xbc20d298, 0x2a10d5ef, 0x8985b171, 0x1fb5b606,
<     0xa5e4bf9f, 0x33d4b8e8, 0xa2c90778, 0x34f9000f, 0x8ea80996,
<     0x18980ee1, 0xbb0d6a7f, 0x2d3d6d08, 0x976c6491, 0x015c63e6,
<     0xf4516b6b, 0x62616c1c, 0xd8306585, 0x4e0062f2, 0xed95066c,
<     0x7ba5011b, 0xc1f40882, 0x57c40ff5, 0xc6d9b065, 0x50e9b712,
<     0xeab8be8b, 0x7c88b9fc, 0xdf1ddd62, 0x492dda15, 0xf37cd38c,
<     0x654cd4fb, 0x5861b24d, 0xce51b53a, 0x7400bca3, 0xe230bbd4,
<     0x41a5df4a, 0xd795d83d, 0x6dc4d1a4, 0xfbf4d6d3, 0x6ae96943,
<     0xfcd96e34, 0x468867ad, 0xd0b860da, 0x732d0444, 0xe51d0333,
<     0x5f4c0aaa, 0xc97c0ddd, 0x3c710550, 0xaa410227, 0x10100bbe,
<     0x86200cc9, 0x25b56857, 0xb3856f20, 0x09d466b9, 0x9fe461ce,
<     0x0ef9de5e, 0x98c9d929, 0x2298d0b0, 0xb4a8d7c7, 0x173db359,
<     0x810db42e, 0x3b5cbdb7, 0xad6cbac0, 0x2083b8ed, 0xb6b3bf9a,
<     0x0ce2b603, 0x9ad2b174, 0x3947d5ea, 0xaf77d29d, 0x1526db04,
<     0x8316dc73, 0x120b63e3, 0x843b6494, 0x3e6a6d0d, 0xa85a6a7a,
<     0x0bcf0ee4, 0x9dff0993, 0x27ae000a, 0xb19e077d, 0x44930ff0,
<     0xd2a30887, 0x68f2011e, 0xfec20669, 0x5d5762f7, 0xcb676580,
<     0x71366c19, 0xe7066b6e, 0x761bd4fe, 0xe02bd389, 0x5a7ada10,
<     0xcc4add67, 0x6fdfb9f9, 0xf9efbe8e, 0x43beb717, 0xd58eb060,
<     0xe8a3d6d6, 0x7e93d1a1, 0xc4c2d838, 0x52f2df4f, 0xf167bbd1,
<     0x6757bca6, 0xdd06b53f, 0x4b36b248, 0xda2b0dd8, 0x4c1b0aaf,
<     0xf64a0336, 0x607a0441, 0xc3ef60df, 0x55df67a8, 0xef8e6e31,
<     0x79be6946, 0x8cb361cb, 0x1a8366bc, 0xa0d26f25, 0x36e26852,
<     0x95770ccc, 0x03470bbb, 0xb9160222, 0x2f260555, 0xbe3bbac5,
<     0x280bbdb2, 0x925ab42b, 0x046ab35c, 0xa7ffd7c2, 0x31cfd0b5,
<     0x8b9ed92c, 0x1daede5b, 0xb0c2649b, 0x26f263ec, 0x9ca36a75,
<     0x0a936d02, 0xa906099c, 0x3f360eeb, 0x85670772, 0x13570005,
<     0x824abf95, 0x147ab8e2, 0xae2bb17b, 0x381bb60c, 0x9b8ed292,
<     0x0dbed5e5, 0xb7efdc7c, 0x21dfdb0b, 0xd4d2d386, 0x42e2d4f1,
<     0xf8b3dd68, 0x6e83da1f, 0xcd16be81, 0x5b26b9f6, 0xe177b06f,
<     0x7747b718, 0xe65a0888, 0x706a0fff, 0xca3b0666, 0x5c0b0111,
<     0xff9e658f, 0x69ae62f8, 0xd3ff6b61, 0x45cf6c16, 0x78e20aa0,
<     0xeed20dd7, 0x5483044e, 0xc2b30339, 0x612667a7, 0xf71660d0,
<     0x4d476949, 0xdb776e3e, 0x4a6ad1ae, 0xdc5ad6d9, 0x660bdf40,
<     0xf03bd837, 0x53aebca9, 0xc59ebbde, 0x7fcfb247, 0xe9ffb530,
<     0x1cf2bdbd, 0x8ac2baca, 0x3093b353, 0xa6a3b424, 0x0536d0ba,
<     0x9306d7cd, 0x2957de54, 0xbf67d923, 0x2e7a66b3, 0xb84a61c4,
<     0x021b685d, 0x942b6f2a, 0x37be0bb4, 0xa18e0cc3, 0x1bdf055a,
<     0x8def022d};
< 
< #endif
< 
< #if N == 1
< 
< #if W == 8
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0xccaa009e, 0x4225077d, 0x8e8f07e3, 0x844a0efa,
<     0x48e00e64, 0xc66f0987, 0x0ac50919, 0xd3e51bb5, 0x1f4f1b2b,
<     0x91c01cc8, 0x5d6a1c56, 0x57af154f, 0x9b0515d1, 0x158a1232,
<     0xd92012ac, 0x7cbb312b, 0xb01131b5, 0x3e9e3656, 0xf23436c8,
<     0xf8f13fd1, 0x345b3f4f, 0xbad438ac, 0x767e3832, 0xaf5e2a9e,
<     0x63f42a00, 0xed7b2de3, 0x21d12d7d, 0x2b142464, 0xe7be24fa,
<     0x69312319, 0xa59b2387, 0xf9766256, 0x35dc62c8, 0xbb53652b,
<     0x77f965b5, 0x7d3c6cac, 0xb1966c32, 0x3f196bd1, 0xf3b36b4f,
<     0x2a9379e3, 0xe639797d, 0x68b67e9e, 0xa41c7e00, 0xaed97719,
<     0x62737787, 0xecfc7064, 0x205670fa, 0x85cd537d, 0x496753e3,
<     0xc7e85400, 0x0b42549e, 0x01875d87, 0xcd2d5d19, 0x43a25afa,
<     0x8f085a64, 0x562848c8, 0x9a824856, 0x140d4fb5, 0xd8a74f2b,
<     0xd2624632, 0x1ec846ac, 0x9047414f, 0x5ced41d1, 0x299dc2ed,
<     0xe537c273, 0x6bb8c590, 0xa712c50e, 0xadd7cc17, 0x617dcc89,
<     0xeff2cb6a, 0x2358cbf4, 0xfa78d958, 0x36d2d9c6, 0xb85dde25,
<     0x74f7debb, 0x7e32d7a2, 0xb298d73c, 0x3c17d0df, 0xf0bdd041,
<     0x5526f3c6, 0x998cf358, 0x1703f4bb, 0xdba9f425, 0xd16cfd3c,
<     0x1dc6fda2, 0x9349fa41, 0x5fe3fadf, 0x86c3e873, 0x4a69e8ed,
<     0xc4e6ef0e, 0x084cef90, 0x0289e689, 0xce23e617, 0x40ace1f4,
<     0x8c06e16a, 0xd0eba0bb, 0x1c41a025, 0x92cea7c6, 0x5e64a758,
<     0x54a1ae41, 0x980baedf, 0x1684a93c, 0xda2ea9a2, 0x030ebb0e,
<     0xcfa4bb90, 0x412bbc73, 0x8d81bced, 0x8744b5f4, 0x4beeb56a,
<     0xc561b289, 0x09cbb217, 0xac509190, 0x60fa910e, 0xee7596ed,
<     0x22df9673, 0x281a9f6a, 0xe4b09ff4, 0x6a3f9817, 0xa6959889,
<     0x7fb58a25, 0xb31f8abb, 0x3d908d58, 0xf13a8dc6, 0xfbff84df,
<     0x37558441, 0xb9da83a2, 0x7570833c, 0x533b85da, 0x9f918544,
<     0x111e82a7, 0xddb48239, 0xd7718b20, 0x1bdb8bbe, 0x95548c5d,
<     0x59fe8cc3, 0x80de9e6f, 0x4c749ef1, 0xc2fb9912, 0x0e51998c,
<     0x04949095, 0xc83e900b, 0x46b197e8, 0x8a1b9776, 0x2f80b4f1,
<     0xe32ab46f, 0x6da5b38c, 0xa10fb312, 0xabcaba0b, 0x6760ba95,
<     0xe9efbd76, 0x2545bde8, 0xfc65af44, 0x30cfafda, 0xbe40a839,
<     0x72eaa8a7, 0x782fa1be, 0xb485a120, 0x3a0aa6c3, 0xf6a0a65d,
<     0xaa4de78c, 0x66e7e712, 0xe868e0f1, 0x24c2e06f, 0x2e07e976,
<     0xe2ade9e8, 0x6c22ee0b, 0xa088ee95, 0x79a8fc39, 0xb502fca7,
<     0x3b8dfb44, 0xf727fbda, 0xfde2f2c3, 0x3148f25d, 0xbfc7f5be,
<     0x736df520, 0xd6f6d6a7, 0x1a5cd639, 0x94d3d1da, 0x5879d144,
<     0x52bcd85d, 0x9e16d8c3, 0x1099df20, 0xdc33dfbe, 0x0513cd12,
<     0xc9b9cd8c, 0x4736ca6f, 0x8b9ccaf1, 0x8159c3e8, 0x4df3c376,
<     0xc37cc495, 0x0fd6c40b, 0x7aa64737, 0xb60c47a9, 0x3883404a,
<     0xf42940d4, 0xfeec49cd, 0x32464953, 0xbcc94eb0, 0x70634e2e,
<     0xa9435c82, 0x65e95c1c, 0xeb665bff, 0x27cc5b61, 0x2d095278,
<     0xe1a352e6, 0x6f2c5505, 0xa386559b, 0x061d761c, 0xcab77682,
<     0x44387161, 0x889271ff, 0x825778e6, 0x4efd7878, 0xc0727f9b,
<     0x0cd87f05, 0xd5f86da9, 0x19526d37, 0x97dd6ad4, 0x5b776a4a,
<     0x51b26353, 0x9d1863cd, 0x1397642e, 0xdf3d64b0, 0x83d02561,
<     0x4f7a25ff, 0xc1f5221c, 0x0d5f2282, 0x079a2b9b, 0xcb302b05,
<     0x45bf2ce6, 0x89152c78, 0x50353ed4, 0x9c9f3e4a, 0x121039a9,
<     0xdeba3937, 0xd47f302e, 0x18d530b0, 0x965a3753, 0x5af037cd,
<     0xff6b144a, 0x33c114d4, 0xbd4e1337, 0x71e413a9, 0x7b211ab0,
<     0xb78b1a2e, 0x39041dcd, 0xf5ae1d53, 0x2c8e0fff, 0xe0240f61,
<     0x6eab0882, 0xa201081c, 0xa8c40105, 0x646e019b, 0xeae10678,
<     0x264b06e6},
<    {0x00000000, 0xa6770bb4, 0x979f1129, 0x31e81a9d, 0xf44f2413,
<     0x52382fa7, 0x63d0353a, 0xc5a73e8e, 0x33ef4e67, 0x959845d3,
<     0xa4705f4e, 0x020754fa, 0xc7a06a74, 0x61d761c0, 0x503f7b5d,
<     0xf64870e9, 0x67de9cce, 0xc1a9977a, 0xf0418de7, 0x56368653,
<     0x9391b8dd, 0x35e6b369, 0x040ea9f4, 0xa279a240, 0x5431d2a9,
<     0xf246d91d, 0xc3aec380, 0x65d9c834, 0xa07ef6ba, 0x0609fd0e,
<     0x37e1e793, 0x9196ec27, 0xcfbd399c, 0x69ca3228, 0x582228b5,
<     0xfe552301, 0x3bf21d8f, 0x9d85163b, 0xac6d0ca6, 0x0a1a0712,
<     0xfc5277fb, 0x5a257c4f, 0x6bcd66d2, 0xcdba6d66, 0x081d53e8,
<     0xae6a585c, 0x9f8242c1, 0x39f54975, 0xa863a552, 0x0e14aee6,
<     0x3ffcb47b, 0x998bbfcf, 0x5c2c8141, 0xfa5b8af5, 0xcbb39068,
<     0x6dc49bdc, 0x9b8ceb35, 0x3dfbe081, 0x0c13fa1c, 0xaa64f1a8,
<     0x6fc3cf26, 0xc9b4c492, 0xf85cde0f, 0x5e2bd5bb, 0x440b7579,
<     0xe27c7ecd, 0xd3946450, 0x75e36fe4, 0xb044516a, 0x16335ade,
<     0x27db4043, 0x81ac4bf7, 0x77e43b1e, 0xd19330aa, 0xe07b2a37,
<     0x460c2183, 0x83ab1f0d, 0x25dc14b9, 0x14340e24, 0xb2430590,
<     0x23d5e9b7, 0x85a2e203, 0xb44af89e, 0x123df32a, 0xd79acda4,
<     0x71edc610, 0x4005dc8d, 0xe672d739, 0x103aa7d0, 0xb64dac64,
<     0x87a5b6f9, 0x21d2bd4d, 0xe47583c3, 0x42028877, 0x73ea92ea,
<     0xd59d995e, 0x8bb64ce5, 0x2dc14751, 0x1c295dcc, 0xba5e5678,
<     0x7ff968f6, 0xd98e6342, 0xe86679df, 0x4e11726b, 0xb8590282,
<     0x1e2e0936, 0x2fc613ab, 0x89b1181f, 0x4c162691, 0xea612d25,
<     0xdb8937b8, 0x7dfe3c0c, 0xec68d02b, 0x4a1fdb9f, 0x7bf7c102,
<     0xdd80cab6, 0x1827f438, 0xbe50ff8c, 0x8fb8e511, 0x29cfeea5,
<     0xdf879e4c, 0x79f095f8, 0x48188f65, 0xee6f84d1, 0x2bc8ba5f,
<     0x8dbfb1eb, 0xbc57ab76, 0x1a20a0c2, 0x8816eaf2, 0x2e61e146,
<     0x1f89fbdb, 0xb9fef06f, 0x7c59cee1, 0xda2ec555, 0xebc6dfc8,
<     0x4db1d47c, 0xbbf9a495, 0x1d8eaf21, 0x2c66b5bc, 0x8a11be08,
<     0x4fb68086, 0xe9c18b32, 0xd82991af, 0x7e5e9a1b, 0xefc8763c,
<     0x49bf7d88, 0x78576715, 0xde206ca1, 0x1b87522f, 0xbdf0599b,
<     0x8c184306, 0x2a6f48b2, 0xdc27385b, 0x7a5033ef, 0x4bb82972,
<     0xedcf22c6, 0x28681c48, 0x8e1f17fc, 0xbff70d61, 0x198006d5,
<     0x47abd36e, 0xe1dcd8da, 0xd034c247, 0x7643c9f3, 0xb3e4f77d,
<     0x1593fcc9, 0x247be654, 0x820cede0, 0x74449d09, 0xd23396bd,
<     0xe3db8c20, 0x45ac8794, 0x800bb91a, 0x267cb2ae, 0x1794a833,
<     0xb1e3a387, 0x20754fa0, 0x86024414, 0xb7ea5e89, 0x119d553d,
<     0xd43a6bb3, 0x724d6007, 0x43a57a9a, 0xe5d2712e, 0x139a01c7,
<     0xb5ed0a73, 0x840510ee, 0x22721b5a, 0xe7d525d4, 0x41a22e60,
<     0x704a34fd, 0xd63d3f49, 0xcc1d9f8b, 0x6a6a943f, 0x5b828ea2,
<     0xfdf58516, 0x3852bb98, 0x9e25b02c, 0xafcdaab1, 0x09baa105,
<     0xfff2d1ec, 0x5985da58, 0x686dc0c5, 0xce1acb71, 0x0bbdf5ff,
<     0xadcafe4b, 0x9c22e4d6, 0x3a55ef62, 0xabc30345, 0x0db408f1,
<     0x3c5c126c, 0x9a2b19d8, 0x5f8c2756, 0xf9fb2ce2, 0xc813367f,
<     0x6e643dcb, 0x982c4d22, 0x3e5b4696, 0x0fb35c0b, 0xa9c457bf,
<     0x6c636931, 0xca146285, 0xfbfc7818, 0x5d8b73ac, 0x03a0a617,
<     0xa5d7ada3, 0x943fb73e, 0x3248bc8a, 0xf7ef8204, 0x519889b0,
<     0x6070932d, 0xc6079899, 0x304fe870, 0x9638e3c4, 0xa7d0f959,
<     0x01a7f2ed, 0xc400cc63, 0x6277c7d7, 0x539fdd4a, 0xf5e8d6fe,
<     0x647e3ad9, 0xc209316d, 0xf3e12bf0, 0x55962044, 0x90311eca,
<     0x3646157e, 0x07ae0fe3, 0xa1d90457, 0x579174be, 0xf1e67f0a,
<     0xc00e6597, 0x66796e23, 0xa3de50ad, 0x05a95b19, 0x34414184,
<     0x92364a30},
<    {0x00000000, 0xcb5cd3a5, 0x4dc8a10b, 0x869472ae, 0x9b914216,
<     0x50cd91b3, 0xd659e31d, 0x1d0530b8, 0xec53826d, 0x270f51c8,
<     0xa19b2366, 0x6ac7f0c3, 0x77c2c07b, 0xbc9e13de, 0x3a0a6170,
<     0xf156b2d5, 0x03d6029b, 0xc88ad13e, 0x4e1ea390, 0x85427035,
<     0x9847408d, 0x531b9328, 0xd58fe186, 0x1ed33223, 0xef8580f6,
<     0x24d95353, 0xa24d21fd, 0x6911f258, 0x7414c2e0, 0xbf481145,
<     0x39dc63eb, 0xf280b04e, 0x07ac0536, 0xccf0d693, 0x4a64a43d,
<     0x81387798, 0x9c3d4720, 0x57619485, 0xd1f5e62b, 0x1aa9358e,
<     0xebff875b, 0x20a354fe, 0xa6372650, 0x6d6bf5f5, 0x706ec54d,
<     0xbb3216e8, 0x3da66446, 0xf6fab7e3, 0x047a07ad, 0xcf26d408,
<     0x49b2a6a6, 0x82ee7503, 0x9feb45bb, 0x54b7961e, 0xd223e4b0,
<     0x197f3715, 0xe82985c0, 0x23755665, 0xa5e124cb, 0x6ebdf76e,
<     0x73b8c7d6, 0xb8e41473, 0x3e7066dd, 0xf52cb578, 0x0f580a6c,
<     0xc404d9c9, 0x4290ab67, 0x89cc78c2, 0x94c9487a, 0x5f959bdf,
<     0xd901e971, 0x125d3ad4, 0xe30b8801, 0x28575ba4, 0xaec3290a,
<     0x659ffaaf, 0x789aca17, 0xb3c619b2, 0x35526b1c, 0xfe0eb8b9,
<     0x0c8e08f7, 0xc7d2db52, 0x4146a9fc, 0x8a1a7a59, 0x971f4ae1,
<     0x5c439944, 0xdad7ebea, 0x118b384f, 0xe0dd8a9a, 0x2b81593f,
<     0xad152b91, 0x6649f834, 0x7b4cc88c, 0xb0101b29, 0x36846987,
<     0xfdd8ba22, 0x08f40f5a, 0xc3a8dcff, 0x453cae51, 0x8e607df4,
<     0x93654d4c, 0x58399ee9, 0xdeadec47, 0x15f13fe2, 0xe4a78d37,
<     0x2ffb5e92, 0xa96f2c3c, 0x6233ff99, 0x7f36cf21, 0xb46a1c84,
<     0x32fe6e2a, 0xf9a2bd8f, 0x0b220dc1, 0xc07ede64, 0x46eaacca,
<     0x8db67f6f, 0x90b34fd7, 0x5bef9c72, 0xdd7beedc, 0x16273d79,
<     0xe7718fac, 0x2c2d5c09, 0xaab92ea7, 0x61e5fd02, 0x7ce0cdba,
<     0xb7bc1e1f, 0x31286cb1, 0xfa74bf14, 0x1eb014d8, 0xd5ecc77d,
<     0x5378b5d3, 0x98246676, 0x852156ce, 0x4e7d856b, 0xc8e9f7c5,
<     0x03b52460, 0xf2e396b5, 0x39bf4510, 0xbf2b37be, 0x7477e41b,
<     0x6972d4a3, 0xa22e0706, 0x24ba75a8, 0xefe6a60d, 0x1d661643,
<     0xd63ac5e6, 0x50aeb748, 0x9bf264ed, 0x86f75455, 0x4dab87f0,
<     0xcb3ff55e, 0x006326fb, 0xf135942e, 0x3a69478b, 0xbcfd3525,
<     0x77a1e680, 0x6aa4d638, 0xa1f8059d, 0x276c7733, 0xec30a496,
<     0x191c11ee, 0xd240c24b, 0x54d4b0e5, 0x9f886340, 0x828d53f8,
<     0x49d1805d, 0xcf45f2f3, 0x04192156, 0xf54f9383, 0x3e134026,
<     0xb8873288, 0x73dbe12d, 0x6eded195, 0xa5820230, 0x2316709e,
<     0xe84aa33b, 0x1aca1375, 0xd196c0d0, 0x5702b27e, 0x9c5e61db,
<     0x815b5163, 0x4a0782c6, 0xcc93f068, 0x07cf23cd, 0xf6999118,
<     0x3dc542bd, 0xbb513013, 0x700de3b6, 0x6d08d30e, 0xa65400ab,
<     0x20c07205, 0xeb9ca1a0, 0x11e81eb4, 0xdab4cd11, 0x5c20bfbf,
<     0x977c6c1a, 0x8a795ca2, 0x41258f07, 0xc7b1fda9, 0x0ced2e0c,
<     0xfdbb9cd9, 0x36e74f7c, 0xb0733dd2, 0x7b2fee77, 0x662adecf,
<     0xad760d6a, 0x2be27fc4, 0xe0beac61, 0x123e1c2f, 0xd962cf8a,
<     0x5ff6bd24, 0x94aa6e81, 0x89af5e39, 0x42f38d9c, 0xc467ff32,
<     0x0f3b2c97, 0xfe6d9e42, 0x35314de7, 0xb3a53f49, 0x78f9ecec,
<     0x65fcdc54, 0xaea00ff1, 0x28347d5f, 0xe368aefa, 0x16441b82,
<     0xdd18c827, 0x5b8cba89, 0x90d0692c, 0x8dd55994, 0x46898a31,
<     0xc01df89f, 0x0b412b3a, 0xfa1799ef, 0x314b4a4a, 0xb7df38e4,
<     0x7c83eb41, 0x6186dbf9, 0xaada085c, 0x2c4e7af2, 0xe712a957,
<     0x15921919, 0xdececabc, 0x585ab812, 0x93066bb7, 0x8e035b0f,
<     0x455f88aa, 0xc3cbfa04, 0x089729a1, 0xf9c19b74, 0x329d48d1,
<     0xb4093a7f, 0x7f55e9da, 0x6250d962, 0xa90c0ac7, 0x2f987869,
<     0xe4c4abcc},
<    {0x00000000, 0x3d6029b0, 0x7ac05360, 0x47a07ad0, 0xf580a6c0,
<     0xc8e08f70, 0x8f40f5a0, 0xb220dc10, 0x30704bc1, 0x0d106271,
<     0x4ab018a1, 0x77d03111, 0xc5f0ed01, 0xf890c4b1, 0xbf30be61,
<     0x825097d1, 0x60e09782, 0x5d80be32, 0x1a20c4e2, 0x2740ed52,
<     0x95603142, 0xa80018f2, 0xefa06222, 0xd2c04b92, 0x5090dc43,
<     0x6df0f5f3, 0x2a508f23, 0x1730a693, 0xa5107a83, 0x98705333,
<     0xdfd029e3, 0xe2b00053, 0xc1c12f04, 0xfca106b4, 0xbb017c64,
<     0x866155d4, 0x344189c4, 0x0921a074, 0x4e81daa4, 0x73e1f314,
<     0xf1b164c5, 0xccd14d75, 0x8b7137a5, 0xb6111e15, 0x0431c205,
<     0x3951ebb5, 0x7ef19165, 0x4391b8d5, 0xa121b886, 0x9c419136,
<     0xdbe1ebe6, 0xe681c256, 0x54a11e46, 0x69c137f6, 0x2e614d26,
<     0x13016496, 0x9151f347, 0xac31daf7, 0xeb91a027, 0xd6f18997,
<     0x64d15587, 0x59b17c37, 0x1e1106e7, 0x23712f57, 0x58f35849,
<     0x659371f9, 0x22330b29, 0x1f532299, 0xad73fe89, 0x9013d739,
<     0xd7b3ade9, 0xead38459, 0x68831388, 0x55e33a38, 0x124340e8,
<     0x2f236958, 0x9d03b548, 0xa0639cf8, 0xe7c3e628, 0xdaa3cf98,
<     0x3813cfcb, 0x0573e67b, 0x42d39cab, 0x7fb3b51b, 0xcd93690b,
<     0xf0f340bb, 0xb7533a6b, 0x8a3313db, 0x0863840a, 0x3503adba,
<     0x72a3d76a, 0x4fc3feda, 0xfde322ca, 0xc0830b7a, 0x872371aa,
<     0xba43581a, 0x9932774d, 0xa4525efd, 0xe3f2242d, 0xde920d9d,
<     0x6cb2d18d, 0x51d2f83d, 0x167282ed, 0x2b12ab5d, 0xa9423c8c,
<     0x9422153c, 0xd3826fec, 0xeee2465c, 0x5cc29a4c, 0x61a2b3fc,
<     0x2602c92c, 0x1b62e09c, 0xf9d2e0cf, 0xc4b2c97f, 0x8312b3af,
<     0xbe729a1f, 0x0c52460f, 0x31326fbf, 0x7692156f, 0x4bf23cdf,
<     0xc9a2ab0e, 0xf4c282be, 0xb362f86e, 0x8e02d1de, 0x3c220dce,
<     0x0142247e, 0x46e25eae, 0x7b82771e, 0xb1e6b092, 0x8c869922,
<     0xcb26e3f2, 0xf646ca42, 0x44661652, 0x79063fe2, 0x3ea64532,
<     0x03c66c82, 0x8196fb53, 0xbcf6d2e3, 0xfb56a833, 0xc6368183,
<     0x74165d93, 0x49767423, 0x0ed60ef3, 0x33b62743, 0xd1062710,
<     0xec660ea0, 0xabc67470, 0x96a65dc0, 0x248681d0, 0x19e6a860,
<     0x5e46d2b0, 0x6326fb00, 0xe1766cd1, 0xdc164561, 0x9bb63fb1,
<     0xa6d61601, 0x14f6ca11, 0x2996e3a1, 0x6e369971, 0x5356b0c1,
<     0x70279f96, 0x4d47b626, 0x0ae7ccf6, 0x3787e546, 0x85a73956,
<     0xb8c710e6, 0xff676a36, 0xc2074386, 0x4057d457, 0x7d37fde7,
<     0x3a978737, 0x07f7ae87, 0xb5d77297, 0x88b75b27, 0xcf1721f7,
<     0xf2770847, 0x10c70814, 0x2da721a4, 0x6a075b74, 0x576772c4,
<     0xe547aed4, 0xd8278764, 0x9f87fdb4, 0xa2e7d404, 0x20b743d5,
<     0x1dd76a65, 0x5a7710b5, 0x67173905, 0xd537e515, 0xe857cca5,
<     0xaff7b675, 0x92979fc5, 0xe915e8db, 0xd475c16b, 0x93d5bbbb,
<     0xaeb5920b, 0x1c954e1b, 0x21f567ab, 0x66551d7b, 0x5b3534cb,
<     0xd965a31a, 0xe4058aaa, 0xa3a5f07a, 0x9ec5d9ca, 0x2ce505da,
<     0x11852c6a, 0x562556ba, 0x6b457f0a, 0x89f57f59, 0xb49556e9,
<     0xf3352c39, 0xce550589, 0x7c75d999, 0x4115f029, 0x06b58af9,
<     0x3bd5a349, 0xb9853498, 0x84e51d28, 0xc34567f8, 0xfe254e48,
<     0x4c059258, 0x7165bbe8, 0x36c5c138, 0x0ba5e888, 0x28d4c7df,
<     0x15b4ee6f, 0x521494bf, 0x6f74bd0f, 0xdd54611f, 0xe03448af,
<     0xa794327f, 0x9af41bcf, 0x18a48c1e, 0x25c4a5ae, 0x6264df7e,
<     0x5f04f6ce, 0xed242ade, 0xd044036e, 0x97e479be, 0xaa84500e,
<     0x4834505d, 0x755479ed, 0x32f4033d, 0x0f942a8d, 0xbdb4f69d,
<     0x80d4df2d, 0xc774a5fd, 0xfa148c4d, 0x78441b9c, 0x4524322c,
<     0x028448fc, 0x3fe4614c, 0x8dc4bd5c, 0xb0a494ec, 0xf704ee3c,
<     0xca64c78c},
<    {0x00000000, 0xb8bc6765, 0xaa09c88b, 0x12b5afee, 0x8f629757,
<     0x37def032, 0x256b5fdc, 0x9dd738b9, 0xc5b428ef, 0x7d084f8a,
<     0x6fbde064, 0xd7018701, 0x4ad6bfb8, 0xf26ad8dd, 0xe0df7733,
<     0x58631056, 0x5019579f, 0xe8a530fa, 0xfa109f14, 0x42acf871,
<     0xdf7bc0c8, 0x67c7a7ad, 0x75720843, 0xcdce6f26, 0x95ad7f70,
<     0x2d111815, 0x3fa4b7fb, 0x8718d09e, 0x1acfe827, 0xa2738f42,
<     0xb0c620ac, 0x087a47c9, 0xa032af3e, 0x188ec85b, 0x0a3b67b5,
<     0xb28700d0, 0x2f503869, 0x97ec5f0c, 0x8559f0e2, 0x3de59787,
<     0x658687d1, 0xdd3ae0b4, 0xcf8f4f5a, 0x7733283f, 0xeae41086,
<     0x525877e3, 0x40edd80d, 0xf851bf68, 0xf02bf8a1, 0x48979fc4,
<     0x5a22302a, 0xe29e574f, 0x7f496ff6, 0xc7f50893, 0xd540a77d,
<     0x6dfcc018, 0x359fd04e, 0x8d23b72b, 0x9f9618c5, 0x272a7fa0,
<     0xbafd4719, 0x0241207c, 0x10f48f92, 0xa848e8f7, 0x9b14583d,
<     0x23a83f58, 0x311d90b6, 0x89a1f7d3, 0x1476cf6a, 0xaccaa80f,
<     0xbe7f07e1, 0x06c36084, 0x5ea070d2, 0xe61c17b7, 0xf4a9b859,
<     0x4c15df3c, 0xd1c2e785, 0x697e80e0, 0x7bcb2f0e, 0xc377486b,
<     0xcb0d0fa2, 0x73b168c7, 0x6104c729, 0xd9b8a04c, 0x446f98f5,
<     0xfcd3ff90, 0xee66507e, 0x56da371b, 0x0eb9274d, 0xb6054028,
<     0xa4b0efc6, 0x1c0c88a3, 0x81dbb01a, 0x3967d77f, 0x2bd27891,
<     0x936e1ff4, 0x3b26f703, 0x839a9066, 0x912f3f88, 0x299358ed,
<     0xb4446054, 0x0cf80731, 0x1e4da8df, 0xa6f1cfba, 0xfe92dfec,
<     0x462eb889, 0x549b1767, 0xec277002, 0x71f048bb, 0xc94c2fde,
<     0xdbf98030, 0x6345e755, 0x6b3fa09c, 0xd383c7f9, 0xc1366817,
<     0x798a0f72, 0xe45d37cb, 0x5ce150ae, 0x4e54ff40, 0xf6e89825,
<     0xae8b8873, 0x1637ef16, 0x048240f8, 0xbc3e279d, 0x21e91f24,
<     0x99557841, 0x8be0d7af, 0x335cb0ca, 0xed59b63b, 0x55e5d15e,
<     0x47507eb0, 0xffec19d5, 0x623b216c, 0xda874609, 0xc832e9e7,
<     0x708e8e82, 0x28ed9ed4, 0x9051f9b1, 0x82e4565f, 0x3a58313a,
<     0xa78f0983, 0x1f336ee6, 0x0d86c108, 0xb53aa66d, 0xbd40e1a4,
<     0x05fc86c1, 0x1749292f, 0xaff54e4a, 0x322276f3, 0x8a9e1196,
<     0x982bbe78, 0x2097d91d, 0x78f4c94b, 0xc048ae2e, 0xd2fd01c0,
<     0x6a4166a5, 0xf7965e1c, 0x4f2a3979, 0x5d9f9697, 0xe523f1f2,
<     0x4d6b1905, 0xf5d77e60, 0xe762d18e, 0x5fdeb6eb, 0xc2098e52,
<     0x7ab5e937, 0x680046d9, 0xd0bc21bc, 0x88df31ea, 0x3063568f,
<     0x22d6f961, 0x9a6a9e04, 0x07bda6bd, 0xbf01c1d8, 0xadb46e36,
<     0x15080953, 0x1d724e9a, 0xa5ce29ff, 0xb77b8611, 0x0fc7e174,
<     0x9210d9cd, 0x2aacbea8, 0x38191146, 0x80a57623, 0xd8c66675,
<     0x607a0110, 0x72cfaefe, 0xca73c99b, 0x57a4f122, 0xef189647,
<     0xfdad39a9, 0x45115ecc, 0x764dee06, 0xcef18963, 0xdc44268d,
<     0x64f841e8, 0xf92f7951, 0x41931e34, 0x5326b1da, 0xeb9ad6bf,
<     0xb3f9c6e9, 0x0b45a18c, 0x19f00e62, 0xa14c6907, 0x3c9b51be,
<     0x842736db, 0x96929935, 0x2e2efe50, 0x2654b999, 0x9ee8defc,
<     0x8c5d7112, 0x34e11677, 0xa9362ece, 0x118a49ab, 0x033fe645,
<     0xbb838120, 0xe3e09176, 0x5b5cf613, 0x49e959fd, 0xf1553e98,
<     0x6c820621, 0xd43e6144, 0xc68bceaa, 0x7e37a9cf, 0xd67f4138,
<     0x6ec3265d, 0x7c7689b3, 0xc4caeed6, 0x591dd66f, 0xe1a1b10a,
<     0xf3141ee4, 0x4ba87981, 0x13cb69d7, 0xab770eb2, 0xb9c2a15c,
<     0x017ec639, 0x9ca9fe80, 0x241599e5, 0x36a0360b, 0x8e1c516e,
<     0x866616a7, 0x3eda71c2, 0x2c6fde2c, 0x94d3b949, 0x090481f0,
<     0xb1b8e695, 0xa30d497b, 0x1bb12e1e, 0x43d23e48, 0xfb6e592d,
<     0xe9dbf6c3, 0x516791a6, 0xccb0a91f, 0x740cce7a, 0x66b96194,
<     0xde0506f1},
<    {0x00000000, 0x01c26a37, 0x0384d46e, 0x0246be59, 0x0709a8dc,
<     0x06cbc2eb, 0x048d7cb2, 0x054f1685, 0x0e1351b8, 0x0fd13b8f,
<     0x0d9785d6, 0x0c55efe1, 0x091af964, 0x08d89353, 0x0a9e2d0a,
<     0x0b5c473d, 0x1c26a370, 0x1de4c947, 0x1fa2771e, 0x1e601d29,
<     0x1b2f0bac, 0x1aed619b, 0x18abdfc2, 0x1969b5f5, 0x1235f2c8,
<     0x13f798ff, 0x11b126a6, 0x10734c91, 0x153c5a14, 0x14fe3023,
<     0x16b88e7a, 0x177ae44d, 0x384d46e0, 0x398f2cd7, 0x3bc9928e,
<     0x3a0bf8b9, 0x3f44ee3c, 0x3e86840b, 0x3cc03a52, 0x3d025065,
<     0x365e1758, 0x379c7d6f, 0x35dac336, 0x3418a901, 0x3157bf84,
<     0x3095d5b3, 0x32d36bea, 0x331101dd, 0x246be590, 0x25a98fa7,
<     0x27ef31fe, 0x262d5bc9, 0x23624d4c, 0x22a0277b, 0x20e69922,
<     0x2124f315, 0x2a78b428, 0x2bbade1f, 0x29fc6046, 0x283e0a71,
<     0x2d711cf4, 0x2cb376c3, 0x2ef5c89a, 0x2f37a2ad, 0x709a8dc0,
<     0x7158e7f7, 0x731e59ae, 0x72dc3399, 0x7793251c, 0x76514f2b,
<     0x7417f172, 0x75d59b45, 0x7e89dc78, 0x7f4bb64f, 0x7d0d0816,
<     0x7ccf6221, 0x798074a4, 0x78421e93, 0x7a04a0ca, 0x7bc6cafd,
<     0x6cbc2eb0, 0x6d7e4487, 0x6f38fade, 0x6efa90e9, 0x6bb5866c,
<     0x6a77ec5b, 0x68315202, 0x69f33835, 0x62af7f08, 0x636d153f,
<     0x612bab66, 0x60e9c151, 0x65a6d7d4, 0x6464bde3, 0x662203ba,
<     0x67e0698d, 0x48d7cb20, 0x4915a117, 0x4b531f4e, 0x4a917579,
<     0x4fde63fc, 0x4e1c09cb, 0x4c5ab792, 0x4d98dda5, 0x46c49a98,
<     0x4706f0af, 0x45404ef6, 0x448224c1, 0x41cd3244, 0x400f5873,
<     0x4249e62a, 0x438b8c1d, 0x54f16850, 0x55330267, 0x5775bc3e,
<     0x56b7d609, 0x53f8c08c, 0x523aaabb, 0x507c14e2, 0x51be7ed5,
<     0x5ae239e8, 0x5b2053df, 0x5966ed86, 0x58a487b1, 0x5deb9134,
<     0x5c29fb03, 0x5e6f455a, 0x5fad2f6d, 0xe1351b80, 0xe0f771b7,
<     0xe2b1cfee, 0xe373a5d9, 0xe63cb35c, 0xe7fed96b, 0xe5b86732,
<     0xe47a0d05, 0xef264a38, 0xeee4200f, 0xeca29e56, 0xed60f461,
<     0xe82fe2e4, 0xe9ed88d3, 0xebab368a, 0xea695cbd, 0xfd13b8f0,
<     0xfcd1d2c7, 0xfe976c9e, 0xff5506a9, 0xfa1a102c, 0xfbd87a1b,
<     0xf99ec442, 0xf85cae75, 0xf300e948, 0xf2c2837f, 0xf0843d26,
<     0xf1465711, 0xf4094194, 0xf5cb2ba3, 0xf78d95fa, 0xf64fffcd,
<     0xd9785d60, 0xd8ba3757, 0xdafc890e, 0xdb3ee339, 0xde71f5bc,
<     0xdfb39f8b, 0xddf521d2, 0xdc374be5, 0xd76b0cd8, 0xd6a966ef,
<     0xd4efd8b6, 0xd52db281, 0xd062a404, 0xd1a0ce33, 0xd3e6706a,
<     0xd2241a5d, 0xc55efe10, 0xc49c9427, 0xc6da2a7e, 0xc7184049,
<     0xc25756cc, 0xc3953cfb, 0xc1d382a2, 0xc011e895, 0xcb4dafa8,
<     0xca8fc59f, 0xc8c97bc6, 0xc90b11f1, 0xcc440774, 0xcd866d43,
<     0xcfc0d31a, 0xce02b92d, 0x91af9640, 0x906dfc77, 0x922b422e,
<     0x93e92819, 0x96a63e9c, 0x976454ab, 0x9522eaf2, 0x94e080c5,
<     0x9fbcc7f8, 0x9e7eadcf, 0x9c381396, 0x9dfa79a1, 0x98b56f24,
<     0x99770513, 0x9b31bb4a, 0x9af3d17d, 0x8d893530, 0x8c4b5f07,
<     0x8e0de15e, 0x8fcf8b69, 0x8a809dec, 0x8b42f7db, 0x89044982,
<     0x88c623b5, 0x839a6488, 0x82580ebf, 0x801eb0e6, 0x81dcdad1,
<     0x8493cc54, 0x8551a663, 0x8717183a, 0x86d5720d, 0xa9e2d0a0,
<     0xa820ba97, 0xaa6604ce, 0xaba46ef9, 0xaeeb787c, 0xaf29124b,
<     0xad6fac12, 0xacadc625, 0xa7f18118, 0xa633eb2f, 0xa4755576,
<     0xa5b73f41, 0xa0f829c4, 0xa13a43f3, 0xa37cfdaa, 0xa2be979d,
<     0xb5c473d0, 0xb40619e7, 0xb640a7be, 0xb782cd89, 0xb2cddb0c,
<     0xb30fb13b, 0xb1490f62, 0xb08b6555, 0xbbd72268, 0xba15485f,
<     0xb853f606, 0xb9919c31, 0xbcde8ab4, 0xbd1ce083, 0xbf5a5eda,
<     0xbe9834ed},
<    {0x00000000, 0x191b3141, 0x32366282, 0x2b2d53c3, 0x646cc504,
<     0x7d77f445, 0x565aa786, 0x4f4196c7, 0xc8d98a08, 0xd1c2bb49,
<     0xfaefe88a, 0xe3f4d9cb, 0xacb54f0c, 0xb5ae7e4d, 0x9e832d8e,
<     0x87981ccf, 0x4ac21251, 0x53d92310, 0x78f470d3, 0x61ef4192,
<     0x2eaed755, 0x37b5e614, 0x1c98b5d7, 0x05838496, 0x821b9859,
<     0x9b00a918, 0xb02dfadb, 0xa936cb9a, 0xe6775d5d, 0xff6c6c1c,
<     0xd4413fdf, 0xcd5a0e9e, 0x958424a2, 0x8c9f15e3, 0xa7b24620,
<     0xbea97761, 0xf1e8e1a6, 0xe8f3d0e7, 0xc3de8324, 0xdac5b265,
<     0x5d5daeaa, 0x44469feb, 0x6f6bcc28, 0x7670fd69, 0x39316bae,
<     0x202a5aef, 0x0b07092c, 0x121c386d, 0xdf4636f3, 0xc65d07b2,
<     0xed705471, 0xf46b6530, 0xbb2af3f7, 0xa231c2b6, 0x891c9175,
<     0x9007a034, 0x179fbcfb, 0x0e848dba, 0x25a9de79, 0x3cb2ef38,
<     0x73f379ff, 0x6ae848be, 0x41c51b7d, 0x58de2a3c, 0xf0794f05,
<     0xe9627e44, 0xc24f2d87, 0xdb541cc6, 0x94158a01, 0x8d0ebb40,
<     0xa623e883, 0xbf38d9c2, 0x38a0c50d, 0x21bbf44c, 0x0a96a78f,
<     0x138d96ce, 0x5ccc0009, 0x45d73148, 0x6efa628b, 0x77e153ca,
<     0xbabb5d54, 0xa3a06c15, 0x888d3fd6, 0x91960e97, 0xded79850,
<     0xc7cca911, 0xece1fad2, 0xf5facb93, 0x7262d75c, 0x6b79e61d,
<     0x4054b5de, 0x594f849f, 0x160e1258, 0x0f152319, 0x243870da,
<     0x3d23419b, 0x65fd6ba7, 0x7ce65ae6, 0x57cb0925, 0x4ed03864,
<     0x0191aea3, 0x188a9fe2, 0x33a7cc21, 0x2abcfd60, 0xad24e1af,
<     0xb43fd0ee, 0x9f12832d, 0x8609b26c, 0xc94824ab, 0xd05315ea,
<     0xfb7e4629, 0xe2657768, 0x2f3f79f6, 0x362448b7, 0x1d091b74,
<     0x04122a35, 0x4b53bcf2, 0x52488db3, 0x7965de70, 0x607eef31,
<     0xe7e6f3fe, 0xfefdc2bf, 0xd5d0917c, 0xcccba03d, 0x838a36fa,
<     0x9a9107bb, 0xb1bc5478, 0xa8a76539, 0x3b83984b, 0x2298a90a,
<     0x09b5fac9, 0x10aecb88, 0x5fef5d4f, 0x46f46c0e, 0x6dd93fcd,
<     0x74c20e8c, 0xf35a1243, 0xea412302, 0xc16c70c1, 0xd8774180,
<     0x9736d747, 0x8e2de606, 0xa500b5c5, 0xbc1b8484, 0x71418a1a,
<     0x685abb5b, 0x4377e898, 0x5a6cd9d9, 0x152d4f1e, 0x0c367e5f,
<     0x271b2d9c, 0x3e001cdd, 0xb9980012, 0xa0833153, 0x8bae6290,
<     0x92b553d1, 0xddf4c516, 0xc4eff457, 0xefc2a794, 0xf6d996d5,
<     0xae07bce9, 0xb71c8da8, 0x9c31de6b, 0x852aef2a, 0xca6b79ed,
<     0xd37048ac, 0xf85d1b6f, 0xe1462a2e, 0x66de36e1, 0x7fc507a0,
<     0x54e85463, 0x4df36522, 0x02b2f3e5, 0x1ba9c2a4, 0x30849167,
<     0x299fa026, 0xe4c5aeb8, 0xfdde9ff9, 0xd6f3cc3a, 0xcfe8fd7b,
<     0x80a96bbc, 0x99b25afd, 0xb29f093e, 0xab84387f, 0x2c1c24b0,
<     0x350715f1, 0x1e2a4632, 0x07317773, 0x4870e1b4, 0x516bd0f5,
<     0x7a468336, 0x635db277, 0xcbfad74e, 0xd2e1e60f, 0xf9ccb5cc,
<     0xe0d7848d, 0xaf96124a, 0xb68d230b, 0x9da070c8, 0x84bb4189,
<     0x03235d46, 0x1a386c07, 0x31153fc4, 0x280e0e85, 0x674f9842,
<     0x7e54a903, 0x5579fac0, 0x4c62cb81, 0x8138c51f, 0x9823f45e,
<     0xb30ea79d, 0xaa1596dc, 0xe554001b, 0xfc4f315a, 0xd7626299,
<     0xce7953d8, 0x49e14f17, 0x50fa7e56, 0x7bd72d95, 0x62cc1cd4,
<     0x2d8d8a13, 0x3496bb52, 0x1fbbe891, 0x06a0d9d0, 0x5e7ef3ec,
<     0x4765c2ad, 0x6c48916e, 0x7553a02f, 0x3a1236e8, 0x230907a9,
<     0x0824546a, 0x113f652b, 0x96a779e4, 0x8fbc48a5, 0xa4911b66,
<     0xbd8a2a27, 0xf2cbbce0, 0xebd08da1, 0xc0fdde62, 0xd9e6ef23,
<     0x14bce1bd, 0x0da7d0fc, 0x268a833f, 0x3f91b27e, 0x70d024b9,
<     0x69cb15f8, 0x42e6463b, 0x5bfd777a, 0xdc656bb5, 0xc57e5af4,
<     0xee530937, 0xf7483876, 0xb809aeb1, 0xa1129ff0, 0x8a3fcc33,
<     0x9324fd72},
<    {0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
<     0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
<     0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
<     0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
<     0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
<     0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
<     0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
<     0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
<     0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
<     0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
<     0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
<     0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
<     0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
<     0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
<     0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
<     0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
<     0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
<     0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
<     0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
<     0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
<     0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
<     0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
<     0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
<     0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
<     0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
<     0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
<     0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
<     0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
<     0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
<     0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
<     0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
<     0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
<     0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
<     0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
<     0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
<     0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
<     0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
<     0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
<     0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
<     0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
<     0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
<     0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
<     0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
<     0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
<     0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
<     0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
<     0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
<     0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
<     0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
<     0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
<     0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
<     0x2d02ef8d}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x0000000000000000, 0x9630077700000000, 0x2c610eee00000000,
<     0xba51099900000000, 0x19c46d0700000000, 0x8ff46a7000000000,
<     0x35a563e900000000, 0xa395649e00000000, 0x3288db0e00000000,
<     0xa4b8dc7900000000, 0x1ee9d5e000000000, 0x88d9d29700000000,
<     0x2b4cb60900000000, 0xbd7cb17e00000000, 0x072db8e700000000,
<     0x911dbf9000000000, 0x6410b71d00000000, 0xf220b06a00000000,
<     0x4871b9f300000000, 0xde41be8400000000, 0x7dd4da1a00000000,
<     0xebe4dd6d00000000, 0x51b5d4f400000000, 0xc785d38300000000,
<     0x56986c1300000000, 0xc0a86b6400000000, 0x7af962fd00000000,
<     0xecc9658a00000000, 0x4f5c011400000000, 0xd96c066300000000,
<     0x633d0ffa00000000, 0xf50d088d00000000, 0xc8206e3b00000000,
<     0x5e10694c00000000, 0xe44160d500000000, 0x727167a200000000,
<     0xd1e4033c00000000, 0x47d4044b00000000, 0xfd850dd200000000,
<     0x6bb50aa500000000, 0xfaa8b53500000000, 0x6c98b24200000000,
<     0xd6c9bbdb00000000, 0x40f9bcac00000000, 0xe36cd83200000000,
<     0x755cdf4500000000, 0xcf0dd6dc00000000, 0x593dd1ab00000000,
<     0xac30d92600000000, 0x3a00de5100000000, 0x8051d7c800000000,
<     0x1661d0bf00000000, 0xb5f4b42100000000, 0x23c4b35600000000,
<     0x9995bacf00000000, 0x0fa5bdb800000000, 0x9eb8022800000000,
<     0x0888055f00000000, 0xb2d90cc600000000, 0x24e90bb100000000,
<     0x877c6f2f00000000, 0x114c685800000000, 0xab1d61c100000000,
<     0x3d2d66b600000000, 0x9041dc7600000000, 0x0671db0100000000,
<     0xbc20d29800000000, 0x2a10d5ef00000000, 0x8985b17100000000,
<     0x1fb5b60600000000, 0xa5e4bf9f00000000, 0x33d4b8e800000000,
<     0xa2c9077800000000, 0x34f9000f00000000, 0x8ea8099600000000,
<     0x18980ee100000000, 0xbb0d6a7f00000000, 0x2d3d6d0800000000,
<     0x976c649100000000, 0x015c63e600000000, 0xf4516b6b00000000,
<     0x62616c1c00000000, 0xd830658500000000, 0x4e0062f200000000,
<     0xed95066c00000000, 0x7ba5011b00000000, 0xc1f4088200000000,
<     0x57c40ff500000000, 0xc6d9b06500000000, 0x50e9b71200000000,
<     0xeab8be8b00000000, 0x7c88b9fc00000000, 0xdf1ddd6200000000,
<     0x492dda1500000000, 0xf37cd38c00000000, 0x654cd4fb00000000,
<     0x5861b24d00000000, 0xce51b53a00000000, 0x7400bca300000000,
<     0xe230bbd400000000, 0x41a5df4a00000000, 0xd795d83d00000000,
<     0x6dc4d1a400000000, 0xfbf4d6d300000000, 0x6ae9694300000000,
<     0xfcd96e3400000000, 0x468867ad00000000, 0xd0b860da00000000,
<     0x732d044400000000, 0xe51d033300000000, 0x5f4c0aaa00000000,
<     0xc97c0ddd00000000, 0x3c71055000000000, 0xaa41022700000000,
<     0x10100bbe00000000, 0x86200cc900000000, 0x25b5685700000000,
<     0xb3856f2000000000, 0x09d466b900000000, 0x9fe461ce00000000,
<     0x0ef9de5e00000000, 0x98c9d92900000000, 0x2298d0b000000000,
<     0xb4a8d7c700000000, 0x173db35900000000, 0x810db42e00000000,
<     0x3b5cbdb700000000, 0xad6cbac000000000, 0x2083b8ed00000000,
<     0xb6b3bf9a00000000, 0x0ce2b60300000000, 0x9ad2b17400000000,
<     0x3947d5ea00000000, 0xaf77d29d00000000, 0x1526db0400000000,
<     0x8316dc7300000000, 0x120b63e300000000, 0x843b649400000000,
<     0x3e6a6d0d00000000, 0xa85a6a7a00000000, 0x0bcf0ee400000000,
<     0x9dff099300000000, 0x27ae000a00000000, 0xb19e077d00000000,
<     0x44930ff000000000, 0xd2a3088700000000, 0x68f2011e00000000,
<     0xfec2066900000000, 0x5d5762f700000000, 0xcb67658000000000,
<     0x71366c1900000000, 0xe7066b6e00000000, 0x761bd4fe00000000,
<     0xe02bd38900000000, 0x5a7ada1000000000, 0xcc4add6700000000,
<     0x6fdfb9f900000000, 0xf9efbe8e00000000, 0x43beb71700000000,
<     0xd58eb06000000000, 0xe8a3d6d600000000, 0x7e93d1a100000000,
<     0xc4c2d83800000000, 0x52f2df4f00000000, 0xf167bbd100000000,
<     0x6757bca600000000, 0xdd06b53f00000000, 0x4b36b24800000000,
<     0xda2b0dd800000000, 0x4c1b0aaf00000000, 0xf64a033600000000,
<     0x607a044100000000, 0xc3ef60df00000000, 0x55df67a800000000,
<     0xef8e6e3100000000, 0x79be694600000000, 0x8cb361cb00000000,
<     0x1a8366bc00000000, 0xa0d26f2500000000, 0x36e2685200000000,
<     0x95770ccc00000000, 0x03470bbb00000000, 0xb916022200000000,
<     0x2f26055500000000, 0xbe3bbac500000000, 0x280bbdb200000000,
<     0x925ab42b00000000, 0x046ab35c00000000, 0xa7ffd7c200000000,
<     0x31cfd0b500000000, 0x8b9ed92c00000000, 0x1daede5b00000000,
<     0xb0c2649b00000000, 0x26f263ec00000000, 0x9ca36a7500000000,
<     0x0a936d0200000000, 0xa906099c00000000, 0x3f360eeb00000000,
<     0x8567077200000000, 0x1357000500000000, 0x824abf9500000000,
<     0x147ab8e200000000, 0xae2bb17b00000000, 0x381bb60c00000000,
<     0x9b8ed29200000000, 0x0dbed5e500000000, 0xb7efdc7c00000000,
<     0x21dfdb0b00000000, 0xd4d2d38600000000, 0x42e2d4f100000000,
<     0xf8b3dd6800000000, 0x6e83da1f00000000, 0xcd16be8100000000,
<     0x5b26b9f600000000, 0xe177b06f00000000, 0x7747b71800000000,
<     0xe65a088800000000, 0x706a0fff00000000, 0xca3b066600000000,
<     0x5c0b011100000000, 0xff9e658f00000000, 0x69ae62f800000000,
<     0xd3ff6b6100000000, 0x45cf6c1600000000, 0x78e20aa000000000,
<     0xeed20dd700000000, 0x5483044e00000000, 0xc2b3033900000000,
<     0x612667a700000000, 0xf71660d000000000, 0x4d47694900000000,
<     0xdb776e3e00000000, 0x4a6ad1ae00000000, 0xdc5ad6d900000000,
<     0x660bdf4000000000, 0xf03bd83700000000, 0x53aebca900000000,
<     0xc59ebbde00000000, 0x7fcfb24700000000, 0xe9ffb53000000000,
<     0x1cf2bdbd00000000, 0x8ac2baca00000000, 0x3093b35300000000,
<     0xa6a3b42400000000, 0x0536d0ba00000000, 0x9306d7cd00000000,
<     0x2957de5400000000, 0xbf67d92300000000, 0x2e7a66b300000000,
<     0xb84a61c400000000, 0x021b685d00000000, 0x942b6f2a00000000,
<     0x37be0bb400000000, 0xa18e0cc300000000, 0x1bdf055a00000000,
<     0x8def022d00000000},
<    {0x0000000000000000, 0x41311b1900000000, 0x8262363200000000,
<     0xc3532d2b00000000, 0x04c56c6400000000, 0x45f4777d00000000,
<     0x86a75a5600000000, 0xc796414f00000000, 0x088ad9c800000000,
<     0x49bbc2d100000000, 0x8ae8effa00000000, 0xcbd9f4e300000000,
<     0x0c4fb5ac00000000, 0x4d7eaeb500000000, 0x8e2d839e00000000,
<     0xcf1c988700000000, 0x5112c24a00000000, 0x1023d95300000000,
<     0xd370f47800000000, 0x9241ef6100000000, 0x55d7ae2e00000000,
<     0x14e6b53700000000, 0xd7b5981c00000000, 0x9684830500000000,
<     0x59981b8200000000, 0x18a9009b00000000, 0xdbfa2db000000000,
<     0x9acb36a900000000, 0x5d5d77e600000000, 0x1c6c6cff00000000,
<     0xdf3f41d400000000, 0x9e0e5acd00000000, 0xa224849500000000,
<     0xe3159f8c00000000, 0x2046b2a700000000, 0x6177a9be00000000,
<     0xa6e1e8f100000000, 0xe7d0f3e800000000, 0x2483dec300000000,
<     0x65b2c5da00000000, 0xaaae5d5d00000000, 0xeb9f464400000000,
<     0x28cc6b6f00000000, 0x69fd707600000000, 0xae6b313900000000,
<     0xef5a2a2000000000, 0x2c09070b00000000, 0x6d381c1200000000,
<     0xf33646df00000000, 0xb2075dc600000000, 0x715470ed00000000,
<     0x30656bf400000000, 0xf7f32abb00000000, 0xb6c231a200000000,
<     0x75911c8900000000, 0x34a0079000000000, 0xfbbc9f1700000000,
<     0xba8d840e00000000, 0x79dea92500000000, 0x38efb23c00000000,
<     0xff79f37300000000, 0xbe48e86a00000000, 0x7d1bc54100000000,
<     0x3c2ade5800000000, 0x054f79f000000000, 0x447e62e900000000,
<     0x872d4fc200000000, 0xc61c54db00000000, 0x018a159400000000,
<     0x40bb0e8d00000000, 0x83e823a600000000, 0xc2d938bf00000000,
<     0x0dc5a03800000000, 0x4cf4bb2100000000, 0x8fa7960a00000000,
<     0xce968d1300000000, 0x0900cc5c00000000, 0x4831d74500000000,
<     0x8b62fa6e00000000, 0xca53e17700000000, 0x545dbbba00000000,
<     0x156ca0a300000000, 0xd63f8d8800000000, 0x970e969100000000,
<     0x5098d7de00000000, 0x11a9ccc700000000, 0xd2fae1ec00000000,
<     0x93cbfaf500000000, 0x5cd7627200000000, 0x1de6796b00000000,
<     0xdeb5544000000000, 0x9f844f5900000000, 0x58120e1600000000,
<     0x1923150f00000000, 0xda70382400000000, 0x9b41233d00000000,
<     0xa76bfd6500000000, 0xe65ae67c00000000, 0x2509cb5700000000,
<     0x6438d04e00000000, 0xa3ae910100000000, 0xe29f8a1800000000,
<     0x21cca73300000000, 0x60fdbc2a00000000, 0xafe124ad00000000,
<     0xeed03fb400000000, 0x2d83129f00000000, 0x6cb2098600000000,
<     0xab2448c900000000, 0xea1553d000000000, 0x29467efb00000000,
<     0x687765e200000000, 0xf6793f2f00000000, 0xb748243600000000,
<     0x741b091d00000000, 0x352a120400000000, 0xf2bc534b00000000,
<     0xb38d485200000000, 0x70de657900000000, 0x31ef7e6000000000,
<     0xfef3e6e700000000, 0xbfc2fdfe00000000, 0x7c91d0d500000000,
<     0x3da0cbcc00000000, 0xfa368a8300000000, 0xbb07919a00000000,
<     0x7854bcb100000000, 0x3965a7a800000000, 0x4b98833b00000000,
<     0x0aa9982200000000, 0xc9fab50900000000, 0x88cbae1000000000,
<     0x4f5def5f00000000, 0x0e6cf44600000000, 0xcd3fd96d00000000,
<     0x8c0ec27400000000, 0x43125af300000000, 0x022341ea00000000,
<     0xc1706cc100000000, 0x804177d800000000, 0x47d7369700000000,
<     0x06e62d8e00000000, 0xc5b500a500000000, 0x84841bbc00000000,
<     0x1a8a417100000000, 0x5bbb5a6800000000, 0x98e8774300000000,
<     0xd9d96c5a00000000, 0x1e4f2d1500000000, 0x5f7e360c00000000,
<     0x9c2d1b2700000000, 0xdd1c003e00000000, 0x120098b900000000,
<     0x533183a000000000, 0x9062ae8b00000000, 0xd153b59200000000,
<     0x16c5f4dd00000000, 0x57f4efc400000000, 0x94a7c2ef00000000,
<     0xd596d9f600000000, 0xe9bc07ae00000000, 0xa88d1cb700000000,
<     0x6bde319c00000000, 0x2aef2a8500000000, 0xed796bca00000000,
<     0xac4870d300000000, 0x6f1b5df800000000, 0x2e2a46e100000000,
<     0xe136de6600000000, 0xa007c57f00000000, 0x6354e85400000000,
<     0x2265f34d00000000, 0xe5f3b20200000000, 0xa4c2a91b00000000,
<     0x6791843000000000, 0x26a09f2900000000, 0xb8aec5e400000000,
<     0xf99fdefd00000000, 0x3accf3d600000000, 0x7bfde8cf00000000,
<     0xbc6ba98000000000, 0xfd5ab29900000000, 0x3e099fb200000000,
<     0x7f3884ab00000000, 0xb0241c2c00000000, 0xf115073500000000,
<     0x32462a1e00000000, 0x7377310700000000, 0xb4e1704800000000,
<     0xf5d06b5100000000, 0x3683467a00000000, 0x77b25d6300000000,
<     0x4ed7facb00000000, 0x0fe6e1d200000000, 0xccb5ccf900000000,
<     0x8d84d7e000000000, 0x4a1296af00000000, 0x0b238db600000000,
<     0xc870a09d00000000, 0x8941bb8400000000, 0x465d230300000000,
<     0x076c381a00000000, 0xc43f153100000000, 0x850e0e2800000000,
<     0x42984f6700000000, 0x03a9547e00000000, 0xc0fa795500000000,
<     0x81cb624c00000000, 0x1fc5388100000000, 0x5ef4239800000000,
<     0x9da70eb300000000, 0xdc9615aa00000000, 0x1b0054e500000000,
<     0x5a314ffc00000000, 0x996262d700000000, 0xd85379ce00000000,
<     0x174fe14900000000, 0x567efa5000000000, 0x952dd77b00000000,
<     0xd41ccc6200000000, 0x138a8d2d00000000, 0x52bb963400000000,
<     0x91e8bb1f00000000, 0xd0d9a00600000000, 0xecf37e5e00000000,
<     0xadc2654700000000, 0x6e91486c00000000, 0x2fa0537500000000,
<     0xe836123a00000000, 0xa907092300000000, 0x6a54240800000000,
<     0x2b653f1100000000, 0xe479a79600000000, 0xa548bc8f00000000,
<     0x661b91a400000000, 0x272a8abd00000000, 0xe0bccbf200000000,
<     0xa18dd0eb00000000, 0x62defdc000000000, 0x23efe6d900000000,
<     0xbde1bc1400000000, 0xfcd0a70d00000000, 0x3f838a2600000000,
<     0x7eb2913f00000000, 0xb924d07000000000, 0xf815cb6900000000,
<     0x3b46e64200000000, 0x7a77fd5b00000000, 0xb56b65dc00000000,
<     0xf45a7ec500000000, 0x370953ee00000000, 0x763848f700000000,
<     0xb1ae09b800000000, 0xf09f12a100000000, 0x33cc3f8a00000000,
<     0x72fd249300000000},
<    {0x0000000000000000, 0x376ac20100000000, 0x6ed4840300000000,
<     0x59be460200000000, 0xdca8090700000000, 0xebc2cb0600000000,
<     0xb27c8d0400000000, 0x85164f0500000000, 0xb851130e00000000,
<     0x8f3bd10f00000000, 0xd685970d00000000, 0xe1ef550c00000000,
<     0x64f91a0900000000, 0x5393d80800000000, 0x0a2d9e0a00000000,
<     0x3d475c0b00000000, 0x70a3261c00000000, 0x47c9e41d00000000,
<     0x1e77a21f00000000, 0x291d601e00000000, 0xac0b2f1b00000000,
<     0x9b61ed1a00000000, 0xc2dfab1800000000, 0xf5b5691900000000,
<     0xc8f2351200000000, 0xff98f71300000000, 0xa626b11100000000,
<     0x914c731000000000, 0x145a3c1500000000, 0x2330fe1400000000,
<     0x7a8eb81600000000, 0x4de47a1700000000, 0xe0464d3800000000,
<     0xd72c8f3900000000, 0x8e92c93b00000000, 0xb9f80b3a00000000,
<     0x3cee443f00000000, 0x0b84863e00000000, 0x523ac03c00000000,
<     0x6550023d00000000, 0x58175e3600000000, 0x6f7d9c3700000000,
<     0x36c3da3500000000, 0x01a9183400000000, 0x84bf573100000000,
<     0xb3d5953000000000, 0xea6bd33200000000, 0xdd01113300000000,
<     0x90e56b2400000000, 0xa78fa92500000000, 0xfe31ef2700000000,
<     0xc95b2d2600000000, 0x4c4d622300000000, 0x7b27a02200000000,
<     0x2299e62000000000, 0x15f3242100000000, 0x28b4782a00000000,
<     0x1fdeba2b00000000, 0x4660fc2900000000, 0x710a3e2800000000,
<     0xf41c712d00000000, 0xc376b32c00000000, 0x9ac8f52e00000000,
<     0xada2372f00000000, 0xc08d9a7000000000, 0xf7e7587100000000,
<     0xae591e7300000000, 0x9933dc7200000000, 0x1c25937700000000,
<     0x2b4f517600000000, 0x72f1177400000000, 0x459bd57500000000,
<     0x78dc897e00000000, 0x4fb64b7f00000000, 0x16080d7d00000000,
<     0x2162cf7c00000000, 0xa474807900000000, 0x931e427800000000,
<     0xcaa0047a00000000, 0xfdcac67b00000000, 0xb02ebc6c00000000,
<     0x87447e6d00000000, 0xdefa386f00000000, 0xe990fa6e00000000,
<     0x6c86b56b00000000, 0x5bec776a00000000, 0x0252316800000000,
<     0x3538f36900000000, 0x087faf6200000000, 0x3f156d6300000000,
<     0x66ab2b6100000000, 0x51c1e96000000000, 0xd4d7a66500000000,
<     0xe3bd646400000000, 0xba03226600000000, 0x8d69e06700000000,
<     0x20cbd74800000000, 0x17a1154900000000, 0x4e1f534b00000000,
<     0x7975914a00000000, 0xfc63de4f00000000, 0xcb091c4e00000000,
<     0x92b75a4c00000000, 0xa5dd984d00000000, 0x989ac44600000000,
<     0xaff0064700000000, 0xf64e404500000000, 0xc124824400000000,
<     0x4432cd4100000000, 0x73580f4000000000, 0x2ae6494200000000,
<     0x1d8c8b4300000000, 0x5068f15400000000, 0x6702335500000000,
<     0x3ebc755700000000, 0x09d6b75600000000, 0x8cc0f85300000000,
<     0xbbaa3a5200000000, 0xe2147c5000000000, 0xd57ebe5100000000,
<     0xe839e25a00000000, 0xdf53205b00000000, 0x86ed665900000000,
<     0xb187a45800000000, 0x3491eb5d00000000, 0x03fb295c00000000,
<     0x5a456f5e00000000, 0x6d2fad5f00000000, 0x801b35e100000000,
<     0xb771f7e000000000, 0xeecfb1e200000000, 0xd9a573e300000000,
<     0x5cb33ce600000000, 0x6bd9fee700000000, 0x3267b8e500000000,
<     0x050d7ae400000000, 0x384a26ef00000000, 0x0f20e4ee00000000,
<     0x569ea2ec00000000, 0x61f460ed00000000, 0xe4e22fe800000000,
<     0xd388ede900000000, 0x8a36abeb00000000, 0xbd5c69ea00000000,
<     0xf0b813fd00000000, 0xc7d2d1fc00000000, 0x9e6c97fe00000000,
<     0xa90655ff00000000, 0x2c101afa00000000, 0x1b7ad8fb00000000,
<     0x42c49ef900000000, 0x75ae5cf800000000, 0x48e900f300000000,
<     0x7f83c2f200000000, 0x263d84f000000000, 0x115746f100000000,
<     0x944109f400000000, 0xa32bcbf500000000, 0xfa958df700000000,
<     0xcdff4ff600000000, 0x605d78d900000000, 0x5737bad800000000,
<     0x0e89fcda00000000, 0x39e33edb00000000, 0xbcf571de00000000,
<     0x8b9fb3df00000000, 0xd221f5dd00000000, 0xe54b37dc00000000,
<     0xd80c6bd700000000, 0xef66a9d600000000, 0xb6d8efd400000000,
<     0x81b22dd500000000, 0x04a462d000000000, 0x33cea0d100000000,
<     0x6a70e6d300000000, 0x5d1a24d200000000, 0x10fe5ec500000000,
<     0x27949cc400000000, 0x7e2adac600000000, 0x494018c700000000,
<     0xcc5657c200000000, 0xfb3c95c300000000, 0xa282d3c100000000,
<     0x95e811c000000000, 0xa8af4dcb00000000, 0x9fc58fca00000000,
<     0xc67bc9c800000000, 0xf1110bc900000000, 0x740744cc00000000,
<     0x436d86cd00000000, 0x1ad3c0cf00000000, 0x2db902ce00000000,
<     0x4096af9100000000, 0x77fc6d9000000000, 0x2e422b9200000000,
<     0x1928e99300000000, 0x9c3ea69600000000, 0xab54649700000000,
<     0xf2ea229500000000, 0xc580e09400000000, 0xf8c7bc9f00000000,
<     0xcfad7e9e00000000, 0x9613389c00000000, 0xa179fa9d00000000,
<     0x246fb59800000000, 0x1305779900000000, 0x4abb319b00000000,
<     0x7dd1f39a00000000, 0x3035898d00000000, 0x075f4b8c00000000,
<     0x5ee10d8e00000000, 0x698bcf8f00000000, 0xec9d808a00000000,
<     0xdbf7428b00000000, 0x8249048900000000, 0xb523c68800000000,
<     0x88649a8300000000, 0xbf0e588200000000, 0xe6b01e8000000000,
<     0xd1dadc8100000000, 0x54cc938400000000, 0x63a6518500000000,
<     0x3a18178700000000, 0x0d72d58600000000, 0xa0d0e2a900000000,
<     0x97ba20a800000000, 0xce0466aa00000000, 0xf96ea4ab00000000,
<     0x7c78ebae00000000, 0x4b1229af00000000, 0x12ac6fad00000000,
<     0x25c6adac00000000, 0x1881f1a700000000, 0x2feb33a600000000,
<     0x765575a400000000, 0x413fb7a500000000, 0xc429f8a000000000,
<     0xf3433aa100000000, 0xaafd7ca300000000, 0x9d97bea200000000,
<     0xd073c4b500000000, 0xe71906b400000000, 0xbea740b600000000,
<     0x89cd82b700000000, 0x0cdbcdb200000000, 0x3bb10fb300000000,
<     0x620f49b100000000, 0x55658bb000000000, 0x6822d7bb00000000,
<     0x5f4815ba00000000, 0x06f653b800000000, 0x319c91b900000000,
<     0xb48adebc00000000, 0x83e01cbd00000000, 0xda5e5abf00000000,
<     0xed3498be00000000},
<    {0x0000000000000000, 0x6567bcb800000000, 0x8bc809aa00000000,
<     0xeeafb51200000000, 0x5797628f00000000, 0x32f0de3700000000,
<     0xdc5f6b2500000000, 0xb938d79d00000000, 0xef28b4c500000000,
<     0x8a4f087d00000000, 0x64e0bd6f00000000, 0x018701d700000000,
<     0xb8bfd64a00000000, 0xddd86af200000000, 0x3377dfe000000000,
<     0x5610635800000000, 0x9f57195000000000, 0xfa30a5e800000000,
<     0x149f10fa00000000, 0x71f8ac4200000000, 0xc8c07bdf00000000,
<     0xada7c76700000000, 0x4308727500000000, 0x266fcecd00000000,
<     0x707fad9500000000, 0x1518112d00000000, 0xfbb7a43f00000000,
<     0x9ed0188700000000, 0x27e8cf1a00000000, 0x428f73a200000000,
<     0xac20c6b000000000, 0xc9477a0800000000, 0x3eaf32a000000000,
<     0x5bc88e1800000000, 0xb5673b0a00000000, 0xd00087b200000000,
<     0x6938502f00000000, 0x0c5fec9700000000, 0xe2f0598500000000,
<     0x8797e53d00000000, 0xd187866500000000, 0xb4e03add00000000,
<     0x5a4f8fcf00000000, 0x3f28337700000000, 0x8610e4ea00000000,
<     0xe377585200000000, 0x0dd8ed4000000000, 0x68bf51f800000000,
<     0xa1f82bf000000000, 0xc49f974800000000, 0x2a30225a00000000,
<     0x4f579ee200000000, 0xf66f497f00000000, 0x9308f5c700000000,
<     0x7da740d500000000, 0x18c0fc6d00000000, 0x4ed09f3500000000,
<     0x2bb7238d00000000, 0xc518969f00000000, 0xa07f2a2700000000,
<     0x1947fdba00000000, 0x7c20410200000000, 0x928ff41000000000,
<     0xf7e848a800000000, 0x3d58149b00000000, 0x583fa82300000000,
<     0xb6901d3100000000, 0xd3f7a18900000000, 0x6acf761400000000,
<     0x0fa8caac00000000, 0xe1077fbe00000000, 0x8460c30600000000,
<     0xd270a05e00000000, 0xb7171ce600000000, 0x59b8a9f400000000,
<     0x3cdf154c00000000, 0x85e7c2d100000000, 0xe0807e6900000000,
<     0x0e2fcb7b00000000, 0x6b4877c300000000, 0xa20f0dcb00000000,
<     0xc768b17300000000, 0x29c7046100000000, 0x4ca0b8d900000000,
<     0xf5986f4400000000, 0x90ffd3fc00000000, 0x7e5066ee00000000,
<     0x1b37da5600000000, 0x4d27b90e00000000, 0x284005b600000000,
<     0xc6efb0a400000000, 0xa3880c1c00000000, 0x1ab0db8100000000,
<     0x7fd7673900000000, 0x9178d22b00000000, 0xf41f6e9300000000,
<     0x03f7263b00000000, 0x66909a8300000000, 0x883f2f9100000000,
<     0xed58932900000000, 0x546044b400000000, 0x3107f80c00000000,
<     0xdfa84d1e00000000, 0xbacff1a600000000, 0xecdf92fe00000000,
<     0x89b82e4600000000, 0x67179b5400000000, 0x027027ec00000000,
<     0xbb48f07100000000, 0xde2f4cc900000000, 0x3080f9db00000000,
<     0x55e7456300000000, 0x9ca03f6b00000000, 0xf9c783d300000000,
<     0x176836c100000000, 0x720f8a7900000000, 0xcb375de400000000,
<     0xae50e15c00000000, 0x40ff544e00000000, 0x2598e8f600000000,
<     0x73888bae00000000, 0x16ef371600000000, 0xf840820400000000,
<     0x9d273ebc00000000, 0x241fe92100000000, 0x4178559900000000,
<     0xafd7e08b00000000, 0xcab05c3300000000, 0x3bb659ed00000000,
<     0x5ed1e55500000000, 0xb07e504700000000, 0xd519ecff00000000,
<     0x6c213b6200000000, 0x094687da00000000, 0xe7e932c800000000,
<     0x828e8e7000000000, 0xd49eed2800000000, 0xb1f9519000000000,
<     0x5f56e48200000000, 0x3a31583a00000000, 0x83098fa700000000,
<     0xe66e331f00000000, 0x08c1860d00000000, 0x6da63ab500000000,
<     0xa4e140bd00000000, 0xc186fc0500000000, 0x2f29491700000000,
<     0x4a4ef5af00000000, 0xf376223200000000, 0x96119e8a00000000,
<     0x78be2b9800000000, 0x1dd9972000000000, 0x4bc9f47800000000,
<     0x2eae48c000000000, 0xc001fdd200000000, 0xa566416a00000000,
<     0x1c5e96f700000000, 0x79392a4f00000000, 0x97969f5d00000000,
<     0xf2f123e500000000, 0x05196b4d00000000, 0x607ed7f500000000,
<     0x8ed162e700000000, 0xebb6de5f00000000, 0x528e09c200000000,
<     0x37e9b57a00000000, 0xd946006800000000, 0xbc21bcd000000000,
<     0xea31df8800000000, 0x8f56633000000000, 0x61f9d62200000000,
<     0x049e6a9a00000000, 0xbda6bd0700000000, 0xd8c101bf00000000,
<     0x366eb4ad00000000, 0x5309081500000000, 0x9a4e721d00000000,
<     0xff29cea500000000, 0x11867bb700000000, 0x74e1c70f00000000,
<     0xcdd9109200000000, 0xa8beac2a00000000, 0x4611193800000000,
<     0x2376a58000000000, 0x7566c6d800000000, 0x10017a6000000000,
<     0xfeaecf7200000000, 0x9bc973ca00000000, 0x22f1a45700000000,
<     0x479618ef00000000, 0xa939adfd00000000, 0xcc5e114500000000,
<     0x06ee4d7600000000, 0x6389f1ce00000000, 0x8d2644dc00000000,
<     0xe841f86400000000, 0x51792ff900000000, 0x341e934100000000,
<     0xdab1265300000000, 0xbfd69aeb00000000, 0xe9c6f9b300000000,
<     0x8ca1450b00000000, 0x620ef01900000000, 0x07694ca100000000,
<     0xbe519b3c00000000, 0xdb36278400000000, 0x3599929600000000,
<     0x50fe2e2e00000000, 0x99b9542600000000, 0xfcdee89e00000000,
<     0x12715d8c00000000, 0x7716e13400000000, 0xce2e36a900000000,
<     0xab498a1100000000, 0x45e63f0300000000, 0x208183bb00000000,
<     0x7691e0e300000000, 0x13f65c5b00000000, 0xfd59e94900000000,
<     0x983e55f100000000, 0x2106826c00000000, 0x44613ed400000000,
<     0xaace8bc600000000, 0xcfa9377e00000000, 0x38417fd600000000,
<     0x5d26c36e00000000, 0xb389767c00000000, 0xd6eecac400000000,
<     0x6fd61d5900000000, 0x0ab1a1e100000000, 0xe41e14f300000000,
<     0x8179a84b00000000, 0xd769cb1300000000, 0xb20e77ab00000000,
<     0x5ca1c2b900000000, 0x39c67e0100000000, 0x80fea99c00000000,
<     0xe599152400000000, 0x0b36a03600000000, 0x6e511c8e00000000,
<     0xa716668600000000, 0xc271da3e00000000, 0x2cde6f2c00000000,
<     0x49b9d39400000000, 0xf081040900000000, 0x95e6b8b100000000,
<     0x7b490da300000000, 0x1e2eb11b00000000, 0x483ed24300000000,
<     0x2d596efb00000000, 0xc3f6dbe900000000, 0xa691675100000000,
<     0x1fa9b0cc00000000, 0x7ace0c7400000000, 0x9461b96600000000,
<     0xf10605de00000000},
<    {0x0000000000000000, 0xb029603d00000000, 0x6053c07a00000000,
<     0xd07aa04700000000, 0xc0a680f500000000, 0x708fe0c800000000,
<     0xa0f5408f00000000, 0x10dc20b200000000, 0xc14b703000000000,
<     0x7162100d00000000, 0xa118b04a00000000, 0x1131d07700000000,
<     0x01edf0c500000000, 0xb1c490f800000000, 0x61be30bf00000000,
<     0xd197508200000000, 0x8297e06000000000, 0x32be805d00000000,
<     0xe2c4201a00000000, 0x52ed402700000000, 0x4231609500000000,
<     0xf21800a800000000, 0x2262a0ef00000000, 0x924bc0d200000000,
<     0x43dc905000000000, 0xf3f5f06d00000000, 0x238f502a00000000,
<     0x93a6301700000000, 0x837a10a500000000, 0x3353709800000000,
<     0xe329d0df00000000, 0x5300b0e200000000, 0x042fc1c100000000,
<     0xb406a1fc00000000, 0x647c01bb00000000, 0xd455618600000000,
<     0xc489413400000000, 0x74a0210900000000, 0xa4da814e00000000,
<     0x14f3e17300000000, 0xc564b1f100000000, 0x754dd1cc00000000,
<     0xa537718b00000000, 0x151e11b600000000, 0x05c2310400000000,
<     0xb5eb513900000000, 0x6591f17e00000000, 0xd5b8914300000000,
<     0x86b821a100000000, 0x3691419c00000000, 0xe6ebe1db00000000,
<     0x56c281e600000000, 0x461ea15400000000, 0xf637c16900000000,
<     0x264d612e00000000, 0x9664011300000000, 0x47f3519100000000,
<     0xf7da31ac00000000, 0x27a091eb00000000, 0x9789f1d600000000,
<     0x8755d16400000000, 0x377cb15900000000, 0xe706111e00000000,
<     0x572f712300000000, 0x4958f35800000000, 0xf971936500000000,
<     0x290b332200000000, 0x9922531f00000000, 0x89fe73ad00000000,
<     0x39d7139000000000, 0xe9adb3d700000000, 0x5984d3ea00000000,
<     0x8813836800000000, 0x383ae35500000000, 0xe840431200000000,
<     0x5869232f00000000, 0x48b5039d00000000, 0xf89c63a000000000,
<     0x28e6c3e700000000, 0x98cfa3da00000000, 0xcbcf133800000000,
<     0x7be6730500000000, 0xab9cd34200000000, 0x1bb5b37f00000000,
<     0x0b6993cd00000000, 0xbb40f3f000000000, 0x6b3a53b700000000,
<     0xdb13338a00000000, 0x0a84630800000000, 0xbaad033500000000,
<     0x6ad7a37200000000, 0xdafec34f00000000, 0xca22e3fd00000000,
<     0x7a0b83c000000000, 0xaa71238700000000, 0x1a5843ba00000000,
<     0x4d77329900000000, 0xfd5e52a400000000, 0x2d24f2e300000000,
<     0x9d0d92de00000000, 0x8dd1b26c00000000, 0x3df8d25100000000,
<     0xed82721600000000, 0x5dab122b00000000, 0x8c3c42a900000000,
<     0x3c15229400000000, 0xec6f82d300000000, 0x5c46e2ee00000000,
<     0x4c9ac25c00000000, 0xfcb3a26100000000, 0x2cc9022600000000,
<     0x9ce0621b00000000, 0xcfe0d2f900000000, 0x7fc9b2c400000000,
<     0xafb3128300000000, 0x1f9a72be00000000, 0x0f46520c00000000,
<     0xbf6f323100000000, 0x6f15927600000000, 0xdf3cf24b00000000,
<     0x0eaba2c900000000, 0xbe82c2f400000000, 0x6ef862b300000000,
<     0xded1028e00000000, 0xce0d223c00000000, 0x7e24420100000000,
<     0xae5ee24600000000, 0x1e77827b00000000, 0x92b0e6b100000000,
<     0x2299868c00000000, 0xf2e326cb00000000, 0x42ca46f600000000,
<     0x5216664400000000, 0xe23f067900000000, 0x3245a63e00000000,
<     0x826cc60300000000, 0x53fb968100000000, 0xe3d2f6bc00000000,
<     0x33a856fb00000000, 0x838136c600000000, 0x935d167400000000,
<     0x2374764900000000, 0xf30ed60e00000000, 0x4327b63300000000,
<     0x102706d100000000, 0xa00e66ec00000000, 0x7074c6ab00000000,
<     0xc05da69600000000, 0xd081862400000000, 0x60a8e61900000000,
<     0xb0d2465e00000000, 0x00fb266300000000, 0xd16c76e100000000,
<     0x614516dc00000000, 0xb13fb69b00000000, 0x0116d6a600000000,
<     0x11caf61400000000, 0xa1e3962900000000, 0x7199366e00000000,
<     0xc1b0565300000000, 0x969f277000000000, 0x26b6474d00000000,
<     0xf6cce70a00000000, 0x46e5873700000000, 0x5639a78500000000,
<     0xe610c7b800000000, 0x366a67ff00000000, 0x864307c200000000,
<     0x57d4574000000000, 0xe7fd377d00000000, 0x3787973a00000000,
<     0x87aef70700000000, 0x9772d7b500000000, 0x275bb78800000000,
<     0xf72117cf00000000, 0x470877f200000000, 0x1408c71000000000,
<     0xa421a72d00000000, 0x745b076a00000000, 0xc472675700000000,
<     0xd4ae47e500000000, 0x648727d800000000, 0xb4fd879f00000000,
<     0x04d4e7a200000000, 0xd543b72000000000, 0x656ad71d00000000,
<     0xb510775a00000000, 0x0539176700000000, 0x15e537d500000000,
<     0xa5cc57e800000000, 0x75b6f7af00000000, 0xc59f979200000000,
<     0xdbe815e900000000, 0x6bc175d400000000, 0xbbbbd59300000000,
<     0x0b92b5ae00000000, 0x1b4e951c00000000, 0xab67f52100000000,
<     0x7b1d556600000000, 0xcb34355b00000000, 0x1aa365d900000000,
<     0xaa8a05e400000000, 0x7af0a5a300000000, 0xcad9c59e00000000,
<     0xda05e52c00000000, 0x6a2c851100000000, 0xba56255600000000,
<     0x0a7f456b00000000, 0x597ff58900000000, 0xe95695b400000000,
<     0x392c35f300000000, 0x890555ce00000000, 0x99d9757c00000000,
<     0x29f0154100000000, 0xf98ab50600000000, 0x49a3d53b00000000,
<     0x983485b900000000, 0x281de58400000000, 0xf86745c300000000,
<     0x484e25fe00000000, 0x5892054c00000000, 0xe8bb657100000000,
<     0x38c1c53600000000, 0x88e8a50b00000000, 0xdfc7d42800000000,
<     0x6feeb41500000000, 0xbf94145200000000, 0x0fbd746f00000000,
<     0x1f6154dd00000000, 0xaf4834e000000000, 0x7f3294a700000000,
<     0xcf1bf49a00000000, 0x1e8ca41800000000, 0xaea5c42500000000,
<     0x7edf646200000000, 0xcef6045f00000000, 0xde2a24ed00000000,
<     0x6e0344d000000000, 0xbe79e49700000000, 0x0e5084aa00000000,
<     0x5d50344800000000, 0xed79547500000000, 0x3d03f43200000000,
<     0x8d2a940f00000000, 0x9df6b4bd00000000, 0x2ddfd48000000000,
<     0xfda574c700000000, 0x4d8c14fa00000000, 0x9c1b447800000000,
<     0x2c32244500000000, 0xfc48840200000000, 0x4c61e43f00000000,
<     0x5cbdc48d00000000, 0xec94a4b000000000, 0x3cee04f700000000,
<     0x8cc764ca00000000},
<    {0x0000000000000000, 0xa5d35ccb00000000, 0x0ba1c84d00000000,
<     0xae72948600000000, 0x1642919b00000000, 0xb391cd5000000000,
<     0x1de359d600000000, 0xb830051d00000000, 0x6d8253ec00000000,
<     0xc8510f2700000000, 0x66239ba100000000, 0xc3f0c76a00000000,
<     0x7bc0c27700000000, 0xde139ebc00000000, 0x70610a3a00000000,
<     0xd5b256f100000000, 0x9b02d60300000000, 0x3ed18ac800000000,
<     0x90a31e4e00000000, 0x3570428500000000, 0x8d40479800000000,
<     0x28931b5300000000, 0x86e18fd500000000, 0x2332d31e00000000,
<     0xf68085ef00000000, 0x5353d92400000000, 0xfd214da200000000,
<     0x58f2116900000000, 0xe0c2147400000000, 0x451148bf00000000,
<     0xeb63dc3900000000, 0x4eb080f200000000, 0x3605ac0700000000,
<     0x93d6f0cc00000000, 0x3da4644a00000000, 0x9877388100000000,
<     0x20473d9c00000000, 0x8594615700000000, 0x2be6f5d100000000,
<     0x8e35a91a00000000, 0x5b87ffeb00000000, 0xfe54a32000000000,
<     0x502637a600000000, 0xf5f56b6d00000000, 0x4dc56e7000000000,
<     0xe81632bb00000000, 0x4664a63d00000000, 0xe3b7faf600000000,
<     0xad077a0400000000, 0x08d426cf00000000, 0xa6a6b24900000000,
<     0x0375ee8200000000, 0xbb45eb9f00000000, 0x1e96b75400000000,
<     0xb0e423d200000000, 0x15377f1900000000, 0xc08529e800000000,
<     0x6556752300000000, 0xcb24e1a500000000, 0x6ef7bd6e00000000,
<     0xd6c7b87300000000, 0x7314e4b800000000, 0xdd66703e00000000,
<     0x78b52cf500000000, 0x6c0a580f00000000, 0xc9d904c400000000,
<     0x67ab904200000000, 0xc278cc8900000000, 0x7a48c99400000000,
<     0xdf9b955f00000000, 0x71e901d900000000, 0xd43a5d1200000000,
<     0x01880be300000000, 0xa45b572800000000, 0x0a29c3ae00000000,
<     0xaffa9f6500000000, 0x17ca9a7800000000, 0xb219c6b300000000,
<     0x1c6b523500000000, 0xb9b80efe00000000, 0xf7088e0c00000000,
<     0x52dbd2c700000000, 0xfca9464100000000, 0x597a1a8a00000000,
<     0xe14a1f9700000000, 0x4499435c00000000, 0xeaebd7da00000000,
<     0x4f388b1100000000, 0x9a8adde000000000, 0x3f59812b00000000,
<     0x912b15ad00000000, 0x34f8496600000000, 0x8cc84c7b00000000,
<     0x291b10b000000000, 0x8769843600000000, 0x22bad8fd00000000,
<     0x5a0ff40800000000, 0xffdca8c300000000, 0x51ae3c4500000000,
<     0xf47d608e00000000, 0x4c4d659300000000, 0xe99e395800000000,
<     0x47ecadde00000000, 0xe23ff11500000000, 0x378da7e400000000,
<     0x925efb2f00000000, 0x3c2c6fa900000000, 0x99ff336200000000,
<     0x21cf367f00000000, 0x841c6ab400000000, 0x2a6efe3200000000,
<     0x8fbda2f900000000, 0xc10d220b00000000, 0x64de7ec000000000,
<     0xcaacea4600000000, 0x6f7fb68d00000000, 0xd74fb39000000000,
<     0x729cef5b00000000, 0xdcee7bdd00000000, 0x793d271600000000,
<     0xac8f71e700000000, 0x095c2d2c00000000, 0xa72eb9aa00000000,
<     0x02fde56100000000, 0xbacde07c00000000, 0x1f1ebcb700000000,
<     0xb16c283100000000, 0x14bf74fa00000000, 0xd814b01e00000000,
<     0x7dc7ecd500000000, 0xd3b5785300000000, 0x7666249800000000,
<     0xce56218500000000, 0x6b857d4e00000000, 0xc5f7e9c800000000,
<     0x6024b50300000000, 0xb596e3f200000000, 0x1045bf3900000000,
<     0xbe372bbf00000000, 0x1be4777400000000, 0xa3d4726900000000,
<     0x06072ea200000000, 0xa875ba2400000000, 0x0da6e6ef00000000,
<     0x4316661d00000000, 0xe6c53ad600000000, 0x48b7ae5000000000,
<     0xed64f29b00000000, 0x5554f78600000000, 0xf087ab4d00000000,
<     0x5ef53fcb00000000, 0xfb26630000000000, 0x2e9435f100000000,
<     0x8b47693a00000000, 0x2535fdbc00000000, 0x80e6a17700000000,
<     0x38d6a46a00000000, 0x9d05f8a100000000, 0x33776c2700000000,
<     0x96a430ec00000000, 0xee111c1900000000, 0x4bc240d200000000,
<     0xe5b0d45400000000, 0x4063889f00000000, 0xf8538d8200000000,
<     0x5d80d14900000000, 0xf3f245cf00000000, 0x5621190400000000,
<     0x83934ff500000000, 0x2640133e00000000, 0x883287b800000000,
<     0x2de1db7300000000, 0x95d1de6e00000000, 0x300282a500000000,
<     0x9e70162300000000, 0x3ba34ae800000000, 0x7513ca1a00000000,
<     0xd0c096d100000000, 0x7eb2025700000000, 0xdb615e9c00000000,
<     0x63515b8100000000, 0xc682074a00000000, 0x68f093cc00000000,
<     0xcd23cf0700000000, 0x189199f600000000, 0xbd42c53d00000000,
<     0x133051bb00000000, 0xb6e30d7000000000, 0x0ed3086d00000000,
<     0xab0054a600000000, 0x0572c02000000000, 0xa0a19ceb00000000,
<     0xb41ee81100000000, 0x11cdb4da00000000, 0xbfbf205c00000000,
<     0x1a6c7c9700000000, 0xa25c798a00000000, 0x078f254100000000,
<     0xa9fdb1c700000000, 0x0c2eed0c00000000, 0xd99cbbfd00000000,
<     0x7c4fe73600000000, 0xd23d73b000000000, 0x77ee2f7b00000000,
<     0xcfde2a6600000000, 0x6a0d76ad00000000, 0xc47fe22b00000000,
<     0x61acbee000000000, 0x2f1c3e1200000000, 0x8acf62d900000000,
<     0x24bdf65f00000000, 0x816eaa9400000000, 0x395eaf8900000000,
<     0x9c8df34200000000, 0x32ff67c400000000, 0x972c3b0f00000000,
<     0x429e6dfe00000000, 0xe74d313500000000, 0x493fa5b300000000,
<     0xececf97800000000, 0x54dcfc6500000000, 0xf10fa0ae00000000,
<     0x5f7d342800000000, 0xfaae68e300000000, 0x821b441600000000,
<     0x27c818dd00000000, 0x89ba8c5b00000000, 0x2c69d09000000000,
<     0x9459d58d00000000, 0x318a894600000000, 0x9ff81dc000000000,
<     0x3a2b410b00000000, 0xef9917fa00000000, 0x4a4a4b3100000000,
<     0xe438dfb700000000, 0x41eb837c00000000, 0xf9db866100000000,
<     0x5c08daaa00000000, 0xf27a4e2c00000000, 0x57a912e700000000,
<     0x1919921500000000, 0xbccacede00000000, 0x12b85a5800000000,
<     0xb76b069300000000, 0x0f5b038e00000000, 0xaa885f4500000000,
<     0x04facbc300000000, 0xa129970800000000, 0x749bc1f900000000,
<     0xd1489d3200000000, 0x7f3a09b400000000, 0xdae9557f00000000,
<     0x62d9506200000000, 0xc70a0ca900000000, 0x6978982f00000000,
<     0xccabc4e400000000},
<    {0x0000000000000000, 0xb40b77a600000000, 0x29119f9700000000,
<     0x9d1ae83100000000, 0x13244ff400000000, 0xa72f385200000000,
<     0x3a35d06300000000, 0x8e3ea7c500000000, 0x674eef3300000000,
<     0xd345989500000000, 0x4e5f70a400000000, 0xfa54070200000000,
<     0x746aa0c700000000, 0xc061d76100000000, 0x5d7b3f5000000000,
<     0xe97048f600000000, 0xce9cde6700000000, 0x7a97a9c100000000,
<     0xe78d41f000000000, 0x5386365600000000, 0xddb8919300000000,
<     0x69b3e63500000000, 0xf4a90e0400000000, 0x40a279a200000000,
<     0xa9d2315400000000, 0x1dd946f200000000, 0x80c3aec300000000,
<     0x34c8d96500000000, 0xbaf67ea000000000, 0x0efd090600000000,
<     0x93e7e13700000000, 0x27ec969100000000, 0x9c39bdcf00000000,
<     0x2832ca6900000000, 0xb528225800000000, 0x012355fe00000000,
<     0x8f1df23b00000000, 0x3b16859d00000000, 0xa60c6dac00000000,
<     0x12071a0a00000000, 0xfb7752fc00000000, 0x4f7c255a00000000,
<     0xd266cd6b00000000, 0x666dbacd00000000, 0xe8531d0800000000,
<     0x5c586aae00000000, 0xc142829f00000000, 0x7549f53900000000,
<     0x52a563a800000000, 0xe6ae140e00000000, 0x7bb4fc3f00000000,
<     0xcfbf8b9900000000, 0x41812c5c00000000, 0xf58a5bfa00000000,
<     0x6890b3cb00000000, 0xdc9bc46d00000000, 0x35eb8c9b00000000,
<     0x81e0fb3d00000000, 0x1cfa130c00000000, 0xa8f164aa00000000,
<     0x26cfc36f00000000, 0x92c4b4c900000000, 0x0fde5cf800000000,
<     0xbbd52b5e00000000, 0x79750b4400000000, 0xcd7e7ce200000000,
<     0x506494d300000000, 0xe46fe37500000000, 0x6a5144b000000000,
<     0xde5a331600000000, 0x4340db2700000000, 0xf74bac8100000000,
<     0x1e3be47700000000, 0xaa3093d100000000, 0x372a7be000000000,
<     0x83210c4600000000, 0x0d1fab8300000000, 0xb914dc2500000000,
<     0x240e341400000000, 0x900543b200000000, 0xb7e9d52300000000,
<     0x03e2a28500000000, 0x9ef84ab400000000, 0x2af33d1200000000,
<     0xa4cd9ad700000000, 0x10c6ed7100000000, 0x8ddc054000000000,
<     0x39d772e600000000, 0xd0a73a1000000000, 0x64ac4db600000000,
<     0xf9b6a58700000000, 0x4dbdd22100000000, 0xc38375e400000000,
<     0x7788024200000000, 0xea92ea7300000000, 0x5e999dd500000000,
<     0xe54cb68b00000000, 0x5147c12d00000000, 0xcc5d291c00000000,
<     0x78565eba00000000, 0xf668f97f00000000, 0x42638ed900000000,
<     0xdf7966e800000000, 0x6b72114e00000000, 0x820259b800000000,
<     0x36092e1e00000000, 0xab13c62f00000000, 0x1f18b18900000000,
<     0x9126164c00000000, 0x252d61ea00000000, 0xb83789db00000000,
<     0x0c3cfe7d00000000, 0x2bd068ec00000000, 0x9fdb1f4a00000000,
<     0x02c1f77b00000000, 0xb6ca80dd00000000, 0x38f4271800000000,
<     0x8cff50be00000000, 0x11e5b88f00000000, 0xa5eecf2900000000,
<     0x4c9e87df00000000, 0xf895f07900000000, 0x658f184800000000,
<     0xd1846fee00000000, 0x5fbac82b00000000, 0xebb1bf8d00000000,
<     0x76ab57bc00000000, 0xc2a0201a00000000, 0xf2ea168800000000,
<     0x46e1612e00000000, 0xdbfb891f00000000, 0x6ff0feb900000000,
<     0xe1ce597c00000000, 0x55c52eda00000000, 0xc8dfc6eb00000000,
<     0x7cd4b14d00000000, 0x95a4f9bb00000000, 0x21af8e1d00000000,
<     0xbcb5662c00000000, 0x08be118a00000000, 0x8680b64f00000000,
<     0x328bc1e900000000, 0xaf9129d800000000, 0x1b9a5e7e00000000,
<     0x3c76c8ef00000000, 0x887dbf4900000000, 0x1567577800000000,
<     0xa16c20de00000000, 0x2f52871b00000000, 0x9b59f0bd00000000,
<     0x0643188c00000000, 0xb2486f2a00000000, 0x5b3827dc00000000,
<     0xef33507a00000000, 0x7229b84b00000000, 0xc622cfed00000000,
<     0x481c682800000000, 0xfc171f8e00000000, 0x610df7bf00000000,
<     0xd506801900000000, 0x6ed3ab4700000000, 0xdad8dce100000000,
<     0x47c234d000000000, 0xf3c9437600000000, 0x7df7e4b300000000,
<     0xc9fc931500000000, 0x54e67b2400000000, 0xe0ed0c8200000000,
<     0x099d447400000000, 0xbd9633d200000000, 0x208cdbe300000000,
<     0x9487ac4500000000, 0x1ab90b8000000000, 0xaeb27c2600000000,
<     0x33a8941700000000, 0x87a3e3b100000000, 0xa04f752000000000,
<     0x1444028600000000, 0x895eeab700000000, 0x3d559d1100000000,
<     0xb36b3ad400000000, 0x07604d7200000000, 0x9a7aa54300000000,
<     0x2e71d2e500000000, 0xc7019a1300000000, 0x730aedb500000000,
<     0xee10058400000000, 0x5a1b722200000000, 0xd425d5e700000000,
<     0x602ea24100000000, 0xfd344a7000000000, 0x493f3dd600000000,
<     0x8b9f1dcc00000000, 0x3f946a6a00000000, 0xa28e825b00000000,
<     0x1685f5fd00000000, 0x98bb523800000000, 0x2cb0259e00000000,
<     0xb1aacdaf00000000, 0x05a1ba0900000000, 0xecd1f2ff00000000,
<     0x58da855900000000, 0xc5c06d6800000000, 0x71cb1ace00000000,
<     0xfff5bd0b00000000, 0x4bfecaad00000000, 0xd6e4229c00000000,
<     0x62ef553a00000000, 0x4503c3ab00000000, 0xf108b40d00000000,
<     0x6c125c3c00000000, 0xd8192b9a00000000, 0x56278c5f00000000,
<     0xe22cfbf900000000, 0x7f3613c800000000, 0xcb3d646e00000000,
<     0x224d2c9800000000, 0x96465b3e00000000, 0x0b5cb30f00000000,
<     0xbf57c4a900000000, 0x3169636c00000000, 0x856214ca00000000,
<     0x1878fcfb00000000, 0xac738b5d00000000, 0x17a6a00300000000,
<     0xa3add7a500000000, 0x3eb73f9400000000, 0x8abc483200000000,
<     0x0482eff700000000, 0xb089985100000000, 0x2d93706000000000,
<     0x999807c600000000, 0x70e84f3000000000, 0xc4e3389600000000,
<     0x59f9d0a700000000, 0xedf2a70100000000, 0x63cc00c400000000,
<     0xd7c7776200000000, 0x4add9f5300000000, 0xfed6e8f500000000,
<     0xd93a7e6400000000, 0x6d3109c200000000, 0xf02be1f300000000,
<     0x4420965500000000, 0xca1e319000000000, 0x7e15463600000000,
<     0xe30fae0700000000, 0x5704d9a100000000, 0xbe74915700000000,
<     0x0a7fe6f100000000, 0x97650ec000000000, 0x236e796600000000,
<     0xad50dea300000000, 0x195ba90500000000, 0x8441413400000000,
<     0x304a369200000000},
<    {0x0000000000000000, 0x9e00aacc00000000, 0x7d07254200000000,
<     0xe3078f8e00000000, 0xfa0e4a8400000000, 0x640ee04800000000,
<     0x87096fc600000000, 0x1909c50a00000000, 0xb51be5d300000000,
<     0x2b1b4f1f00000000, 0xc81cc09100000000, 0x561c6a5d00000000,
<     0x4f15af5700000000, 0xd115059b00000000, 0x32128a1500000000,
<     0xac1220d900000000, 0x2b31bb7c00000000, 0xb53111b000000000,
<     0x56369e3e00000000, 0xc83634f200000000, 0xd13ff1f800000000,
<     0x4f3f5b3400000000, 0xac38d4ba00000000, 0x32387e7600000000,
<     0x9e2a5eaf00000000, 0x002af46300000000, 0xe32d7bed00000000,
<     0x7d2dd12100000000, 0x6424142b00000000, 0xfa24bee700000000,
<     0x1923316900000000, 0x87239ba500000000, 0x566276f900000000,
<     0xc862dc3500000000, 0x2b6553bb00000000, 0xb565f97700000000,
<     0xac6c3c7d00000000, 0x326c96b100000000, 0xd16b193f00000000,
<     0x4f6bb3f300000000, 0xe379932a00000000, 0x7d7939e600000000,
<     0x9e7eb66800000000, 0x007e1ca400000000, 0x1977d9ae00000000,
<     0x8777736200000000, 0x6470fcec00000000, 0xfa70562000000000,
<     0x7d53cd8500000000, 0xe353674900000000, 0x0054e8c700000000,
<     0x9e54420b00000000, 0x875d870100000000, 0x195d2dcd00000000,
<     0xfa5aa24300000000, 0x645a088f00000000, 0xc848285600000000,
<     0x5648829a00000000, 0xb54f0d1400000000, 0x2b4fa7d800000000,
<     0x324662d200000000, 0xac46c81e00000000, 0x4f41479000000000,
<     0xd141ed5c00000000, 0xedc29d2900000000, 0x73c237e500000000,
<     0x90c5b86b00000000, 0x0ec512a700000000, 0x17ccd7ad00000000,
<     0x89cc7d6100000000, 0x6acbf2ef00000000, 0xf4cb582300000000,
<     0x58d978fa00000000, 0xc6d9d23600000000, 0x25de5db800000000,
<     0xbbdef77400000000, 0xa2d7327e00000000, 0x3cd798b200000000,
<     0xdfd0173c00000000, 0x41d0bdf000000000, 0xc6f3265500000000,
<     0x58f38c9900000000, 0xbbf4031700000000, 0x25f4a9db00000000,
<     0x3cfd6cd100000000, 0xa2fdc61d00000000, 0x41fa499300000000,
<     0xdffae35f00000000, 0x73e8c38600000000, 0xede8694a00000000,
<     0x0eefe6c400000000, 0x90ef4c0800000000, 0x89e6890200000000,
<     0x17e623ce00000000, 0xf4e1ac4000000000, 0x6ae1068c00000000,
<     0xbba0ebd000000000, 0x25a0411c00000000, 0xc6a7ce9200000000,
<     0x58a7645e00000000, 0x41aea15400000000, 0xdfae0b9800000000,
<     0x3ca9841600000000, 0xa2a92eda00000000, 0x0ebb0e0300000000,
<     0x90bba4cf00000000, 0x73bc2b4100000000, 0xedbc818d00000000,
<     0xf4b5448700000000, 0x6ab5ee4b00000000, 0x89b261c500000000,
<     0x17b2cb0900000000, 0x909150ac00000000, 0x0e91fa6000000000,
<     0xed9675ee00000000, 0x7396df2200000000, 0x6a9f1a2800000000,
<     0xf49fb0e400000000, 0x17983f6a00000000, 0x899895a600000000,
<     0x258ab57f00000000, 0xbb8a1fb300000000, 0x588d903d00000000,
<     0xc68d3af100000000, 0xdf84fffb00000000, 0x4184553700000000,
<     0xa283dab900000000, 0x3c83707500000000, 0xda853b5300000000,
<     0x4485919f00000000, 0xa7821e1100000000, 0x3982b4dd00000000,
<     0x208b71d700000000, 0xbe8bdb1b00000000, 0x5d8c549500000000,
<     0xc38cfe5900000000, 0x6f9ede8000000000, 0xf19e744c00000000,
<     0x1299fbc200000000, 0x8c99510e00000000, 0x9590940400000000,
<     0x0b903ec800000000, 0xe897b14600000000, 0x76971b8a00000000,
<     0xf1b4802f00000000, 0x6fb42ae300000000, 0x8cb3a56d00000000,
<     0x12b30fa100000000, 0x0bbacaab00000000, 0x95ba606700000000,
<     0x76bdefe900000000, 0xe8bd452500000000, 0x44af65fc00000000,
<     0xdaafcf3000000000, 0x39a840be00000000, 0xa7a8ea7200000000,
<     0xbea12f7800000000, 0x20a185b400000000, 0xc3a60a3a00000000,
<     0x5da6a0f600000000, 0x8ce74daa00000000, 0x12e7e76600000000,
<     0xf1e068e800000000, 0x6fe0c22400000000, 0x76e9072e00000000,
<     0xe8e9ade200000000, 0x0bee226c00000000, 0x95ee88a000000000,
<     0x39fca87900000000, 0xa7fc02b500000000, 0x44fb8d3b00000000,
<     0xdafb27f700000000, 0xc3f2e2fd00000000, 0x5df2483100000000,
<     0xbef5c7bf00000000, 0x20f56d7300000000, 0xa7d6f6d600000000,
<     0x39d65c1a00000000, 0xdad1d39400000000, 0x44d1795800000000,
<     0x5dd8bc5200000000, 0xc3d8169e00000000, 0x20df991000000000,
<     0xbedf33dc00000000, 0x12cd130500000000, 0x8ccdb9c900000000,
<     0x6fca364700000000, 0xf1ca9c8b00000000, 0xe8c3598100000000,
<     0x76c3f34d00000000, 0x95c47cc300000000, 0x0bc4d60f00000000,
<     0x3747a67a00000000, 0xa9470cb600000000, 0x4a40833800000000,
<     0xd44029f400000000, 0xcd49ecfe00000000, 0x5349463200000000,
<     0xb04ec9bc00000000, 0x2e4e637000000000, 0x825c43a900000000,
<     0x1c5ce96500000000, 0xff5b66eb00000000, 0x615bcc2700000000,
<     0x7852092d00000000, 0xe652a3e100000000, 0x05552c6f00000000,
<     0x9b5586a300000000, 0x1c761d0600000000, 0x8276b7ca00000000,
<     0x6171384400000000, 0xff71928800000000, 0xe678578200000000,
<     0x7878fd4e00000000, 0x9b7f72c000000000, 0x057fd80c00000000,
<     0xa96df8d500000000, 0x376d521900000000, 0xd46add9700000000,
<     0x4a6a775b00000000, 0x5363b25100000000, 0xcd63189d00000000,
<     0x2e64971300000000, 0xb0643ddf00000000, 0x6125d08300000000,
<     0xff257a4f00000000, 0x1c22f5c100000000, 0x82225f0d00000000,
<     0x9b2b9a0700000000, 0x052b30cb00000000, 0xe62cbf4500000000,
<     0x782c158900000000, 0xd43e355000000000, 0x4a3e9f9c00000000,
<     0xa939101200000000, 0x3739bade00000000, 0x2e307fd400000000,
<     0xb030d51800000000, 0x53375a9600000000, 0xcd37f05a00000000,
<     0x4a146bff00000000, 0xd414c13300000000, 0x37134ebd00000000,
<     0xa913e47100000000, 0xb01a217b00000000, 0x2e1a8bb700000000,
<     0xcd1d043900000000, 0x531daef500000000, 0xff0f8e2c00000000,
<     0x610f24e000000000, 0x8208ab6e00000000, 0x1c0801a200000000,
<     0x0501c4a800000000, 0x9b016e6400000000, 0x7806e1ea00000000,
<     0xe6064b2600000000}};
< 
< #else /* W == 4 */
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0xb8bc6765, 0xaa09c88b, 0x12b5afee, 0x8f629757,
<     0x37def032, 0x256b5fdc, 0x9dd738b9, 0xc5b428ef, 0x7d084f8a,
<     0x6fbde064, 0xd7018701, 0x4ad6bfb8, 0xf26ad8dd, 0xe0df7733,
<     0x58631056, 0x5019579f, 0xe8a530fa, 0xfa109f14, 0x42acf871,
<     0xdf7bc0c8, 0x67c7a7ad, 0x75720843, 0xcdce6f26, 0x95ad7f70,
<     0x2d111815, 0x3fa4b7fb, 0x8718d09e, 0x1acfe827, 0xa2738f42,
<     0xb0c620ac, 0x087a47c9, 0xa032af3e, 0x188ec85b, 0x0a3b67b5,
<     0xb28700d0, 0x2f503869, 0x97ec5f0c, 0x8559f0e2, 0x3de59787,
<     0x658687d1, 0xdd3ae0b4, 0xcf8f4f5a, 0x7733283f, 0xeae41086,
<     0x525877e3, 0x40edd80d, 0xf851bf68, 0xf02bf8a1, 0x48979fc4,
<     0x5a22302a, 0xe29e574f, 0x7f496ff6, 0xc7f50893, 0xd540a77d,
<     0x6dfcc018, 0x359fd04e, 0x8d23b72b, 0x9f9618c5, 0x272a7fa0,
<     0xbafd4719, 0x0241207c, 0x10f48f92, 0xa848e8f7, 0x9b14583d,
<     0x23a83f58, 0x311d90b6, 0x89a1f7d3, 0x1476cf6a, 0xaccaa80f,
<     0xbe7f07e1, 0x06c36084, 0x5ea070d2, 0xe61c17b7, 0xf4a9b859,
<     0x4c15df3c, 0xd1c2e785, 0x697e80e0, 0x7bcb2f0e, 0xc377486b,
<     0xcb0d0fa2, 0x73b168c7, 0x6104c729, 0xd9b8a04c, 0x446f98f5,
<     0xfcd3ff90, 0xee66507e, 0x56da371b, 0x0eb9274d, 0xb6054028,
<     0xa4b0efc6, 0x1c0c88a3, 0x81dbb01a, 0x3967d77f, 0x2bd27891,
<     0x936e1ff4, 0x3b26f703, 0x839a9066, 0x912f3f88, 0x299358ed,
<     0xb4446054, 0x0cf80731, 0x1e4da8df, 0xa6f1cfba, 0xfe92dfec,
<     0x462eb889, 0x549b1767, 0xec277002, 0x71f048bb, 0xc94c2fde,
<     0xdbf98030, 0x6345e755, 0x6b3fa09c, 0xd383c7f9, 0xc1366817,
<     0x798a0f72, 0xe45d37cb, 0x5ce150ae, 0x4e54ff40, 0xf6e89825,
<     0xae8b8873, 0x1637ef16, 0x048240f8, 0xbc3e279d, 0x21e91f24,
<     0x99557841, 0x8be0d7af, 0x335cb0ca, 0xed59b63b, 0x55e5d15e,
<     0x47507eb0, 0xffec19d5, 0x623b216c, 0xda874609, 0xc832e9e7,
<     0x708e8e82, 0x28ed9ed4, 0x9051f9b1, 0x82e4565f, 0x3a58313a,
<     0xa78f0983, 0x1f336ee6, 0x0d86c108, 0xb53aa66d, 0xbd40e1a4,
<     0x05fc86c1, 0x1749292f, 0xaff54e4a, 0x322276f3, 0x8a9e1196,
<     0x982bbe78, 0x2097d91d, 0x78f4c94b, 0xc048ae2e, 0xd2fd01c0,
<     0x6a4166a5, 0xf7965e1c, 0x4f2a3979, 0x5d9f9697, 0xe523f1f2,
<     0x4d6b1905, 0xf5d77e60, 0xe762d18e, 0x5fdeb6eb, 0xc2098e52,
<     0x7ab5e937, 0x680046d9, 0xd0bc21bc, 0x88df31ea, 0x3063568f,
<     0x22d6f961, 0x9a6a9e04, 0x07bda6bd, 0xbf01c1d8, 0xadb46e36,
<     0x15080953, 0x1d724e9a, 0xa5ce29ff, 0xb77b8611, 0x0fc7e174,
<     0x9210d9cd, 0x2aacbea8, 0x38191146, 0x80a57623, 0xd8c66675,
<     0x607a0110, 0x72cfaefe, 0xca73c99b, 0x57a4f122, 0xef189647,
<     0xfdad39a9, 0x45115ecc, 0x764dee06, 0xcef18963, 0xdc44268d,
<     0x64f841e8, 0xf92f7951, 0x41931e34, 0x5326b1da, 0xeb9ad6bf,
<     0xb3f9c6e9, 0x0b45a18c, 0x19f00e62, 0xa14c6907, 0x3c9b51be,
<     0x842736db, 0x96929935, 0x2e2efe50, 0x2654b999, 0x9ee8defc,
<     0x8c5d7112, 0x34e11677, 0xa9362ece, 0x118a49ab, 0x033fe645,
<     0xbb838120, 0xe3e09176, 0x5b5cf613, 0x49e959fd, 0xf1553e98,
<     0x6c820621, 0xd43e6144, 0xc68bceaa, 0x7e37a9cf, 0xd67f4138,
<     0x6ec3265d, 0x7c7689b3, 0xc4caeed6, 0x591dd66f, 0xe1a1b10a,
<     0xf3141ee4, 0x4ba87981, 0x13cb69d7, 0xab770eb2, 0xb9c2a15c,
<     0x017ec639, 0x9ca9fe80, 0x241599e5, 0x36a0360b, 0x8e1c516e,
<     0x866616a7, 0x3eda71c2, 0x2c6fde2c, 0x94d3b949, 0x090481f0,
<     0xb1b8e695, 0xa30d497b, 0x1bb12e1e, 0x43d23e48, 0xfb6e592d,
<     0xe9dbf6c3, 0x516791a6, 0xccb0a91f, 0x740cce7a, 0x66b96194,
<     0xde0506f1},
<    {0x00000000, 0x01c26a37, 0x0384d46e, 0x0246be59, 0x0709a8dc,
<     0x06cbc2eb, 0x048d7cb2, 0x054f1685, 0x0e1351b8, 0x0fd13b8f,
<     0x0d9785d6, 0x0c55efe1, 0x091af964, 0x08d89353, 0x0a9e2d0a,
<     0x0b5c473d, 0x1c26a370, 0x1de4c947, 0x1fa2771e, 0x1e601d29,
<     0x1b2f0bac, 0x1aed619b, 0x18abdfc2, 0x1969b5f5, 0x1235f2c8,
<     0x13f798ff, 0x11b126a6, 0x10734c91, 0x153c5a14, 0x14fe3023,
<     0x16b88e7a, 0x177ae44d, 0x384d46e0, 0x398f2cd7, 0x3bc9928e,
<     0x3a0bf8b9, 0x3f44ee3c, 0x3e86840b, 0x3cc03a52, 0x3d025065,
<     0x365e1758, 0x379c7d6f, 0x35dac336, 0x3418a901, 0x3157bf84,
<     0x3095d5b3, 0x32d36bea, 0x331101dd, 0x246be590, 0x25a98fa7,
<     0x27ef31fe, 0x262d5bc9, 0x23624d4c, 0x22a0277b, 0x20e69922,
<     0x2124f315, 0x2a78b428, 0x2bbade1f, 0x29fc6046, 0x283e0a71,
<     0x2d711cf4, 0x2cb376c3, 0x2ef5c89a, 0x2f37a2ad, 0x709a8dc0,
<     0x7158e7f7, 0x731e59ae, 0x72dc3399, 0x7793251c, 0x76514f2b,
<     0x7417f172, 0x75d59b45, 0x7e89dc78, 0x7f4bb64f, 0x7d0d0816,
<     0x7ccf6221, 0x798074a4, 0x78421e93, 0x7a04a0ca, 0x7bc6cafd,
<     0x6cbc2eb0, 0x6d7e4487, 0x6f38fade, 0x6efa90e9, 0x6bb5866c,
<     0x6a77ec5b, 0x68315202, 0x69f33835, 0x62af7f08, 0x636d153f,
<     0x612bab66, 0x60e9c151, 0x65a6d7d4, 0x6464bde3, 0x662203ba,
<     0x67e0698d, 0x48d7cb20, 0x4915a117, 0x4b531f4e, 0x4a917579,
<     0x4fde63fc, 0x4e1c09cb, 0x4c5ab792, 0x4d98dda5, 0x46c49a98,
<     0x4706f0af, 0x45404ef6, 0x448224c1, 0x41cd3244, 0x400f5873,
<     0x4249e62a, 0x438b8c1d, 0x54f16850, 0x55330267, 0x5775bc3e,
<     0x56b7d609, 0x53f8c08c, 0x523aaabb, 0x507c14e2, 0x51be7ed5,
<     0x5ae239e8, 0x5b2053df, 0x5966ed86, 0x58a487b1, 0x5deb9134,
<     0x5c29fb03, 0x5e6f455a, 0x5fad2f6d, 0xe1351b80, 0xe0f771b7,
<     0xe2b1cfee, 0xe373a5d9, 0xe63cb35c, 0xe7fed96b, 0xe5b86732,
<     0xe47a0d05, 0xef264a38, 0xeee4200f, 0xeca29e56, 0xed60f461,
<     0xe82fe2e4, 0xe9ed88d3, 0xebab368a, 0xea695cbd, 0xfd13b8f0,
<     0xfcd1d2c7, 0xfe976c9e, 0xff5506a9, 0xfa1a102c, 0xfbd87a1b,
<     0xf99ec442, 0xf85cae75, 0xf300e948, 0xf2c2837f, 0xf0843d26,
<     0xf1465711, 0xf4094194, 0xf5cb2ba3, 0xf78d95fa, 0xf64fffcd,
<     0xd9785d60, 0xd8ba3757, 0xdafc890e, 0xdb3ee339, 0xde71f5bc,
<     0xdfb39f8b, 0xddf521d2, 0xdc374be5, 0xd76b0cd8, 0xd6a966ef,
<     0xd4efd8b6, 0xd52db281, 0xd062a404, 0xd1a0ce33, 0xd3e6706a,
<     0xd2241a5d, 0xc55efe10, 0xc49c9427, 0xc6da2a7e, 0xc7184049,
<     0xc25756cc, 0xc3953cfb, 0xc1d382a2, 0xc011e895, 0xcb4dafa8,
<     0xca8fc59f, 0xc8c97bc6, 0xc90b11f1, 0xcc440774, 0xcd866d43,
<     0xcfc0d31a, 0xce02b92d, 0x91af9640, 0x906dfc77, 0x922b422e,
<     0x93e92819, 0x96a63e9c, 0x976454ab, 0x9522eaf2, 0x94e080c5,
<     0x9fbcc7f8, 0x9e7eadcf, 0x9c381396, 0x9dfa79a1, 0x98b56f24,
<     0x99770513, 0x9b31bb4a, 0x9af3d17d, 0x8d893530, 0x8c4b5f07,
<     0x8e0de15e, 0x8fcf8b69, 0x8a809dec, 0x8b42f7db, 0x89044982,
<     0x88c623b5, 0x839a6488, 0x82580ebf, 0x801eb0e6, 0x81dcdad1,
<     0x8493cc54, 0x8551a663, 0x8717183a, 0x86d5720d, 0xa9e2d0a0,
<     0xa820ba97, 0xaa6604ce, 0xaba46ef9, 0xaeeb787c, 0xaf29124b,
<     0xad6fac12, 0xacadc625, 0xa7f18118, 0xa633eb2f, 0xa4755576,
<     0xa5b73f41, 0xa0f829c4, 0xa13a43f3, 0xa37cfdaa, 0xa2be979d,
<     0xb5c473d0, 0xb40619e7, 0xb640a7be, 0xb782cd89, 0xb2cddb0c,
<     0xb30fb13b, 0xb1490f62, 0xb08b6555, 0xbbd72268, 0xba15485f,
<     0xb853f606, 0xb9919c31, 0xbcde8ab4, 0xbd1ce083, 0xbf5a5eda,
<     0xbe9834ed},
<    {0x00000000, 0x191b3141, 0x32366282, 0x2b2d53c3, 0x646cc504,
<     0x7d77f445, 0x565aa786, 0x4f4196c7, 0xc8d98a08, 0xd1c2bb49,
<     0xfaefe88a, 0xe3f4d9cb, 0xacb54f0c, 0xb5ae7e4d, 0x9e832d8e,
<     0x87981ccf, 0x4ac21251, 0x53d92310, 0x78f470d3, 0x61ef4192,
<     0x2eaed755, 0x37b5e614, 0x1c98b5d7, 0x05838496, 0x821b9859,
<     0x9b00a918, 0xb02dfadb, 0xa936cb9a, 0xe6775d5d, 0xff6c6c1c,
<     0xd4413fdf, 0xcd5a0e9e, 0x958424a2, 0x8c9f15e3, 0xa7b24620,
<     0xbea97761, 0xf1e8e1a6, 0xe8f3d0e7, 0xc3de8324, 0xdac5b265,
<     0x5d5daeaa, 0x44469feb, 0x6f6bcc28, 0x7670fd69, 0x39316bae,
<     0x202a5aef, 0x0b07092c, 0x121c386d, 0xdf4636f3, 0xc65d07b2,
<     0xed705471, 0xf46b6530, 0xbb2af3f7, 0xa231c2b6, 0x891c9175,
<     0x9007a034, 0x179fbcfb, 0x0e848dba, 0x25a9de79, 0x3cb2ef38,
<     0x73f379ff, 0x6ae848be, 0x41c51b7d, 0x58de2a3c, 0xf0794f05,
<     0xe9627e44, 0xc24f2d87, 0xdb541cc6, 0x94158a01, 0x8d0ebb40,
<     0xa623e883, 0xbf38d9c2, 0x38a0c50d, 0x21bbf44c, 0x0a96a78f,
<     0x138d96ce, 0x5ccc0009, 0x45d73148, 0x6efa628b, 0x77e153ca,
<     0xbabb5d54, 0xa3a06c15, 0x888d3fd6, 0x91960e97, 0xded79850,
<     0xc7cca911, 0xece1fad2, 0xf5facb93, 0x7262d75c, 0x6b79e61d,
<     0x4054b5de, 0x594f849f, 0x160e1258, 0x0f152319, 0x243870da,
<     0x3d23419b, 0x65fd6ba7, 0x7ce65ae6, 0x57cb0925, 0x4ed03864,
<     0x0191aea3, 0x188a9fe2, 0x33a7cc21, 0x2abcfd60, 0xad24e1af,
<     0xb43fd0ee, 0x9f12832d, 0x8609b26c, 0xc94824ab, 0xd05315ea,
<     0xfb7e4629, 0xe2657768, 0x2f3f79f6, 0x362448b7, 0x1d091b74,
<     0x04122a35, 0x4b53bcf2, 0x52488db3, 0x7965de70, 0x607eef31,
<     0xe7e6f3fe, 0xfefdc2bf, 0xd5d0917c, 0xcccba03d, 0x838a36fa,
<     0x9a9107bb, 0xb1bc5478, 0xa8a76539, 0x3b83984b, 0x2298a90a,
<     0x09b5fac9, 0x10aecb88, 0x5fef5d4f, 0x46f46c0e, 0x6dd93fcd,
<     0x74c20e8c, 0xf35a1243, 0xea412302, 0xc16c70c1, 0xd8774180,
<     0x9736d747, 0x8e2de606, 0xa500b5c5, 0xbc1b8484, 0x71418a1a,
<     0x685abb5b, 0x4377e898, 0x5a6cd9d9, 0x152d4f1e, 0x0c367e5f,
<     0x271b2d9c, 0x3e001cdd, 0xb9980012, 0xa0833153, 0x8bae6290,
<     0x92b553d1, 0xddf4c516, 0xc4eff457, 0xefc2a794, 0xf6d996d5,
<     0xae07bce9, 0xb71c8da8, 0x9c31de6b, 0x852aef2a, 0xca6b79ed,
<     0xd37048ac, 0xf85d1b6f, 0xe1462a2e, 0x66de36e1, 0x7fc507a0,
<     0x54e85463, 0x4df36522, 0x02b2f3e5, 0x1ba9c2a4, 0x30849167,
<     0x299fa026, 0xe4c5aeb8, 0xfdde9ff9, 0xd6f3cc3a, 0xcfe8fd7b,
<     0x80a96bbc, 0x99b25afd, 0xb29f093e, 0xab84387f, 0x2c1c24b0,
<     0x350715f1, 0x1e2a4632, 0x07317773, 0x4870e1b4, 0x516bd0f5,
<     0x7a468336, 0x635db277, 0xcbfad74e, 0xd2e1e60f, 0xf9ccb5cc,
<     0xe0d7848d, 0xaf96124a, 0xb68d230b, 0x9da070c8, 0x84bb4189,
<     0x03235d46, 0x1a386c07, 0x31153fc4, 0x280e0e85, 0x674f9842,
<     0x7e54a903, 0x5579fac0, 0x4c62cb81, 0x8138c51f, 0x9823f45e,
<     0xb30ea79d, 0xaa1596dc, 0xe554001b, 0xfc4f315a, 0xd7626299,
<     0xce7953d8, 0x49e14f17, 0x50fa7e56, 0x7bd72d95, 0x62cc1cd4,
<     0x2d8d8a13, 0x3496bb52, 0x1fbbe891, 0x06a0d9d0, 0x5e7ef3ec,
<     0x4765c2ad, 0x6c48916e, 0x7553a02f, 0x3a1236e8, 0x230907a9,
<     0x0824546a, 0x113f652b, 0x96a779e4, 0x8fbc48a5, 0xa4911b66,
<     0xbd8a2a27, 0xf2cbbce0, 0xebd08da1, 0xc0fdde62, 0xd9e6ef23,
<     0x14bce1bd, 0x0da7d0fc, 0x268a833f, 0x3f91b27e, 0x70d024b9,
<     0x69cb15f8, 0x42e6463b, 0x5bfd777a, 0xdc656bb5, 0xc57e5af4,
<     0xee530937, 0xf7483876, 0xb809aeb1, 0xa1129ff0, 0x8a3fcc33,
<     0x9324fd72},
<    {0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
<     0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
<     0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
<     0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
<     0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
<     0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
<     0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
<     0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
<     0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
<     0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
<     0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
<     0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
<     0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
<     0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
<     0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
<     0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
<     0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
<     0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
<     0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
<     0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
<     0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
<     0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
<     0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
<     0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
<     0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
<     0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
<     0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
<     0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
<     0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
<     0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
<     0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
<     0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
<     0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
<     0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
<     0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
<     0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
<     0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
<     0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
<     0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
<     0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
<     0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
<     0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
<     0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
<     0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
<     0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
<     0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
<     0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
<     0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
<     0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
<     0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
<     0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
<     0x2d02ef8d}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x00000000, 0x96300777, 0x2c610eee, 0xba510999, 0x19c46d07,
<     0x8ff46a70, 0x35a563e9, 0xa395649e, 0x3288db0e, 0xa4b8dc79,
<     0x1ee9d5e0, 0x88d9d297, 0x2b4cb609, 0xbd7cb17e, 0x072db8e7,
<     0x911dbf90, 0x6410b71d, 0xf220b06a, 0x4871b9f3, 0xde41be84,
<     0x7dd4da1a, 0xebe4dd6d, 0x51b5d4f4, 0xc785d383, 0x56986c13,
<     0xc0a86b64, 0x7af962fd, 0xecc9658a, 0x4f5c0114, 0xd96c0663,
<     0x633d0ffa, 0xf50d088d, 0xc8206e3b, 0x5e10694c, 0xe44160d5,
<     0x727167a2, 0xd1e4033c, 0x47d4044b, 0xfd850dd2, 0x6bb50aa5,
<     0xfaa8b535, 0x6c98b242, 0xd6c9bbdb, 0x40f9bcac, 0xe36cd832,
<     0x755cdf45, 0xcf0dd6dc, 0x593dd1ab, 0xac30d926, 0x3a00de51,
<     0x8051d7c8, 0x1661d0bf, 0xb5f4b421, 0x23c4b356, 0x9995bacf,
<     0x0fa5bdb8, 0x9eb80228, 0x0888055f, 0xb2d90cc6, 0x24e90bb1,
<     0x877c6f2f, 0x114c6858, 0xab1d61c1, 0x3d2d66b6, 0x9041dc76,
<     0x0671db01, 0xbc20d298, 0x2a10d5ef, 0x8985b171, 0x1fb5b606,
<     0xa5e4bf9f, 0x33d4b8e8, 0xa2c90778, 0x34f9000f, 0x8ea80996,
<     0x18980ee1, 0xbb0d6a7f, 0x2d3d6d08, 0x976c6491, 0x015c63e6,
<     0xf4516b6b, 0x62616c1c, 0xd8306585, 0x4e0062f2, 0xed95066c,
<     0x7ba5011b, 0xc1f40882, 0x57c40ff5, 0xc6d9b065, 0x50e9b712,
<     0xeab8be8b, 0x7c88b9fc, 0xdf1ddd62, 0x492dda15, 0xf37cd38c,
<     0x654cd4fb, 0x5861b24d, 0xce51b53a, 0x7400bca3, 0xe230bbd4,
<     0x41a5df4a, 0xd795d83d, 0x6dc4d1a4, 0xfbf4d6d3, 0x6ae96943,
<     0xfcd96e34, 0x468867ad, 0xd0b860da, 0x732d0444, 0xe51d0333,
<     0x5f4c0aaa, 0xc97c0ddd, 0x3c710550, 0xaa410227, 0x10100bbe,
<     0x86200cc9, 0x25b56857, 0xb3856f20, 0x09d466b9, 0x9fe461ce,
<     0x0ef9de5e, 0x98c9d929, 0x2298d0b0, 0xb4a8d7c7, 0x173db359,
<     0x810db42e, 0x3b5cbdb7, 0xad6cbac0, 0x2083b8ed, 0xb6b3bf9a,
<     0x0ce2b603, 0x9ad2b174, 0x3947d5ea, 0xaf77d29d, 0x1526db04,
<     0x8316dc73, 0x120b63e3, 0x843b6494, 0x3e6a6d0d, 0xa85a6a7a,
<     0x0bcf0ee4, 0x9dff0993, 0x27ae000a, 0xb19e077d, 0x44930ff0,
<     0xd2a30887, 0x68f2011e, 0xfec20669, 0x5d5762f7, 0xcb676580,
<     0x71366c19, 0xe7066b6e, 0x761bd4fe, 0xe02bd389, 0x5a7ada10,
<     0xcc4add67, 0x6fdfb9f9, 0xf9efbe8e, 0x43beb717, 0xd58eb060,
<     0xe8a3d6d6, 0x7e93d1a1, 0xc4c2d838, 0x52f2df4f, 0xf167bbd1,
<     0x6757bca6, 0xdd06b53f, 0x4b36b248, 0xda2b0dd8, 0x4c1b0aaf,
<     0xf64a0336, 0x607a0441, 0xc3ef60df, 0x55df67a8, 0xef8e6e31,
<     0x79be6946, 0x8cb361cb, 0x1a8366bc, 0xa0d26f25, 0x36e26852,
<     0x95770ccc, 0x03470bbb, 0xb9160222, 0x2f260555, 0xbe3bbac5,
<     0x280bbdb2, 0x925ab42b, 0x046ab35c, 0xa7ffd7c2, 0x31cfd0b5,
<     0x8b9ed92c, 0x1daede5b, 0xb0c2649b, 0x26f263ec, 0x9ca36a75,
<     0x0a936d02, 0xa906099c, 0x3f360eeb, 0x85670772, 0x13570005,
<     0x824abf95, 0x147ab8e2, 0xae2bb17b, 0x381bb60c, 0x9b8ed292,
<     0x0dbed5e5, 0xb7efdc7c, 0x21dfdb0b, 0xd4d2d386, 0x42e2d4f1,
<     0xf8b3dd68, 0x6e83da1f, 0xcd16be81, 0x5b26b9f6, 0xe177b06f,
<     0x7747b718, 0xe65a0888, 0x706a0fff, 0xca3b0666, 0x5c0b0111,
<     0xff9e658f, 0x69ae62f8, 0xd3ff6b61, 0x45cf6c16, 0x78e20aa0,
<     0xeed20dd7, 0x5483044e, 0xc2b30339, 0x612667a7, 0xf71660d0,
<     0x4d476949, 0xdb776e3e, 0x4a6ad1ae, 0xdc5ad6d9, 0x660bdf40,
<     0xf03bd837, 0x53aebca9, 0xc59ebbde, 0x7fcfb247, 0xe9ffb530,
<     0x1cf2bdbd, 0x8ac2baca, 0x3093b353, 0xa6a3b424, 0x0536d0ba,
<     0x9306d7cd, 0x2957de54, 0xbf67d923, 0x2e7a66b3, 0xb84a61c4,
<     0x021b685d, 0x942b6f2a, 0x37be0bb4, 0xa18e0cc3, 0x1bdf055a,
<     0x8def022d},
<    {0x00000000, 0x41311b19, 0x82623632, 0xc3532d2b, 0x04c56c64,
<     0x45f4777d, 0x86a75a56, 0xc796414f, 0x088ad9c8, 0x49bbc2d1,
<     0x8ae8effa, 0xcbd9f4e3, 0x0c4fb5ac, 0x4d7eaeb5, 0x8e2d839e,
<     0xcf1c9887, 0x5112c24a, 0x1023d953, 0xd370f478, 0x9241ef61,
<     0x55d7ae2e, 0x14e6b537, 0xd7b5981c, 0x96848305, 0x59981b82,
<     0x18a9009b, 0xdbfa2db0, 0x9acb36a9, 0x5d5d77e6, 0x1c6c6cff,
<     0xdf3f41d4, 0x9e0e5acd, 0xa2248495, 0xe3159f8c, 0x2046b2a7,
<     0x6177a9be, 0xa6e1e8f1, 0xe7d0f3e8, 0x2483dec3, 0x65b2c5da,
<     0xaaae5d5d, 0xeb9f4644, 0x28cc6b6f, 0x69fd7076, 0xae6b3139,
<     0xef5a2a20, 0x2c09070b, 0x6d381c12, 0xf33646df, 0xb2075dc6,
<     0x715470ed, 0x30656bf4, 0xf7f32abb, 0xb6c231a2, 0x75911c89,
<     0x34a00790, 0xfbbc9f17, 0xba8d840e, 0x79dea925, 0x38efb23c,
<     0xff79f373, 0xbe48e86a, 0x7d1bc541, 0x3c2ade58, 0x054f79f0,
<     0x447e62e9, 0x872d4fc2, 0xc61c54db, 0x018a1594, 0x40bb0e8d,
<     0x83e823a6, 0xc2d938bf, 0x0dc5a038, 0x4cf4bb21, 0x8fa7960a,
<     0xce968d13, 0x0900cc5c, 0x4831d745, 0x8b62fa6e, 0xca53e177,
<     0x545dbbba, 0x156ca0a3, 0xd63f8d88, 0x970e9691, 0x5098d7de,
<     0x11a9ccc7, 0xd2fae1ec, 0x93cbfaf5, 0x5cd76272, 0x1de6796b,
<     0xdeb55440, 0x9f844f59, 0x58120e16, 0x1923150f, 0xda703824,
<     0x9b41233d, 0xa76bfd65, 0xe65ae67c, 0x2509cb57, 0x6438d04e,
<     0xa3ae9101, 0xe29f8a18, 0x21cca733, 0x60fdbc2a, 0xafe124ad,
<     0xeed03fb4, 0x2d83129f, 0x6cb20986, 0xab2448c9, 0xea1553d0,
<     0x29467efb, 0x687765e2, 0xf6793f2f, 0xb7482436, 0x741b091d,
<     0x352a1204, 0xf2bc534b, 0xb38d4852, 0x70de6579, 0x31ef7e60,
<     0xfef3e6e7, 0xbfc2fdfe, 0x7c91d0d5, 0x3da0cbcc, 0xfa368a83,
<     0xbb07919a, 0x7854bcb1, 0x3965a7a8, 0x4b98833b, 0x0aa99822,
<     0xc9fab509, 0x88cbae10, 0x4f5def5f, 0x0e6cf446, 0xcd3fd96d,
<     0x8c0ec274, 0x43125af3, 0x022341ea, 0xc1706cc1, 0x804177d8,
<     0x47d73697, 0x06e62d8e, 0xc5b500a5, 0x84841bbc, 0x1a8a4171,
<     0x5bbb5a68, 0x98e87743, 0xd9d96c5a, 0x1e4f2d15, 0x5f7e360c,
<     0x9c2d1b27, 0xdd1c003e, 0x120098b9, 0x533183a0, 0x9062ae8b,
<     0xd153b592, 0x16c5f4dd, 0x57f4efc4, 0x94a7c2ef, 0xd596d9f6,
<     0xe9bc07ae, 0xa88d1cb7, 0x6bde319c, 0x2aef2a85, 0xed796bca,
<     0xac4870d3, 0x6f1b5df8, 0x2e2a46e1, 0xe136de66, 0xa007c57f,
<     0x6354e854, 0x2265f34d, 0xe5f3b202, 0xa4c2a91b, 0x67918430,
<     0x26a09f29, 0xb8aec5e4, 0xf99fdefd, 0x3accf3d6, 0x7bfde8cf,
<     0xbc6ba980, 0xfd5ab299, 0x3e099fb2, 0x7f3884ab, 0xb0241c2c,
<     0xf1150735, 0x32462a1e, 0x73773107, 0xb4e17048, 0xf5d06b51,
<     0x3683467a, 0x77b25d63, 0x4ed7facb, 0x0fe6e1d2, 0xccb5ccf9,
<     0x8d84d7e0, 0x4a1296af, 0x0b238db6, 0xc870a09d, 0x8941bb84,
<     0x465d2303, 0x076c381a, 0xc43f1531, 0x850e0e28, 0x42984f67,
<     0x03a9547e, 0xc0fa7955, 0x81cb624c, 0x1fc53881, 0x5ef42398,
<     0x9da70eb3, 0xdc9615aa, 0x1b0054e5, 0x5a314ffc, 0x996262d7,
<     0xd85379ce, 0x174fe149, 0x567efa50, 0x952dd77b, 0xd41ccc62,
<     0x138a8d2d, 0x52bb9634, 0x91e8bb1f, 0xd0d9a006, 0xecf37e5e,
<     0xadc26547, 0x6e91486c, 0x2fa05375, 0xe836123a, 0xa9070923,
<     0x6a542408, 0x2b653f11, 0xe479a796, 0xa548bc8f, 0x661b91a4,
<     0x272a8abd, 0xe0bccbf2, 0xa18dd0eb, 0x62defdc0, 0x23efe6d9,
<     0xbde1bc14, 0xfcd0a70d, 0x3f838a26, 0x7eb2913f, 0xb924d070,
<     0xf815cb69, 0x3b46e642, 0x7a77fd5b, 0xb56b65dc, 0xf45a7ec5,
<     0x370953ee, 0x763848f7, 0xb1ae09b8, 0xf09f12a1, 0x33cc3f8a,
<     0x72fd2493},
<    {0x00000000, 0x376ac201, 0x6ed48403, 0x59be4602, 0xdca80907,
<     0xebc2cb06, 0xb27c8d04, 0x85164f05, 0xb851130e, 0x8f3bd10f,
<     0xd685970d, 0xe1ef550c, 0x64f91a09, 0x5393d808, 0x0a2d9e0a,
<     0x3d475c0b, 0x70a3261c, 0x47c9e41d, 0x1e77a21f, 0x291d601e,
<     0xac0b2f1b, 0x9b61ed1a, 0xc2dfab18, 0xf5b56919, 0xc8f23512,
<     0xff98f713, 0xa626b111, 0x914c7310, 0x145a3c15, 0x2330fe14,
<     0x7a8eb816, 0x4de47a17, 0xe0464d38, 0xd72c8f39, 0x8e92c93b,
<     0xb9f80b3a, 0x3cee443f, 0x0b84863e, 0x523ac03c, 0x6550023d,
<     0x58175e36, 0x6f7d9c37, 0x36c3da35, 0x01a91834, 0x84bf5731,
<     0xb3d59530, 0xea6bd332, 0xdd011133, 0x90e56b24, 0xa78fa925,
<     0xfe31ef27, 0xc95b2d26, 0x4c4d6223, 0x7b27a022, 0x2299e620,
<     0x15f32421, 0x28b4782a, 0x1fdeba2b, 0x4660fc29, 0x710a3e28,
<     0xf41c712d, 0xc376b32c, 0x9ac8f52e, 0xada2372f, 0xc08d9a70,
<     0xf7e75871, 0xae591e73, 0x9933dc72, 0x1c259377, 0x2b4f5176,
<     0x72f11774, 0x459bd575, 0x78dc897e, 0x4fb64b7f, 0x16080d7d,
<     0x2162cf7c, 0xa4748079, 0x931e4278, 0xcaa0047a, 0xfdcac67b,
<     0xb02ebc6c, 0x87447e6d, 0xdefa386f, 0xe990fa6e, 0x6c86b56b,
<     0x5bec776a, 0x02523168, 0x3538f369, 0x087faf62, 0x3f156d63,
<     0x66ab2b61, 0x51c1e960, 0xd4d7a665, 0xe3bd6464, 0xba032266,
<     0x8d69e067, 0x20cbd748, 0x17a11549, 0x4e1f534b, 0x7975914a,
<     0xfc63de4f, 0xcb091c4e, 0x92b75a4c, 0xa5dd984d, 0x989ac446,
<     0xaff00647, 0xf64e4045, 0xc1248244, 0x4432cd41, 0x73580f40,
<     0x2ae64942, 0x1d8c8b43, 0x5068f154, 0x67023355, 0x3ebc7557,
<     0x09d6b756, 0x8cc0f853, 0xbbaa3a52, 0xe2147c50, 0xd57ebe51,
<     0xe839e25a, 0xdf53205b, 0x86ed6659, 0xb187a458, 0x3491eb5d,
<     0x03fb295c, 0x5a456f5e, 0x6d2fad5f, 0x801b35e1, 0xb771f7e0,
<     0xeecfb1e2, 0xd9a573e3, 0x5cb33ce6, 0x6bd9fee7, 0x3267b8e5,
<     0x050d7ae4, 0x384a26ef, 0x0f20e4ee, 0x569ea2ec, 0x61f460ed,
<     0xe4e22fe8, 0xd388ede9, 0x8a36abeb, 0xbd5c69ea, 0xf0b813fd,
<     0xc7d2d1fc, 0x9e6c97fe, 0xa90655ff, 0x2c101afa, 0x1b7ad8fb,
<     0x42c49ef9, 0x75ae5cf8, 0x48e900f3, 0x7f83c2f2, 0x263d84f0,
<     0x115746f1, 0x944109f4, 0xa32bcbf5, 0xfa958df7, 0xcdff4ff6,
<     0x605d78d9, 0x5737bad8, 0x0e89fcda, 0x39e33edb, 0xbcf571de,
<     0x8b9fb3df, 0xd221f5dd, 0xe54b37dc, 0xd80c6bd7, 0xef66a9d6,
<     0xb6d8efd4, 0x81b22dd5, 0x04a462d0, 0x33cea0d1, 0x6a70e6d3,
<     0x5d1a24d2, 0x10fe5ec5, 0x27949cc4, 0x7e2adac6, 0x494018c7,
<     0xcc5657c2, 0xfb3c95c3, 0xa282d3c1, 0x95e811c0, 0xa8af4dcb,
<     0x9fc58fca, 0xc67bc9c8, 0xf1110bc9, 0x740744cc, 0x436d86cd,
<     0x1ad3c0cf, 0x2db902ce, 0x4096af91, 0x77fc6d90, 0x2e422b92,
<     0x1928e993, 0x9c3ea696, 0xab546497, 0xf2ea2295, 0xc580e094,
<     0xf8c7bc9f, 0xcfad7e9e, 0x9613389c, 0xa179fa9d, 0x246fb598,
<     0x13057799, 0x4abb319b, 0x7dd1f39a, 0x3035898d, 0x075f4b8c,
<     0x5ee10d8e, 0x698bcf8f, 0xec9d808a, 0xdbf7428b, 0x82490489,
<     0xb523c688, 0x88649a83, 0xbf0e5882, 0xe6b01e80, 0xd1dadc81,
<     0x54cc9384, 0x63a65185, 0x3a181787, 0x0d72d586, 0xa0d0e2a9,
<     0x97ba20a8, 0xce0466aa, 0xf96ea4ab, 0x7c78ebae, 0x4b1229af,
<     0x12ac6fad, 0x25c6adac, 0x1881f1a7, 0x2feb33a6, 0x765575a4,
<     0x413fb7a5, 0xc429f8a0, 0xf3433aa1, 0xaafd7ca3, 0x9d97bea2,
<     0xd073c4b5, 0xe71906b4, 0xbea740b6, 0x89cd82b7, 0x0cdbcdb2,
<     0x3bb10fb3, 0x620f49b1, 0x55658bb0, 0x6822d7bb, 0x5f4815ba,
<     0x06f653b8, 0x319c91b9, 0xb48adebc, 0x83e01cbd, 0xda5e5abf,
<     0xed3498be},
<    {0x00000000, 0x6567bcb8, 0x8bc809aa, 0xeeafb512, 0x5797628f,
<     0x32f0de37, 0xdc5f6b25, 0xb938d79d, 0xef28b4c5, 0x8a4f087d,
<     0x64e0bd6f, 0x018701d7, 0xb8bfd64a, 0xddd86af2, 0x3377dfe0,
<     0x56106358, 0x9f571950, 0xfa30a5e8, 0x149f10fa, 0x71f8ac42,
<     0xc8c07bdf, 0xada7c767, 0x43087275, 0x266fcecd, 0x707fad95,
<     0x1518112d, 0xfbb7a43f, 0x9ed01887, 0x27e8cf1a, 0x428f73a2,
<     0xac20c6b0, 0xc9477a08, 0x3eaf32a0, 0x5bc88e18, 0xb5673b0a,
<     0xd00087b2, 0x6938502f, 0x0c5fec97, 0xe2f05985, 0x8797e53d,
<     0xd1878665, 0xb4e03add, 0x5a4f8fcf, 0x3f283377, 0x8610e4ea,
<     0xe3775852, 0x0dd8ed40, 0x68bf51f8, 0xa1f82bf0, 0xc49f9748,
<     0x2a30225a, 0x4f579ee2, 0xf66f497f, 0x9308f5c7, 0x7da740d5,
<     0x18c0fc6d, 0x4ed09f35, 0x2bb7238d, 0xc518969f, 0xa07f2a27,
<     0x1947fdba, 0x7c204102, 0x928ff410, 0xf7e848a8, 0x3d58149b,
<     0x583fa823, 0xb6901d31, 0xd3f7a189, 0x6acf7614, 0x0fa8caac,
<     0xe1077fbe, 0x8460c306, 0xd270a05e, 0xb7171ce6, 0x59b8a9f4,
<     0x3cdf154c, 0x85e7c2d1, 0xe0807e69, 0x0e2fcb7b, 0x6b4877c3,
<     0xa20f0dcb, 0xc768b173, 0x29c70461, 0x4ca0b8d9, 0xf5986f44,
<     0x90ffd3fc, 0x7e5066ee, 0x1b37da56, 0x4d27b90e, 0x284005b6,
<     0xc6efb0a4, 0xa3880c1c, 0x1ab0db81, 0x7fd76739, 0x9178d22b,
<     0xf41f6e93, 0x03f7263b, 0x66909a83, 0x883f2f91, 0xed589329,
<     0x546044b4, 0x3107f80c, 0xdfa84d1e, 0xbacff1a6, 0xecdf92fe,
<     0x89b82e46, 0x67179b54, 0x027027ec, 0xbb48f071, 0xde2f4cc9,
<     0x3080f9db, 0x55e74563, 0x9ca03f6b, 0xf9c783d3, 0x176836c1,
<     0x720f8a79, 0xcb375de4, 0xae50e15c, 0x40ff544e, 0x2598e8f6,
<     0x73888bae, 0x16ef3716, 0xf8408204, 0x9d273ebc, 0x241fe921,
<     0x41785599, 0xafd7e08b, 0xcab05c33, 0x3bb659ed, 0x5ed1e555,
<     0xb07e5047, 0xd519ecff, 0x6c213b62, 0x094687da, 0xe7e932c8,
<     0x828e8e70, 0xd49eed28, 0xb1f95190, 0x5f56e482, 0x3a31583a,
<     0x83098fa7, 0xe66e331f, 0x08c1860d, 0x6da63ab5, 0xa4e140bd,
<     0xc186fc05, 0x2f294917, 0x4a4ef5af, 0xf3762232, 0x96119e8a,
<     0x78be2b98, 0x1dd99720, 0x4bc9f478, 0x2eae48c0, 0xc001fdd2,
<     0xa566416a, 0x1c5e96f7, 0x79392a4f, 0x97969f5d, 0xf2f123e5,
<     0x05196b4d, 0x607ed7f5, 0x8ed162e7, 0xebb6de5f, 0x528e09c2,
<     0x37e9b57a, 0xd9460068, 0xbc21bcd0, 0xea31df88, 0x8f566330,
<     0x61f9d622, 0x049e6a9a, 0xbda6bd07, 0xd8c101bf, 0x366eb4ad,
<     0x53090815, 0x9a4e721d, 0xff29cea5, 0x11867bb7, 0x74e1c70f,
<     0xcdd91092, 0xa8beac2a, 0x46111938, 0x2376a580, 0x7566c6d8,
<     0x10017a60, 0xfeaecf72, 0x9bc973ca, 0x22f1a457, 0x479618ef,
<     0xa939adfd, 0xcc5e1145, 0x06ee4d76, 0x6389f1ce, 0x8d2644dc,
<     0xe841f864, 0x51792ff9, 0x341e9341, 0xdab12653, 0xbfd69aeb,
<     0xe9c6f9b3, 0x8ca1450b, 0x620ef019, 0x07694ca1, 0xbe519b3c,
<     0xdb362784, 0x35999296, 0x50fe2e2e, 0x99b95426, 0xfcdee89e,
<     0x12715d8c, 0x7716e134, 0xce2e36a9, 0xab498a11, 0x45e63f03,
<     0x208183bb, 0x7691e0e3, 0x13f65c5b, 0xfd59e949, 0x983e55f1,
<     0x2106826c, 0x44613ed4, 0xaace8bc6, 0xcfa9377e, 0x38417fd6,
<     0x5d26c36e, 0xb389767c, 0xd6eecac4, 0x6fd61d59, 0x0ab1a1e1,
<     0xe41e14f3, 0x8179a84b, 0xd769cb13, 0xb20e77ab, 0x5ca1c2b9,
<     0x39c67e01, 0x80fea99c, 0xe5991524, 0x0b36a036, 0x6e511c8e,
<     0xa7166686, 0xc271da3e, 0x2cde6f2c, 0x49b9d394, 0xf0810409,
<     0x95e6b8b1, 0x7b490da3, 0x1e2eb11b, 0x483ed243, 0x2d596efb,
<     0xc3f6dbe9, 0xa6916751, 0x1fa9b0cc, 0x7ace0c74, 0x9461b966,
<     0xf10605de}};
< 
< #endif
< 
< #endif
< 
< #if N == 2
< 
< #if W == 8
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0xae689191, 0x87a02563, 0x29c8b4f2, 0xd4314c87,
<     0x7a59dd16, 0x539169e4, 0xfdf9f875, 0x73139f4f, 0xdd7b0ede,
<     0xf4b3ba2c, 0x5adb2bbd, 0xa722d3c8, 0x094a4259, 0x2082f6ab,
<     0x8eea673a, 0xe6273e9e, 0x484faf0f, 0x61871bfd, 0xcfef8a6c,
<     0x32167219, 0x9c7ee388, 0xb5b6577a, 0x1bdec6eb, 0x9534a1d1,
<     0x3b5c3040, 0x129484b2, 0xbcfc1523, 0x4105ed56, 0xef6d7cc7,
<     0xc6a5c835, 0x68cd59a4, 0x173f7b7d, 0xb957eaec, 0x909f5e1e,
<     0x3ef7cf8f, 0xc30e37fa, 0x6d66a66b, 0x44ae1299, 0xeac68308,
<     0x642ce432, 0xca4475a3, 0xe38cc151, 0x4de450c0, 0xb01da8b5,
<     0x1e753924, 0x37bd8dd6, 0x99d51c47, 0xf11845e3, 0x5f70d472,
<     0x76b86080, 0xd8d0f111, 0x25290964, 0x8b4198f5, 0xa2892c07,
<     0x0ce1bd96, 0x820bdaac, 0x2c634b3d, 0x05abffcf, 0xabc36e5e,
<     0x563a962b, 0xf85207ba, 0xd19ab348, 0x7ff222d9, 0x2e7ef6fa,
<     0x8016676b, 0xa9ded399, 0x07b64208, 0xfa4fba7d, 0x54272bec,
<     0x7def9f1e, 0xd3870e8f, 0x5d6d69b5, 0xf305f824, 0xdacd4cd6,
<     0x74a5dd47, 0x895c2532, 0x2734b4a3, 0x0efc0051, 0xa09491c0,
<     0xc859c864, 0x663159f5, 0x4ff9ed07, 0xe1917c96, 0x1c6884e3,
<     0xb2001572, 0x9bc8a180, 0x35a03011, 0xbb4a572b, 0x1522c6ba,
<     0x3cea7248, 0x9282e3d9, 0x6f7b1bac, 0xc1138a3d, 0xe8db3ecf,
<     0x46b3af5e, 0x39418d87, 0x97291c16, 0xbee1a8e4, 0x10893975,
<     0xed70c100, 0x43185091, 0x6ad0e463, 0xc4b875f2, 0x4a5212c8,
<     0xe43a8359, 0xcdf237ab, 0x639aa63a, 0x9e635e4f, 0x300bcfde,
<     0x19c37b2c, 0xb7abeabd, 0xdf66b319, 0x710e2288, 0x58c6967a,
<     0xf6ae07eb, 0x0b57ff9e, 0xa53f6e0f, 0x8cf7dafd, 0x229f4b6c,
<     0xac752c56, 0x021dbdc7, 0x2bd50935, 0x85bd98a4, 0x784460d1,
<     0xd62cf140, 0xffe445b2, 0x518cd423, 0x5cfdedf4, 0xf2957c65,
<     0xdb5dc897, 0x75355906, 0x88cca173, 0x26a430e2, 0x0f6c8410,
<     0xa1041581, 0x2fee72bb, 0x8186e32a, 0xa84e57d8, 0x0626c649,
<     0xfbdf3e3c, 0x55b7afad, 0x7c7f1b5f, 0xd2178ace, 0xbadad36a,
<     0x14b242fb, 0x3d7af609, 0x93126798, 0x6eeb9fed, 0xc0830e7c,
<     0xe94bba8e, 0x47232b1f, 0xc9c94c25, 0x67a1ddb4, 0x4e696946,
<     0xe001f8d7, 0x1df800a2, 0xb3909133, 0x9a5825c1, 0x3430b450,
<     0x4bc29689, 0xe5aa0718, 0xcc62b3ea, 0x620a227b, 0x9ff3da0e,
<     0x319b4b9f, 0x1853ff6d, 0xb63b6efc, 0x38d109c6, 0x96b99857,
<     0xbf712ca5, 0x1119bd34, 0xece04541, 0x4288d4d0, 0x6b406022,
<     0xc528f1b3, 0xade5a817, 0x038d3986, 0x2a458d74, 0x842d1ce5,
<     0x79d4e490, 0xd7bc7501, 0xfe74c1f3, 0x501c5062, 0xdef63758,
<     0x709ea6c9, 0x5956123b, 0xf73e83aa, 0x0ac77bdf, 0xa4afea4e,
<     0x8d675ebc, 0x230fcf2d, 0x72831b0e, 0xdceb8a9f, 0xf5233e6d,
<     0x5b4baffc, 0xa6b25789, 0x08dac618, 0x211272ea, 0x8f7ae37b,
<     0x01908441, 0xaff815d0, 0x8630a122, 0x285830b3, 0xd5a1c8c6,
<     0x7bc95957, 0x5201eda5, 0xfc697c34, 0x94a42590, 0x3accb401,
<     0x130400f3, 0xbd6c9162, 0x40956917, 0xeefdf886, 0xc7354c74,
<     0x695ddde5, 0xe7b7badf, 0x49df2b4e, 0x60179fbc, 0xce7f0e2d,
<     0x3386f658, 0x9dee67c9, 0xb426d33b, 0x1a4e42aa, 0x65bc6073,
<     0xcbd4f1e2, 0xe21c4510, 0x4c74d481, 0xb18d2cf4, 0x1fe5bd65,
<     0x362d0997, 0x98459806, 0x16afff3c, 0xb8c76ead, 0x910fda5f,
<     0x3f674bce, 0xc29eb3bb, 0x6cf6222a, 0x453e96d8, 0xeb560749,
<     0x839b5eed, 0x2df3cf7c, 0x043b7b8e, 0xaa53ea1f, 0x57aa126a,
<     0xf9c283fb, 0xd00a3709, 0x7e62a698, 0xf088c1a2, 0x5ee05033,
<     0x7728e4c1, 0xd9407550, 0x24b98d25, 0x8ad11cb4, 0xa319a846,
<     0x0d7139d7},
<    {0x00000000, 0xb9fbdbe8, 0xa886b191, 0x117d6a79, 0x8a7c6563,
<     0x3387be8b, 0x22fad4f2, 0x9b010f1a, 0xcf89cc87, 0x7672176f,
<     0x670f7d16, 0xdef4a6fe, 0x45f5a9e4, 0xfc0e720c, 0xed731875,
<     0x5488c39d, 0x44629f4f, 0xfd9944a7, 0xece42ede, 0x551ff536,
<     0xce1efa2c, 0x77e521c4, 0x66984bbd, 0xdf639055, 0x8beb53c8,
<     0x32108820, 0x236de259, 0x9a9639b1, 0x019736ab, 0xb86ced43,
<     0xa911873a, 0x10ea5cd2, 0x88c53e9e, 0x313ee576, 0x20438f0f,
<     0x99b854e7, 0x02b95bfd, 0xbb428015, 0xaa3fea6c, 0x13c43184,
<     0x474cf219, 0xfeb729f1, 0xefca4388, 0x56319860, 0xcd30977a,
<     0x74cb4c92, 0x65b626eb, 0xdc4dfd03, 0xcca7a1d1, 0x755c7a39,
<     0x64211040, 0xdddacba8, 0x46dbc4b2, 0xff201f5a, 0xee5d7523,
<     0x57a6aecb, 0x032e6d56, 0xbad5b6be, 0xaba8dcc7, 0x1253072f,
<     0x89520835, 0x30a9d3dd, 0x21d4b9a4, 0x982f624c, 0xcafb7b7d,
<     0x7300a095, 0x627dcaec, 0xdb861104, 0x40871e1e, 0xf97cc5f6,
<     0xe801af8f, 0x51fa7467, 0x0572b7fa, 0xbc896c12, 0xadf4066b,
<     0x140fdd83, 0x8f0ed299, 0x36f50971, 0x27886308, 0x9e73b8e0,
<     0x8e99e432, 0x37623fda, 0x261f55a3, 0x9fe48e4b, 0x04e58151,
<     0xbd1e5ab9, 0xac6330c0, 0x1598eb28, 0x411028b5, 0xf8ebf35d,
<     0xe9969924, 0x506d42cc, 0xcb6c4dd6, 0x7297963e, 0x63eafc47,
<     0xda1127af, 0x423e45e3, 0xfbc59e0b, 0xeab8f472, 0x53432f9a,
<     0xc8422080, 0x71b9fb68, 0x60c49111, 0xd93f4af9, 0x8db78964,
<     0x344c528c, 0x253138f5, 0x9ccae31d, 0x07cbec07, 0xbe3037ef,
<     0xaf4d5d96, 0x16b6867e, 0x065cdaac, 0xbfa70144, 0xaeda6b3d,
<     0x1721b0d5, 0x8c20bfcf, 0x35db6427, 0x24a60e5e, 0x9d5dd5b6,
<     0xc9d5162b, 0x702ecdc3, 0x6153a7ba, 0xd8a87c52, 0x43a97348,
<     0xfa52a8a0, 0xeb2fc2d9, 0x52d41931, 0x4e87f0bb, 0xf77c2b53,
<     0xe601412a, 0x5ffa9ac2, 0xc4fb95d8, 0x7d004e30, 0x6c7d2449,
<     0xd586ffa1, 0x810e3c3c, 0x38f5e7d4, 0x29888dad, 0x90735645,
<     0x0b72595f, 0xb28982b7, 0xa3f4e8ce, 0x1a0f3326, 0x0ae56ff4,
<     0xb31eb41c, 0xa263de65, 0x1b98058d, 0x80990a97, 0x3962d17f,
<     0x281fbb06, 0x91e460ee, 0xc56ca373, 0x7c97789b, 0x6dea12e2,
<     0xd411c90a, 0x4f10c610, 0xf6eb1df8, 0xe7967781, 0x5e6dac69,
<     0xc642ce25, 0x7fb915cd, 0x6ec47fb4, 0xd73fa45c, 0x4c3eab46,
<     0xf5c570ae, 0xe4b81ad7, 0x5d43c13f, 0x09cb02a2, 0xb030d94a,
<     0xa14db333, 0x18b668db, 0x83b767c1, 0x3a4cbc29, 0x2b31d650,
<     0x92ca0db8, 0x8220516a, 0x3bdb8a82, 0x2aa6e0fb, 0x935d3b13,
<     0x085c3409, 0xb1a7efe1, 0xa0da8598, 0x19215e70, 0x4da99ded,
<     0xf4524605, 0xe52f2c7c, 0x5cd4f794, 0xc7d5f88e, 0x7e2e2366,
<     0x6f53491f, 0xd6a892f7, 0x847c8bc6, 0x3d87502e, 0x2cfa3a57,
<     0x9501e1bf, 0x0e00eea5, 0xb7fb354d, 0xa6865f34, 0x1f7d84dc,
<     0x4bf54741, 0xf20e9ca9, 0xe373f6d0, 0x5a882d38, 0xc1892222,
<     0x7872f9ca, 0x690f93b3, 0xd0f4485b, 0xc01e1489, 0x79e5cf61,
<     0x6898a518, 0xd1637ef0, 0x4a6271ea, 0xf399aa02, 0xe2e4c07b,
<     0x5b1f1b93, 0x0f97d80e, 0xb66c03e6, 0xa711699f, 0x1eeab277,
<     0x85ebbd6d, 0x3c106685, 0x2d6d0cfc, 0x9496d714, 0x0cb9b558,
<     0xb5426eb0, 0xa43f04c9, 0x1dc4df21, 0x86c5d03b, 0x3f3e0bd3,
<     0x2e4361aa, 0x97b8ba42, 0xc33079df, 0x7acba237, 0x6bb6c84e,
<     0xd24d13a6, 0x494c1cbc, 0xf0b7c754, 0xe1caad2d, 0x583176c5,
<     0x48db2a17, 0xf120f1ff, 0xe05d9b86, 0x59a6406e, 0xc2a74f74,
<     0x7b5c949c, 0x6a21fee5, 0xd3da250d, 0x8752e690, 0x3ea93d78,
<     0x2fd45701, 0x962f8ce9, 0x0d2e83f3, 0xb4d5581b, 0xa5a83262,
<     0x1c53e98a},
<    {0x00000000, 0x9d0fe176, 0xe16ec4ad, 0x7c6125db, 0x19ac8f1b,
<     0x84a36e6d, 0xf8c24bb6, 0x65cdaac0, 0x33591e36, 0xae56ff40,
<     0xd237da9b, 0x4f383bed, 0x2af5912d, 0xb7fa705b, 0xcb9b5580,
<     0x5694b4f6, 0x66b23c6c, 0xfbbddd1a, 0x87dcf8c1, 0x1ad319b7,
<     0x7f1eb377, 0xe2115201, 0x9e7077da, 0x037f96ac, 0x55eb225a,
<     0xc8e4c32c, 0xb485e6f7, 0x298a0781, 0x4c47ad41, 0xd1484c37,
<     0xad2969ec, 0x3026889a, 0xcd6478d8, 0x506b99ae, 0x2c0abc75,
<     0xb1055d03, 0xd4c8f7c3, 0x49c716b5, 0x35a6336e, 0xa8a9d218,
<     0xfe3d66ee, 0x63328798, 0x1f53a243, 0x825c4335, 0xe791e9f5,
<     0x7a9e0883, 0x06ff2d58, 0x9bf0cc2e, 0xabd644b4, 0x36d9a5c2,
<     0x4ab88019, 0xd7b7616f, 0xb27acbaf, 0x2f752ad9, 0x53140f02,
<     0xce1bee74, 0x988f5a82, 0x0580bbf4, 0x79e19e2f, 0xe4ee7f59,
<     0x8123d599, 0x1c2c34ef, 0x604d1134, 0xfd42f042, 0x41b9f7f1,
<     0xdcb61687, 0xa0d7335c, 0x3dd8d22a, 0x581578ea, 0xc51a999c,
<     0xb97bbc47, 0x24745d31, 0x72e0e9c7, 0xefef08b1, 0x938e2d6a,
<     0x0e81cc1c, 0x6b4c66dc, 0xf64387aa, 0x8a22a271, 0x172d4307,
<     0x270bcb9d, 0xba042aeb, 0xc6650f30, 0x5b6aee46, 0x3ea74486,
<     0xa3a8a5f0, 0xdfc9802b, 0x42c6615d, 0x1452d5ab, 0x895d34dd,
<     0xf53c1106, 0x6833f070, 0x0dfe5ab0, 0x90f1bbc6, 0xec909e1d,
<     0x719f7f6b, 0x8cdd8f29, 0x11d26e5f, 0x6db34b84, 0xf0bcaaf2,
<     0x95710032, 0x087ee144, 0x741fc49f, 0xe91025e9, 0xbf84911f,
<     0x228b7069, 0x5eea55b2, 0xc3e5b4c4, 0xa6281e04, 0x3b27ff72,
<     0x4746daa9, 0xda493bdf, 0xea6fb345, 0x77605233, 0x0b0177e8,
<     0x960e969e, 0xf3c33c5e, 0x6eccdd28, 0x12adf8f3, 0x8fa21985,
<     0xd936ad73, 0x44394c05, 0x385869de, 0xa55788a8, 0xc09a2268,
<     0x5d95c31e, 0x21f4e6c5, 0xbcfb07b3, 0x8373efe2, 0x1e7c0e94,
<     0x621d2b4f, 0xff12ca39, 0x9adf60f9, 0x07d0818f, 0x7bb1a454,
<     0xe6be4522, 0xb02af1d4, 0x2d2510a2, 0x51443579, 0xcc4bd40f,
<     0xa9867ecf, 0x34899fb9, 0x48e8ba62, 0xd5e75b14, 0xe5c1d38e,
<     0x78ce32f8, 0x04af1723, 0x99a0f655, 0xfc6d5c95, 0x6162bde3,
<     0x1d039838, 0x800c794e, 0xd698cdb8, 0x4b972cce, 0x37f60915,
<     0xaaf9e863, 0xcf3442a3, 0x523ba3d5, 0x2e5a860e, 0xb3556778,
<     0x4e17973a, 0xd318764c, 0xaf795397, 0x3276b2e1, 0x57bb1821,
<     0xcab4f957, 0xb6d5dc8c, 0x2bda3dfa, 0x7d4e890c, 0xe041687a,
<     0x9c204da1, 0x012facd7, 0x64e20617, 0xf9ede761, 0x858cc2ba,
<     0x188323cc, 0x28a5ab56, 0xb5aa4a20, 0xc9cb6ffb, 0x54c48e8d,
<     0x3109244d, 0xac06c53b, 0xd067e0e0, 0x4d680196, 0x1bfcb560,
<     0x86f35416, 0xfa9271cd, 0x679d90bb, 0x02503a7b, 0x9f5fdb0d,
<     0xe33efed6, 0x7e311fa0, 0xc2ca1813, 0x5fc5f965, 0x23a4dcbe,
<     0xbeab3dc8, 0xdb669708, 0x4669767e, 0x3a0853a5, 0xa707b2d3,
<     0xf1930625, 0x6c9ce753, 0x10fdc288, 0x8df223fe, 0xe83f893e,
<     0x75306848, 0x09514d93, 0x945eace5, 0xa478247f, 0x3977c509,
<     0x4516e0d2, 0xd81901a4, 0xbdd4ab64, 0x20db4a12, 0x5cba6fc9,
<     0xc1b58ebf, 0x97213a49, 0x0a2edb3f, 0x764ffee4, 0xeb401f92,
<     0x8e8db552, 0x13825424, 0x6fe371ff, 0xf2ec9089, 0x0fae60cb,
<     0x92a181bd, 0xeec0a466, 0x73cf4510, 0x1602efd0, 0x8b0d0ea6,
<     0xf76c2b7d, 0x6a63ca0b, 0x3cf77efd, 0xa1f89f8b, 0xdd99ba50,
<     0x40965b26, 0x255bf1e6, 0xb8541090, 0xc435354b, 0x593ad43d,
<     0x691c5ca7, 0xf413bdd1, 0x8872980a, 0x157d797c, 0x70b0d3bc,
<     0xedbf32ca, 0x91de1711, 0x0cd1f667, 0x5a454291, 0xc74aa3e7,
<     0xbb2b863c, 0x2624674a, 0x43e9cd8a, 0xdee62cfc, 0xa2870927,
<     0x3f88e851},
<    {0x00000000, 0xdd96d985, 0x605cb54b, 0xbdca6cce, 0xc0b96a96,
<     0x1d2fb313, 0xa0e5dfdd, 0x7d730658, 0x5a03d36d, 0x87950ae8,
<     0x3a5f6626, 0xe7c9bfa3, 0x9abab9fb, 0x472c607e, 0xfae60cb0,
<     0x2770d535, 0xb407a6da, 0x69917f5f, 0xd45b1391, 0x09cdca14,
<     0x74becc4c, 0xa92815c9, 0x14e27907, 0xc974a082, 0xee0475b7,
<     0x3392ac32, 0x8e58c0fc, 0x53ce1979, 0x2ebd1f21, 0xf32bc6a4,
<     0x4ee1aa6a, 0x937773ef, 0xb37e4bf5, 0x6ee89270, 0xd322febe,
<     0x0eb4273b, 0x73c72163, 0xae51f8e6, 0x139b9428, 0xce0d4dad,
<     0xe97d9898, 0x34eb411d, 0x89212dd3, 0x54b7f456, 0x29c4f20e,
<     0xf4522b8b, 0x49984745, 0x940e9ec0, 0x0779ed2f, 0xdaef34aa,
<     0x67255864, 0xbab381e1, 0xc7c087b9, 0x1a565e3c, 0xa79c32f2,
<     0x7a0aeb77, 0x5d7a3e42, 0x80ece7c7, 0x3d268b09, 0xe0b0528c,
<     0x9dc354d4, 0x40558d51, 0xfd9fe19f, 0x2009381a, 0xbd8d91ab,
<     0x601b482e, 0xddd124e0, 0x0047fd65, 0x7d34fb3d, 0xa0a222b8,
<     0x1d684e76, 0xc0fe97f3, 0xe78e42c6, 0x3a189b43, 0x87d2f78d,
<     0x5a442e08, 0x27372850, 0xfaa1f1d5, 0x476b9d1b, 0x9afd449e,
<     0x098a3771, 0xd41ceef4, 0x69d6823a, 0xb4405bbf, 0xc9335de7,
<     0x14a58462, 0xa96fe8ac, 0x74f93129, 0x5389e41c, 0x8e1f3d99,
<     0x33d55157, 0xee4388d2, 0x93308e8a, 0x4ea6570f, 0xf36c3bc1,
<     0x2efae244, 0x0ef3da5e, 0xd36503db, 0x6eaf6f15, 0xb339b690,
<     0xce4ab0c8, 0x13dc694d, 0xae160583, 0x7380dc06, 0x54f00933,
<     0x8966d0b6, 0x34acbc78, 0xe93a65fd, 0x944963a5, 0x49dfba20,
<     0xf415d6ee, 0x29830f6b, 0xbaf47c84, 0x6762a501, 0xdaa8c9cf,
<     0x073e104a, 0x7a4d1612, 0xa7dbcf97, 0x1a11a359, 0xc7877adc,
<     0xe0f7afe9, 0x3d61766c, 0x80ab1aa2, 0x5d3dc327, 0x204ec57f,
<     0xfdd81cfa, 0x40127034, 0x9d84a9b1, 0xa06a2517, 0x7dfcfc92,
<     0xc036905c, 0x1da049d9, 0x60d34f81, 0xbd459604, 0x008ffaca,
<     0xdd19234f, 0xfa69f67a, 0x27ff2fff, 0x9a354331, 0x47a39ab4,
<     0x3ad09cec, 0xe7464569, 0x5a8c29a7, 0x871af022, 0x146d83cd,
<     0xc9fb5a48, 0x74313686, 0xa9a7ef03, 0xd4d4e95b, 0x094230de,
<     0xb4885c10, 0x691e8595, 0x4e6e50a0, 0x93f88925, 0x2e32e5eb,
<     0xf3a43c6e, 0x8ed73a36, 0x5341e3b3, 0xee8b8f7d, 0x331d56f8,
<     0x13146ee2, 0xce82b767, 0x7348dba9, 0xaede022c, 0xd3ad0474,
<     0x0e3bddf1, 0xb3f1b13f, 0x6e6768ba, 0x4917bd8f, 0x9481640a,
<     0x294b08c4, 0xf4ddd141, 0x89aed719, 0x54380e9c, 0xe9f26252,
<     0x3464bbd7, 0xa713c838, 0x7a8511bd, 0xc74f7d73, 0x1ad9a4f6,
<     0x67aaa2ae, 0xba3c7b2b, 0x07f617e5, 0xda60ce60, 0xfd101b55,
<     0x2086c2d0, 0x9d4cae1e, 0x40da779b, 0x3da971c3, 0xe03fa846,
<     0x5df5c488, 0x80631d0d, 0x1de7b4bc, 0xc0716d39, 0x7dbb01f7,
<     0xa02dd872, 0xdd5ede2a, 0x00c807af, 0xbd026b61, 0x6094b2e4,
<     0x47e467d1, 0x9a72be54, 0x27b8d29a, 0xfa2e0b1f, 0x875d0d47,
<     0x5acbd4c2, 0xe701b80c, 0x3a976189, 0xa9e01266, 0x7476cbe3,
<     0xc9bca72d, 0x142a7ea8, 0x695978f0, 0xb4cfa175, 0x0905cdbb,
<     0xd493143e, 0xf3e3c10b, 0x2e75188e, 0x93bf7440, 0x4e29adc5,
<     0x335aab9d, 0xeecc7218, 0x53061ed6, 0x8e90c753, 0xae99ff49,
<     0x730f26cc, 0xcec54a02, 0x13539387, 0x6e2095df, 0xb3b64c5a,
<     0x0e7c2094, 0xd3eaf911, 0xf49a2c24, 0x290cf5a1, 0x94c6996f,
<     0x495040ea, 0x342346b2, 0xe9b59f37, 0x547ff3f9, 0x89e92a7c,
<     0x1a9e5993, 0xc7088016, 0x7ac2ecd8, 0xa754355d, 0xda273305,
<     0x07b1ea80, 0xba7b864e, 0x67ed5fcb, 0x409d8afe, 0x9d0b537b,
<     0x20c13fb5, 0xfd57e630, 0x8024e068, 0x5db239ed, 0xe0785523,
<     0x3dee8ca6},
<    {0x00000000, 0x9ba54c6f, 0xec3b9e9f, 0x779ed2f0, 0x03063b7f,
<     0x98a37710, 0xef3da5e0, 0x7498e98f, 0x060c76fe, 0x9da93a91,
<     0xea37e861, 0x7192a40e, 0x050a4d81, 0x9eaf01ee, 0xe931d31e,
<     0x72949f71, 0x0c18edfc, 0x97bda193, 0xe0237363, 0x7b863f0c,
<     0x0f1ed683, 0x94bb9aec, 0xe325481c, 0x78800473, 0x0a149b02,
<     0x91b1d76d, 0xe62f059d, 0x7d8a49f2, 0x0912a07d, 0x92b7ec12,
<     0xe5293ee2, 0x7e8c728d, 0x1831dbf8, 0x83949797, 0xf40a4567,
<     0x6faf0908, 0x1b37e087, 0x8092ace8, 0xf70c7e18, 0x6ca93277,
<     0x1e3dad06, 0x8598e169, 0xf2063399, 0x69a37ff6, 0x1d3b9679,
<     0x869eda16, 0xf10008e6, 0x6aa54489, 0x14293604, 0x8f8c7a6b,
<     0xf812a89b, 0x63b7e4f4, 0x172f0d7b, 0x8c8a4114, 0xfb1493e4,
<     0x60b1df8b, 0x122540fa, 0x89800c95, 0xfe1ede65, 0x65bb920a,
<     0x11237b85, 0x8a8637ea, 0xfd18e51a, 0x66bda975, 0x3063b7f0,
<     0xabc6fb9f, 0xdc58296f, 0x47fd6500, 0x33658c8f, 0xa8c0c0e0,
<     0xdf5e1210, 0x44fb5e7f, 0x366fc10e, 0xadca8d61, 0xda545f91,
<     0x41f113fe, 0x3569fa71, 0xaeccb61e, 0xd95264ee, 0x42f72881,
<     0x3c7b5a0c, 0xa7de1663, 0xd040c493, 0x4be588fc, 0x3f7d6173,
<     0xa4d82d1c, 0xd346ffec, 0x48e3b383, 0x3a772cf2, 0xa1d2609d,
<     0xd64cb26d, 0x4de9fe02, 0x3971178d, 0xa2d45be2, 0xd54a8912,
<     0x4eefc57d, 0x28526c08, 0xb3f72067, 0xc469f297, 0x5fccbef8,
<     0x2b545777, 0xb0f11b18, 0xc76fc9e8, 0x5cca8587, 0x2e5e1af6,
<     0xb5fb5699, 0xc2658469, 0x59c0c806, 0x2d582189, 0xb6fd6de6,
<     0xc163bf16, 0x5ac6f379, 0x244a81f4, 0xbfefcd9b, 0xc8711f6b,
<     0x53d45304, 0x274cba8b, 0xbce9f6e4, 0xcb772414, 0x50d2687b,
<     0x2246f70a, 0xb9e3bb65, 0xce7d6995, 0x55d825fa, 0x2140cc75,
<     0xbae5801a, 0xcd7b52ea, 0x56de1e85, 0x60c76fe0, 0xfb62238f,
<     0x8cfcf17f, 0x1759bd10, 0x63c1549f, 0xf86418f0, 0x8ffaca00,
<     0x145f866f, 0x66cb191e, 0xfd6e5571, 0x8af08781, 0x1155cbee,
<     0x65cd2261, 0xfe686e0e, 0x89f6bcfe, 0x1253f091, 0x6cdf821c,
<     0xf77ace73, 0x80e41c83, 0x1b4150ec, 0x6fd9b963, 0xf47cf50c,
<     0x83e227fc, 0x18476b93, 0x6ad3f4e2, 0xf176b88d, 0x86e86a7d,
<     0x1d4d2612, 0x69d5cf9d, 0xf27083f2, 0x85ee5102, 0x1e4b1d6d,
<     0x78f6b418, 0xe353f877, 0x94cd2a87, 0x0f6866e8, 0x7bf08f67,
<     0xe055c308, 0x97cb11f8, 0x0c6e5d97, 0x7efac2e6, 0xe55f8e89,
<     0x92c15c79, 0x09641016, 0x7dfcf999, 0xe659b5f6, 0x91c76706,
<     0x0a622b69, 0x74ee59e4, 0xef4b158b, 0x98d5c77b, 0x03708b14,
<     0x77e8629b, 0xec4d2ef4, 0x9bd3fc04, 0x0076b06b, 0x72e22f1a,
<     0xe9476375, 0x9ed9b185, 0x057cfdea, 0x71e41465, 0xea41580a,
<     0x9ddf8afa, 0x067ac695, 0x50a4d810, 0xcb01947f, 0xbc9f468f,
<     0x273a0ae0, 0x53a2e36f, 0xc807af00, 0xbf997df0, 0x243c319f,
<     0x56a8aeee, 0xcd0de281, 0xba933071, 0x21367c1e, 0x55ae9591,
<     0xce0bd9fe, 0xb9950b0e, 0x22304761, 0x5cbc35ec, 0xc7197983,
<     0xb087ab73, 0x2b22e71c, 0x5fba0e93, 0xc41f42fc, 0xb381900c,
<     0x2824dc63, 0x5ab04312, 0xc1150f7d, 0xb68bdd8d, 0x2d2e91e2,
<     0x59b6786d, 0xc2133402, 0xb58de6f2, 0x2e28aa9d, 0x489503e8,
<     0xd3304f87, 0xa4ae9d77, 0x3f0bd118, 0x4b933897, 0xd03674f8,
<     0xa7a8a608, 0x3c0dea67, 0x4e997516, 0xd53c3979, 0xa2a2eb89,
<     0x3907a7e6, 0x4d9f4e69, 0xd63a0206, 0xa1a4d0f6, 0x3a019c99,
<     0x448dee14, 0xdf28a27b, 0xa8b6708b, 0x33133ce4, 0x478bd56b,
<     0xdc2e9904, 0xabb04bf4, 0x3015079b, 0x428198ea, 0xd924d485,
<     0xaeba0675, 0x351f4a1a, 0x4187a395, 0xda22effa, 0xadbc3d0a,
<     0x36197165},
<    {0x00000000, 0xc18edfc0, 0x586cb9c1, 0x99e26601, 0xb0d97382,
<     0x7157ac42, 0xe8b5ca43, 0x293b1583, 0xbac3e145, 0x7b4d3e85,
<     0xe2af5884, 0x23218744, 0x0a1a92c7, 0xcb944d07, 0x52762b06,
<     0x93f8f4c6, 0xaef6c4cb, 0x6f781b0b, 0xf69a7d0a, 0x3714a2ca,
<     0x1e2fb749, 0xdfa16889, 0x46430e88, 0x87cdd148, 0x1435258e,
<     0xd5bbfa4e, 0x4c599c4f, 0x8dd7438f, 0xa4ec560c, 0x656289cc,
<     0xfc80efcd, 0x3d0e300d, 0x869c8fd7, 0x47125017, 0xdef03616,
<     0x1f7ee9d6, 0x3645fc55, 0xf7cb2395, 0x6e294594, 0xafa79a54,
<     0x3c5f6e92, 0xfdd1b152, 0x6433d753, 0xa5bd0893, 0x8c861d10,
<     0x4d08c2d0, 0xd4eaa4d1, 0x15647b11, 0x286a4b1c, 0xe9e494dc,
<     0x7006f2dd, 0xb1882d1d, 0x98b3389e, 0x593de75e, 0xc0df815f,
<     0x01515e9f, 0x92a9aa59, 0x53277599, 0xcac51398, 0x0b4bcc58,
<     0x2270d9db, 0xe3fe061b, 0x7a1c601a, 0xbb92bfda, 0xd64819ef,
<     0x17c6c62f, 0x8e24a02e, 0x4faa7fee, 0x66916a6d, 0xa71fb5ad,
<     0x3efdd3ac, 0xff730c6c, 0x6c8bf8aa, 0xad05276a, 0x34e7416b,
<     0xf5699eab, 0xdc528b28, 0x1ddc54e8, 0x843e32e9, 0x45b0ed29,
<     0x78bedd24, 0xb93002e4, 0x20d264e5, 0xe15cbb25, 0xc867aea6,
<     0x09e97166, 0x900b1767, 0x5185c8a7, 0xc27d3c61, 0x03f3e3a1,
<     0x9a1185a0, 0x5b9f5a60, 0x72a44fe3, 0xb32a9023, 0x2ac8f622,
<     0xeb4629e2, 0x50d49638, 0x915a49f8, 0x08b82ff9, 0xc936f039,
<     0xe00de5ba, 0x21833a7a, 0xb8615c7b, 0x79ef83bb, 0xea17777d,
<     0x2b99a8bd, 0xb27bcebc, 0x73f5117c, 0x5ace04ff, 0x9b40db3f,
<     0x02a2bd3e, 0xc32c62fe, 0xfe2252f3, 0x3fac8d33, 0xa64eeb32,
<     0x67c034f2, 0x4efb2171, 0x8f75feb1, 0x169798b0, 0xd7194770,
<     0x44e1b3b6, 0x856f6c76, 0x1c8d0a77, 0xdd03d5b7, 0xf438c034,
<     0x35b61ff4, 0xac5479f5, 0x6ddaa635, 0x77e1359f, 0xb66fea5f,
<     0x2f8d8c5e, 0xee03539e, 0xc738461d, 0x06b699dd, 0x9f54ffdc,
<     0x5eda201c, 0xcd22d4da, 0x0cac0b1a, 0x954e6d1b, 0x54c0b2db,
<     0x7dfba758, 0xbc757898, 0x25971e99, 0xe419c159, 0xd917f154,
<     0x18992e94, 0x817b4895, 0x40f59755, 0x69ce82d6, 0xa8405d16,
<     0x31a23b17, 0xf02ce4d7, 0x63d41011, 0xa25acfd1, 0x3bb8a9d0,
<     0xfa367610, 0xd30d6393, 0x1283bc53, 0x8b61da52, 0x4aef0592,
<     0xf17dba48, 0x30f36588, 0xa9110389, 0x689fdc49, 0x41a4c9ca,
<     0x802a160a, 0x19c8700b, 0xd846afcb, 0x4bbe5b0d, 0x8a3084cd,
<     0x13d2e2cc, 0xd25c3d0c, 0xfb67288f, 0x3ae9f74f, 0xa30b914e,
<     0x62854e8e, 0x5f8b7e83, 0x9e05a143, 0x07e7c742, 0xc6691882,
<     0xef520d01, 0x2edcd2c1, 0xb73eb4c0, 0x76b06b00, 0xe5489fc6,
<     0x24c64006, 0xbd242607, 0x7caaf9c7, 0x5591ec44, 0x941f3384,
<     0x0dfd5585, 0xcc738a45, 0xa1a92c70, 0x6027f3b0, 0xf9c595b1,
<     0x384b4a71, 0x11705ff2, 0xd0fe8032, 0x491ce633, 0x889239f3,
<     0x1b6acd35, 0xdae412f5, 0x430674f4, 0x8288ab34, 0xabb3beb7,
<     0x6a3d6177, 0xf3df0776, 0x3251d8b6, 0x0f5fe8bb, 0xced1377b,
<     0x5733517a, 0x96bd8eba, 0xbf869b39, 0x7e0844f9, 0xe7ea22f8,
<     0x2664fd38, 0xb59c09fe, 0x7412d63e, 0xedf0b03f, 0x2c7e6fff,
<     0x05457a7c, 0xc4cba5bc, 0x5d29c3bd, 0x9ca71c7d, 0x2735a3a7,
<     0xe6bb7c67, 0x7f591a66, 0xbed7c5a6, 0x97ecd025, 0x56620fe5,
<     0xcf8069e4, 0x0e0eb624, 0x9df642e2, 0x5c789d22, 0xc59afb23,
<     0x041424e3, 0x2d2f3160, 0xeca1eea0, 0x754388a1, 0xb4cd5761,
<     0x89c3676c, 0x484db8ac, 0xd1afdead, 0x1021016d, 0x391a14ee,
<     0xf894cb2e, 0x6176ad2f, 0xa0f872ef, 0x33008629, 0xf28e59e9,
<     0x6b6c3fe8, 0xaae2e028, 0x83d9f5ab, 0x42572a6b, 0xdbb54c6a,
<     0x1a3b93aa},
<    {0x00000000, 0xefc26b3e, 0x04f5d03d, 0xeb37bb03, 0x09eba07a,
<     0xe629cb44, 0x0d1e7047, 0xe2dc1b79, 0x13d740f4, 0xfc152bca,
<     0x172290c9, 0xf8e0fbf7, 0x1a3ce08e, 0xf5fe8bb0, 0x1ec930b3,
<     0xf10b5b8d, 0x27ae81e8, 0xc86cead6, 0x235b51d5, 0xcc993aeb,
<     0x2e452192, 0xc1874aac, 0x2ab0f1af, 0xc5729a91, 0x3479c11c,
<     0xdbbbaa22, 0x308c1121, 0xdf4e7a1f, 0x3d926166, 0xd2500a58,
<     0x3967b15b, 0xd6a5da65, 0x4f5d03d0, 0xa09f68ee, 0x4ba8d3ed,
<     0xa46ab8d3, 0x46b6a3aa, 0xa974c894, 0x42437397, 0xad8118a9,
<     0x5c8a4324, 0xb348281a, 0x587f9319, 0xb7bdf827, 0x5561e35e,
<     0xbaa38860, 0x51943363, 0xbe56585d, 0x68f38238, 0x8731e906,
<     0x6c065205, 0x83c4393b, 0x61182242, 0x8eda497c, 0x65edf27f,
<     0x8a2f9941, 0x7b24c2cc, 0x94e6a9f2, 0x7fd112f1, 0x901379cf,
<     0x72cf62b6, 0x9d0d0988, 0x763ab28b, 0x99f8d9b5, 0x9eba07a0,
<     0x71786c9e, 0x9a4fd79d, 0x758dbca3, 0x9751a7da, 0x7893cce4,
<     0x93a477e7, 0x7c661cd9, 0x8d6d4754, 0x62af2c6a, 0x89989769,
<     0x665afc57, 0x8486e72e, 0x6b448c10, 0x80733713, 0x6fb15c2d,
<     0xb9148648, 0x56d6ed76, 0xbde15675, 0x52233d4b, 0xb0ff2632,
<     0x5f3d4d0c, 0xb40af60f, 0x5bc89d31, 0xaac3c6bc, 0x4501ad82,
<     0xae361681, 0x41f47dbf, 0xa32866c6, 0x4cea0df8, 0xa7ddb6fb,
<     0x481fddc5, 0xd1e70470, 0x3e256f4e, 0xd512d44d, 0x3ad0bf73,
<     0xd80ca40a, 0x37cecf34, 0xdcf97437, 0x333b1f09, 0xc2304484,
<     0x2df22fba, 0xc6c594b9, 0x2907ff87, 0xcbdbe4fe, 0x24198fc0,
<     0xcf2e34c3, 0x20ec5ffd, 0xf6498598, 0x198beea6, 0xf2bc55a5,
<     0x1d7e3e9b, 0xffa225e2, 0x10604edc, 0xfb57f5df, 0x14959ee1,
<     0xe59ec56c, 0x0a5cae52, 0xe16b1551, 0x0ea97e6f, 0xec756516,
<     0x03b70e28, 0xe880b52b, 0x0742de15, 0xe6050901, 0x09c7623f,
<     0xe2f0d93c, 0x0d32b202, 0xefeea97b, 0x002cc245, 0xeb1b7946,
<     0x04d91278, 0xf5d249f5, 0x1a1022cb, 0xf12799c8, 0x1ee5f2f6,
<     0xfc39e98f, 0x13fb82b1, 0xf8cc39b2, 0x170e528c, 0xc1ab88e9,
<     0x2e69e3d7, 0xc55e58d4, 0x2a9c33ea, 0xc8402893, 0x278243ad,
<     0xccb5f8ae, 0x23779390, 0xd27cc81d, 0x3dbea323, 0xd6891820,
<     0x394b731e, 0xdb976867, 0x34550359, 0xdf62b85a, 0x30a0d364,
<     0xa9580ad1, 0x469a61ef, 0xadaddaec, 0x426fb1d2, 0xa0b3aaab,
<     0x4f71c195, 0xa4467a96, 0x4b8411a8, 0xba8f4a25, 0x554d211b,
<     0xbe7a9a18, 0x51b8f126, 0xb364ea5f, 0x5ca68161, 0xb7913a62,
<     0x5853515c, 0x8ef68b39, 0x6134e007, 0x8a035b04, 0x65c1303a,
<     0x871d2b43, 0x68df407d, 0x83e8fb7e, 0x6c2a9040, 0x9d21cbcd,
<     0x72e3a0f3, 0x99d41bf0, 0x761670ce, 0x94ca6bb7, 0x7b080089,
<     0x903fbb8a, 0x7ffdd0b4, 0x78bf0ea1, 0x977d659f, 0x7c4ade9c,
<     0x9388b5a2, 0x7154aedb, 0x9e96c5e5, 0x75a17ee6, 0x9a6315d8,
<     0x6b684e55, 0x84aa256b, 0x6f9d9e68, 0x805ff556, 0x6283ee2f,
<     0x8d418511, 0x66763e12, 0x89b4552c, 0x5f118f49, 0xb0d3e477,
<     0x5be45f74, 0xb426344a, 0x56fa2f33, 0xb938440d, 0x520fff0e,
<     0xbdcd9430, 0x4cc6cfbd, 0xa304a483, 0x48331f80, 0xa7f174be,
<     0x452d6fc7, 0xaaef04f9, 0x41d8bffa, 0xae1ad4c4, 0x37e20d71,
<     0xd820664f, 0x3317dd4c, 0xdcd5b672, 0x3e09ad0b, 0xd1cbc635,
<     0x3afc7d36, 0xd53e1608, 0x24354d85, 0xcbf726bb, 0x20c09db8,
<     0xcf02f686, 0x2ddeedff, 0xc21c86c1, 0x292b3dc2, 0xc6e956fc,
<     0x104c8c99, 0xff8ee7a7, 0x14b95ca4, 0xfb7b379a, 0x19a72ce3,
<     0xf66547dd, 0x1d52fcde, 0xf29097e0, 0x039bcc6d, 0xec59a753,
<     0x076e1c50, 0xe8ac776e, 0x0a706c17, 0xe5b20729, 0x0e85bc2a,
<     0xe147d714},
<    {0x00000000, 0x177b1443, 0x2ef62886, 0x398d3cc5, 0x5dec510c,
<     0x4a97454f, 0x731a798a, 0x64616dc9, 0xbbd8a218, 0xaca3b65b,
<     0x952e8a9e, 0x82559edd, 0xe634f314, 0xf14fe757, 0xc8c2db92,
<     0xdfb9cfd1, 0xacc04271, 0xbbbb5632, 0x82366af7, 0x954d7eb4,
<     0xf12c137d, 0xe657073e, 0xdfda3bfb, 0xc8a12fb8, 0x1718e069,
<     0x0063f42a, 0x39eec8ef, 0x2e95dcac, 0x4af4b165, 0x5d8fa526,
<     0x640299e3, 0x73798da0, 0x82f182a3, 0x958a96e0, 0xac07aa25,
<     0xbb7cbe66, 0xdf1dd3af, 0xc866c7ec, 0xf1ebfb29, 0xe690ef6a,
<     0x392920bb, 0x2e5234f8, 0x17df083d, 0x00a41c7e, 0x64c571b7,
<     0x73be65f4, 0x4a335931, 0x5d484d72, 0x2e31c0d2, 0x394ad491,
<     0x00c7e854, 0x17bcfc17, 0x73dd91de, 0x64a6859d, 0x5d2bb958,
<     0x4a50ad1b, 0x95e962ca, 0x82927689, 0xbb1f4a4c, 0xac645e0f,
<     0xc80533c6, 0xdf7e2785, 0xe6f31b40, 0xf1880f03, 0xde920307,
<     0xc9e91744, 0xf0642b81, 0xe71f3fc2, 0x837e520b, 0x94054648,
<     0xad887a8d, 0xbaf36ece, 0x654aa11f, 0x7231b55c, 0x4bbc8999,
<     0x5cc79dda, 0x38a6f013, 0x2fdde450, 0x1650d895, 0x012bccd6,
<     0x72524176, 0x65295535, 0x5ca469f0, 0x4bdf7db3, 0x2fbe107a,
<     0x38c50439, 0x014838fc, 0x16332cbf, 0xc98ae36e, 0xdef1f72d,
<     0xe77ccbe8, 0xf007dfab, 0x9466b262, 0x831da621, 0xba909ae4,
<     0xadeb8ea7, 0x5c6381a4, 0x4b1895e7, 0x7295a922, 0x65eebd61,
<     0x018fd0a8, 0x16f4c4eb, 0x2f79f82e, 0x3802ec6d, 0xe7bb23bc,
<     0xf0c037ff, 0xc94d0b3a, 0xde361f79, 0xba5772b0, 0xad2c66f3,
<     0x94a15a36, 0x83da4e75, 0xf0a3c3d5, 0xe7d8d796, 0xde55eb53,
<     0xc92eff10, 0xad4f92d9, 0xba34869a, 0x83b9ba5f, 0x94c2ae1c,
<     0x4b7b61cd, 0x5c00758e, 0x658d494b, 0x72f65d08, 0x169730c1,
<     0x01ec2482, 0x38611847, 0x2f1a0c04, 0x6655004f, 0x712e140c,
<     0x48a328c9, 0x5fd83c8a, 0x3bb95143, 0x2cc24500, 0x154f79c5,
<     0x02346d86, 0xdd8da257, 0xcaf6b614, 0xf37b8ad1, 0xe4009e92,
<     0x8061f35b, 0x971ae718, 0xae97dbdd, 0xb9eccf9e, 0xca95423e,
<     0xddee567d, 0xe4636ab8, 0xf3187efb, 0x97791332, 0x80020771,
<     0xb98f3bb4, 0xaef42ff7, 0x714de026, 0x6636f465, 0x5fbbc8a0,
<     0x48c0dce3, 0x2ca1b12a, 0x3bdaa569, 0x025799ac, 0x152c8def,
<     0xe4a482ec, 0xf3df96af, 0xca52aa6a, 0xdd29be29, 0xb948d3e0,
<     0xae33c7a3, 0x97befb66, 0x80c5ef25, 0x5f7c20f4, 0x480734b7,
<     0x718a0872, 0x66f11c31, 0x029071f8, 0x15eb65bb, 0x2c66597e,
<     0x3b1d4d3d, 0x4864c09d, 0x5f1fd4de, 0x6692e81b, 0x71e9fc58,
<     0x15889191, 0x02f385d2, 0x3b7eb917, 0x2c05ad54, 0xf3bc6285,
<     0xe4c776c6, 0xdd4a4a03, 0xca315e40, 0xae503389, 0xb92b27ca,
<     0x80a61b0f, 0x97dd0f4c, 0xb8c70348, 0xafbc170b, 0x96312bce,
<     0x814a3f8d, 0xe52b5244, 0xf2504607, 0xcbdd7ac2, 0xdca66e81,
<     0x031fa150, 0x1464b513, 0x2de989d6, 0x3a929d95, 0x5ef3f05c,
<     0x4988e41f, 0x7005d8da, 0x677ecc99, 0x14074139, 0x037c557a,
<     0x3af169bf, 0x2d8a7dfc, 0x49eb1035, 0x5e900476, 0x671d38b3,
<     0x70662cf0, 0xafdfe321, 0xb8a4f762, 0x8129cba7, 0x9652dfe4,
<     0xf233b22d, 0xe548a66e, 0xdcc59aab, 0xcbbe8ee8, 0x3a3681eb,
<     0x2d4d95a8, 0x14c0a96d, 0x03bbbd2e, 0x67dad0e7, 0x70a1c4a4,
<     0x492cf861, 0x5e57ec22, 0x81ee23f3, 0x969537b0, 0xaf180b75,
<     0xb8631f36, 0xdc0272ff, 0xcb7966bc, 0xf2f45a79, 0xe58f4e3a,
<     0x96f6c39a, 0x818dd7d9, 0xb800eb1c, 0xaf7bff5f, 0xcb1a9296,
<     0xdc6186d5, 0xe5ecba10, 0xf297ae53, 0x2d2e6182, 0x3a5575c1,
<     0x03d84904, 0x14a35d47, 0x70c2308e, 0x67b924cd, 0x5e341808,
<     0x494f0c4b}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x0000000000000000, 0x43147b1700000000, 0x8628f62e00000000,
<     0xc53c8d3900000000, 0x0c51ec5d00000000, 0x4f45974a00000000,
<     0x8a791a7300000000, 0xc96d616400000000, 0x18a2d8bb00000000,
<     0x5bb6a3ac00000000, 0x9e8a2e9500000000, 0xdd9e558200000000,
<     0x14f334e600000000, 0x57e74ff100000000, 0x92dbc2c800000000,
<     0xd1cfb9df00000000, 0x7142c0ac00000000, 0x3256bbbb00000000,
<     0xf76a368200000000, 0xb47e4d9500000000, 0x7d132cf100000000,
<     0x3e0757e600000000, 0xfb3bdadf00000000, 0xb82fa1c800000000,
<     0x69e0181700000000, 0x2af4630000000000, 0xefc8ee3900000000,
<     0xacdc952e00000000, 0x65b1f44a00000000, 0x26a58f5d00000000,
<     0xe399026400000000, 0xa08d797300000000, 0xa382f18200000000,
<     0xe0968a9500000000, 0x25aa07ac00000000, 0x66be7cbb00000000,
<     0xafd31ddf00000000, 0xecc766c800000000, 0x29fbebf100000000,
<     0x6aef90e600000000, 0xbb20293900000000, 0xf834522e00000000,
<     0x3d08df1700000000, 0x7e1ca40000000000, 0xb771c56400000000,
<     0xf465be7300000000, 0x3159334a00000000, 0x724d485d00000000,
<     0xd2c0312e00000000, 0x91d44a3900000000, 0x54e8c70000000000,
<     0x17fcbc1700000000, 0xde91dd7300000000, 0x9d85a66400000000,
<     0x58b92b5d00000000, 0x1bad504a00000000, 0xca62e99500000000,
<     0x8976928200000000, 0x4c4a1fbb00000000, 0x0f5e64ac00000000,
<     0xc63305c800000000, 0x85277edf00000000, 0x401bf3e600000000,
<     0x030f88f100000000, 0x070392de00000000, 0x4417e9c900000000,
<     0x812b64f000000000, 0xc23f1fe700000000, 0x0b527e8300000000,
<     0x4846059400000000, 0x8d7a88ad00000000, 0xce6ef3ba00000000,
<     0x1fa14a6500000000, 0x5cb5317200000000, 0x9989bc4b00000000,
<     0xda9dc75c00000000, 0x13f0a63800000000, 0x50e4dd2f00000000,
<     0x95d8501600000000, 0xd6cc2b0100000000, 0x7641527200000000,
<     0x3555296500000000, 0xf069a45c00000000, 0xb37ddf4b00000000,
<     0x7a10be2f00000000, 0x3904c53800000000, 0xfc38480100000000,
<     0xbf2c331600000000, 0x6ee38ac900000000, 0x2df7f1de00000000,
<     0xe8cb7ce700000000, 0xabdf07f000000000, 0x62b2669400000000,
<     0x21a61d8300000000, 0xe49a90ba00000000, 0xa78eebad00000000,
<     0xa481635c00000000, 0xe795184b00000000, 0x22a9957200000000,
<     0x61bdee6500000000, 0xa8d08f0100000000, 0xebc4f41600000000,
<     0x2ef8792f00000000, 0x6dec023800000000, 0xbc23bbe700000000,
<     0xff37c0f000000000, 0x3a0b4dc900000000, 0x791f36de00000000,
<     0xb07257ba00000000, 0xf3662cad00000000, 0x365aa19400000000,
<     0x754eda8300000000, 0xd5c3a3f000000000, 0x96d7d8e700000000,
<     0x53eb55de00000000, 0x10ff2ec900000000, 0xd9924fad00000000,
<     0x9a8634ba00000000, 0x5fbab98300000000, 0x1caec29400000000,
<     0xcd617b4b00000000, 0x8e75005c00000000, 0x4b498d6500000000,
<     0x085df67200000000, 0xc130971600000000, 0x8224ec0100000000,
<     0x4718613800000000, 0x040c1a2f00000000, 0x4f00556600000000,
<     0x0c142e7100000000, 0xc928a34800000000, 0x8a3cd85f00000000,
<     0x4351b93b00000000, 0x0045c22c00000000, 0xc5794f1500000000,
<     0x866d340200000000, 0x57a28ddd00000000, 0x14b6f6ca00000000,
<     0xd18a7bf300000000, 0x929e00e400000000, 0x5bf3618000000000,
<     0x18e71a9700000000, 0xdddb97ae00000000, 0x9ecfecb900000000,
<     0x3e4295ca00000000, 0x7d56eedd00000000, 0xb86a63e400000000,
<     0xfb7e18f300000000, 0x3213799700000000, 0x7107028000000000,
<     0xb43b8fb900000000, 0xf72ff4ae00000000, 0x26e04d7100000000,
<     0x65f4366600000000, 0xa0c8bb5f00000000, 0xe3dcc04800000000,
<     0x2ab1a12c00000000, 0x69a5da3b00000000, 0xac99570200000000,
<     0xef8d2c1500000000, 0xec82a4e400000000, 0xaf96dff300000000,
<     0x6aaa52ca00000000, 0x29be29dd00000000, 0xe0d348b900000000,
<     0xa3c733ae00000000, 0x66fbbe9700000000, 0x25efc58000000000,
<     0xf4207c5f00000000, 0xb734074800000000, 0x72088a7100000000,
<     0x311cf16600000000, 0xf871900200000000, 0xbb65eb1500000000,
<     0x7e59662c00000000, 0x3d4d1d3b00000000, 0x9dc0644800000000,
<     0xded41f5f00000000, 0x1be8926600000000, 0x58fce97100000000,
<     0x9191881500000000, 0xd285f30200000000, 0x17b97e3b00000000,
<     0x54ad052c00000000, 0x8562bcf300000000, 0xc676c7e400000000,
<     0x034a4add00000000, 0x405e31ca00000000, 0x893350ae00000000,
<     0xca272bb900000000, 0x0f1ba68000000000, 0x4c0fdd9700000000,
<     0x4803c7b800000000, 0x0b17bcaf00000000, 0xce2b319600000000,
<     0x8d3f4a8100000000, 0x44522be500000000, 0x074650f200000000,
<     0xc27addcb00000000, 0x816ea6dc00000000, 0x50a11f0300000000,
<     0x13b5641400000000, 0xd689e92d00000000, 0x959d923a00000000,
<     0x5cf0f35e00000000, 0x1fe4884900000000, 0xdad8057000000000,
<     0x99cc7e6700000000, 0x3941071400000000, 0x7a557c0300000000,
<     0xbf69f13a00000000, 0xfc7d8a2d00000000, 0x3510eb4900000000,
<     0x7604905e00000000, 0xb3381d6700000000, 0xf02c667000000000,
<     0x21e3dfaf00000000, 0x62f7a4b800000000, 0xa7cb298100000000,
<     0xe4df529600000000, 0x2db233f200000000, 0x6ea648e500000000,
<     0xab9ac5dc00000000, 0xe88ebecb00000000, 0xeb81363a00000000,
<     0xa8954d2d00000000, 0x6da9c01400000000, 0x2ebdbb0300000000,
<     0xe7d0da6700000000, 0xa4c4a17000000000, 0x61f82c4900000000,
<     0x22ec575e00000000, 0xf323ee8100000000, 0xb037959600000000,
<     0x750b18af00000000, 0x361f63b800000000, 0xff7202dc00000000,
<     0xbc6679cb00000000, 0x795af4f200000000, 0x3a4e8fe500000000,
<     0x9ac3f69600000000, 0xd9d78d8100000000, 0x1ceb00b800000000,
<     0x5fff7baf00000000, 0x96921acb00000000, 0xd58661dc00000000,
<     0x10baece500000000, 0x53ae97f200000000, 0x82612e2d00000000,
<     0xc175553a00000000, 0x0449d80300000000, 0x475da31400000000,
<     0x8e30c27000000000, 0xcd24b96700000000, 0x0818345e00000000,
<     0x4b0c4f4900000000},
<    {0x0000000000000000, 0x3e6bc2ef00000000, 0x3dd0f50400000000,
<     0x03bb37eb00000000, 0x7aa0eb0900000000, 0x44cb29e600000000,
<     0x47701e0d00000000, 0x791bdce200000000, 0xf440d71300000000,
<     0xca2b15fc00000000, 0xc990221700000000, 0xf7fbe0f800000000,
<     0x8ee03c1a00000000, 0xb08bfef500000000, 0xb330c91e00000000,
<     0x8d5b0bf100000000, 0xe881ae2700000000, 0xd6ea6cc800000000,
<     0xd5515b2300000000, 0xeb3a99cc00000000, 0x9221452e00000000,
<     0xac4a87c100000000, 0xaff1b02a00000000, 0x919a72c500000000,
<     0x1cc1793400000000, 0x22aabbdb00000000, 0x21118c3000000000,
<     0x1f7a4edf00000000, 0x6661923d00000000, 0x580a50d200000000,
<     0x5bb1673900000000, 0x65daa5d600000000, 0xd0035d4f00000000,
<     0xee689fa000000000, 0xedd3a84b00000000, 0xd3b86aa400000000,
<     0xaaa3b64600000000, 0x94c874a900000000, 0x9773434200000000,
<     0xa91881ad00000000, 0x24438a5c00000000, 0x1a2848b300000000,
<     0x19937f5800000000, 0x27f8bdb700000000, 0x5ee3615500000000,
<     0x6088a3ba00000000, 0x6333945100000000, 0x5d5856be00000000,
<     0x3882f36800000000, 0x06e9318700000000, 0x0552066c00000000,
<     0x3b39c48300000000, 0x4222186100000000, 0x7c49da8e00000000,
<     0x7ff2ed6500000000, 0x41992f8a00000000, 0xccc2247b00000000,
<     0xf2a9e69400000000, 0xf112d17f00000000, 0xcf79139000000000,
<     0xb662cf7200000000, 0x88090d9d00000000, 0x8bb23a7600000000,
<     0xb5d9f89900000000, 0xa007ba9e00000000, 0x9e6c787100000000,
<     0x9dd74f9a00000000, 0xa3bc8d7500000000, 0xdaa7519700000000,
<     0xe4cc937800000000, 0xe777a49300000000, 0xd91c667c00000000,
<     0x54476d8d00000000, 0x6a2caf6200000000, 0x6997988900000000,
<     0x57fc5a6600000000, 0x2ee7868400000000, 0x108c446b00000000,
<     0x1337738000000000, 0x2d5cb16f00000000, 0x488614b900000000,
<     0x76edd65600000000, 0x7556e1bd00000000, 0x4b3d235200000000,
<     0x3226ffb000000000, 0x0c4d3d5f00000000, 0x0ff60ab400000000,
<     0x319dc85b00000000, 0xbcc6c3aa00000000, 0x82ad014500000000,
<     0x811636ae00000000, 0xbf7df44100000000, 0xc66628a300000000,
<     0xf80dea4c00000000, 0xfbb6dda700000000, 0xc5dd1f4800000000,
<     0x7004e7d100000000, 0x4e6f253e00000000, 0x4dd412d500000000,
<     0x73bfd03a00000000, 0x0aa40cd800000000, 0x34cfce3700000000,
<     0x3774f9dc00000000, 0x091f3b3300000000, 0x844430c200000000,
<     0xba2ff22d00000000, 0xb994c5c600000000, 0x87ff072900000000,
<     0xfee4dbcb00000000, 0xc08f192400000000, 0xc3342ecf00000000,
<     0xfd5fec2000000000, 0x988549f600000000, 0xa6ee8b1900000000,
<     0xa555bcf200000000, 0x9b3e7e1d00000000, 0xe225a2ff00000000,
<     0xdc4e601000000000, 0xdff557fb00000000, 0xe19e951400000000,
<     0x6cc59ee500000000, 0x52ae5c0a00000000, 0x51156be100000000,
<     0x6f7ea90e00000000, 0x166575ec00000000, 0x280eb70300000000,
<     0x2bb580e800000000, 0x15de420700000000, 0x010905e600000000,
<     0x3f62c70900000000, 0x3cd9f0e200000000, 0x02b2320d00000000,
<     0x7ba9eeef00000000, 0x45c22c0000000000, 0x46791beb00000000,
<     0x7812d90400000000, 0xf549d2f500000000, 0xcb22101a00000000,
<     0xc89927f100000000, 0xf6f2e51e00000000, 0x8fe939fc00000000,
<     0xb182fb1300000000, 0xb239ccf800000000, 0x8c520e1700000000,
<     0xe988abc100000000, 0xd7e3692e00000000, 0xd4585ec500000000,
<     0xea339c2a00000000, 0x932840c800000000, 0xad43822700000000,
<     0xaef8b5cc00000000, 0x9093772300000000, 0x1dc87cd200000000,
<     0x23a3be3d00000000, 0x201889d600000000, 0x1e734b3900000000,
<     0x676897db00000000, 0x5903553400000000, 0x5ab862df00000000,
<     0x64d3a03000000000, 0xd10a58a900000000, 0xef619a4600000000,
<     0xecdaadad00000000, 0xd2b16f4200000000, 0xabaab3a000000000,
<     0x95c1714f00000000, 0x967a46a400000000, 0xa811844b00000000,
<     0x254a8fba00000000, 0x1b214d5500000000, 0x189a7abe00000000,
<     0x26f1b85100000000, 0x5fea64b300000000, 0x6181a65c00000000,
<     0x623a91b700000000, 0x5c51535800000000, 0x398bf68e00000000,
<     0x07e0346100000000, 0x045b038a00000000, 0x3a30c16500000000,
<     0x432b1d8700000000, 0x7d40df6800000000, 0x7efbe88300000000,
<     0x40902a6c00000000, 0xcdcb219d00000000, 0xf3a0e37200000000,
<     0xf01bd49900000000, 0xce70167600000000, 0xb76bca9400000000,
<     0x8900087b00000000, 0x8abb3f9000000000, 0xb4d0fd7f00000000,
<     0xa10ebf7800000000, 0x9f657d9700000000, 0x9cde4a7c00000000,
<     0xa2b5889300000000, 0xdbae547100000000, 0xe5c5969e00000000,
<     0xe67ea17500000000, 0xd815639a00000000, 0x554e686b00000000,
<     0x6b25aa8400000000, 0x689e9d6f00000000, 0x56f55f8000000000,
<     0x2fee836200000000, 0x1185418d00000000, 0x123e766600000000,
<     0x2c55b48900000000, 0x498f115f00000000, 0x77e4d3b000000000,
<     0x745fe45b00000000, 0x4a3426b400000000, 0x332ffa5600000000,
<     0x0d4438b900000000, 0x0eff0f5200000000, 0x3094cdbd00000000,
<     0xbdcfc64c00000000, 0x83a404a300000000, 0x801f334800000000,
<     0xbe74f1a700000000, 0xc76f2d4500000000, 0xf904efaa00000000,
<     0xfabfd84100000000, 0xc4d41aae00000000, 0x710de23700000000,
<     0x4f6620d800000000, 0x4cdd173300000000, 0x72b6d5dc00000000,
<     0x0bad093e00000000, 0x35c6cbd100000000, 0x367dfc3a00000000,
<     0x08163ed500000000, 0x854d352400000000, 0xbb26f7cb00000000,
<     0xb89dc02000000000, 0x86f602cf00000000, 0xffedde2d00000000,
<     0xc1861cc200000000, 0xc23d2b2900000000, 0xfc56e9c600000000,
<     0x998c4c1000000000, 0xa7e78eff00000000, 0xa45cb91400000000,
<     0x9a377bfb00000000, 0xe32ca71900000000, 0xdd4765f600000000,
<     0xdefc521d00000000, 0xe09790f200000000, 0x6dcc9b0300000000,
<     0x53a759ec00000000, 0x501c6e0700000000, 0x6e77ace800000000,
<     0x176c700a00000000, 0x2907b2e500000000, 0x2abc850e00000000,
<     0x14d747e100000000},
<    {0x0000000000000000, 0xc0df8ec100000000, 0xc1b96c5800000000,
<     0x0166e29900000000, 0x8273d9b000000000, 0x42ac577100000000,
<     0x43cab5e800000000, 0x83153b2900000000, 0x45e1c3ba00000000,
<     0x853e4d7b00000000, 0x8458afe200000000, 0x4487212300000000,
<     0xc7921a0a00000000, 0x074d94cb00000000, 0x062b765200000000,
<     0xc6f4f89300000000, 0xcbc4f6ae00000000, 0x0b1b786f00000000,
<     0x0a7d9af600000000, 0xcaa2143700000000, 0x49b72f1e00000000,
<     0x8968a1df00000000, 0x880e434600000000, 0x48d1cd8700000000,
<     0x8e25351400000000, 0x4efabbd500000000, 0x4f9c594c00000000,
<     0x8f43d78d00000000, 0x0c56eca400000000, 0xcc89626500000000,
<     0xcdef80fc00000000, 0x0d300e3d00000000, 0xd78f9c8600000000,
<     0x1750124700000000, 0x1636f0de00000000, 0xd6e97e1f00000000,
<     0x55fc453600000000, 0x9523cbf700000000, 0x9445296e00000000,
<     0x549aa7af00000000, 0x926e5f3c00000000, 0x52b1d1fd00000000,
<     0x53d7336400000000, 0x9308bda500000000, 0x101d868c00000000,
<     0xd0c2084d00000000, 0xd1a4ead400000000, 0x117b641500000000,
<     0x1c4b6a2800000000, 0xdc94e4e900000000, 0xddf2067000000000,
<     0x1d2d88b100000000, 0x9e38b39800000000, 0x5ee73d5900000000,
<     0x5f81dfc000000000, 0x9f5e510100000000, 0x59aaa99200000000,
<     0x9975275300000000, 0x9813c5ca00000000, 0x58cc4b0b00000000,
<     0xdbd9702200000000, 0x1b06fee300000000, 0x1a601c7a00000000,
<     0xdabf92bb00000000, 0xef1948d600000000, 0x2fc6c61700000000,
<     0x2ea0248e00000000, 0xee7faa4f00000000, 0x6d6a916600000000,
<     0xadb51fa700000000, 0xacd3fd3e00000000, 0x6c0c73ff00000000,
<     0xaaf88b6c00000000, 0x6a2705ad00000000, 0x6b41e73400000000,
<     0xab9e69f500000000, 0x288b52dc00000000, 0xe854dc1d00000000,
<     0xe9323e8400000000, 0x29edb04500000000, 0x24ddbe7800000000,
<     0xe40230b900000000, 0xe564d22000000000, 0x25bb5ce100000000,
<     0xa6ae67c800000000, 0x6671e90900000000, 0x67170b9000000000,
<     0xa7c8855100000000, 0x613c7dc200000000, 0xa1e3f30300000000,
<     0xa085119a00000000, 0x605a9f5b00000000, 0xe34fa47200000000,
<     0x23902ab300000000, 0x22f6c82a00000000, 0xe22946eb00000000,
<     0x3896d45000000000, 0xf8495a9100000000, 0xf92fb80800000000,
<     0x39f036c900000000, 0xbae50de000000000, 0x7a3a832100000000,
<     0x7b5c61b800000000, 0xbb83ef7900000000, 0x7d7717ea00000000,
<     0xbda8992b00000000, 0xbcce7bb200000000, 0x7c11f57300000000,
<     0xff04ce5a00000000, 0x3fdb409b00000000, 0x3ebda20200000000,
<     0xfe622cc300000000, 0xf35222fe00000000, 0x338dac3f00000000,
<     0x32eb4ea600000000, 0xf234c06700000000, 0x7121fb4e00000000,
<     0xb1fe758f00000000, 0xb098971600000000, 0x704719d700000000,
<     0xb6b3e14400000000, 0x766c6f8500000000, 0x770a8d1c00000000,
<     0xb7d503dd00000000, 0x34c038f400000000, 0xf41fb63500000000,
<     0xf57954ac00000000, 0x35a6da6d00000000, 0x9f35e17700000000,
<     0x5fea6fb600000000, 0x5e8c8d2f00000000, 0x9e5303ee00000000,
<     0x1d4638c700000000, 0xdd99b60600000000, 0xdcff549f00000000,
<     0x1c20da5e00000000, 0xdad422cd00000000, 0x1a0bac0c00000000,
<     0x1b6d4e9500000000, 0xdbb2c05400000000, 0x58a7fb7d00000000,
<     0x987875bc00000000, 0x991e972500000000, 0x59c119e400000000,
<     0x54f117d900000000, 0x942e991800000000, 0x95487b8100000000,
<     0x5597f54000000000, 0xd682ce6900000000, 0x165d40a800000000,
<     0x173ba23100000000, 0xd7e42cf000000000, 0x1110d46300000000,
<     0xd1cf5aa200000000, 0xd0a9b83b00000000, 0x107636fa00000000,
<     0x93630dd300000000, 0x53bc831200000000, 0x52da618b00000000,
<     0x9205ef4a00000000, 0x48ba7df100000000, 0x8865f33000000000,
<     0x890311a900000000, 0x49dc9f6800000000, 0xcac9a44100000000,
<     0x0a162a8000000000, 0x0b70c81900000000, 0xcbaf46d800000000,
<     0x0d5bbe4b00000000, 0xcd84308a00000000, 0xcce2d21300000000,
<     0x0c3d5cd200000000, 0x8f2867fb00000000, 0x4ff7e93a00000000,
<     0x4e910ba300000000, 0x8e4e856200000000, 0x837e8b5f00000000,
<     0x43a1059e00000000, 0x42c7e70700000000, 0x821869c600000000,
<     0x010d52ef00000000, 0xc1d2dc2e00000000, 0xc0b43eb700000000,
<     0x006bb07600000000, 0xc69f48e500000000, 0x0640c62400000000,
<     0x072624bd00000000, 0xc7f9aa7c00000000, 0x44ec915500000000,
<     0x84331f9400000000, 0x8555fd0d00000000, 0x458a73cc00000000,
<     0x702ca9a100000000, 0xb0f3276000000000, 0xb195c5f900000000,
<     0x714a4b3800000000, 0xf25f701100000000, 0x3280fed000000000,
<     0x33e61c4900000000, 0xf339928800000000, 0x35cd6a1b00000000,
<     0xf512e4da00000000, 0xf474064300000000, 0x34ab888200000000,
<     0xb7beb3ab00000000, 0x77613d6a00000000, 0x7607dff300000000,
<     0xb6d8513200000000, 0xbbe85f0f00000000, 0x7b37d1ce00000000,
<     0x7a51335700000000, 0xba8ebd9600000000, 0x399b86bf00000000,
<     0xf944087e00000000, 0xf822eae700000000, 0x38fd642600000000,
<     0xfe099cb500000000, 0x3ed6127400000000, 0x3fb0f0ed00000000,
<     0xff6f7e2c00000000, 0x7c7a450500000000, 0xbca5cbc400000000,
<     0xbdc3295d00000000, 0x7d1ca79c00000000, 0xa7a3352700000000,
<     0x677cbbe600000000, 0x661a597f00000000, 0xa6c5d7be00000000,
<     0x25d0ec9700000000, 0xe50f625600000000, 0xe46980cf00000000,
<     0x24b60e0e00000000, 0xe242f69d00000000, 0x229d785c00000000,
<     0x23fb9ac500000000, 0xe324140400000000, 0x60312f2d00000000,
<     0xa0eea1ec00000000, 0xa188437500000000, 0x6157cdb400000000,
<     0x6c67c38900000000, 0xacb84d4800000000, 0xaddeafd100000000,
<     0x6d01211000000000, 0xee141a3900000000, 0x2ecb94f800000000,
<     0x2fad766100000000, 0xef72f8a000000000, 0x2986003300000000,
<     0xe9598ef200000000, 0xe83f6c6b00000000, 0x28e0e2aa00000000,
<     0xabf5d98300000000, 0x6b2a574200000000, 0x6a4cb5db00000000,
<     0xaa933b1a00000000},
<    {0x0000000000000000, 0x6f4ca59b00000000, 0x9f9e3bec00000000,
<     0xf0d29e7700000000, 0x7f3b060300000000, 0x1077a39800000000,
<     0xe0a53def00000000, 0x8fe9987400000000, 0xfe760c0600000000,
<     0x913aa99d00000000, 0x61e837ea00000000, 0x0ea4927100000000,
<     0x814d0a0500000000, 0xee01af9e00000000, 0x1ed331e900000000,
<     0x719f947200000000, 0xfced180c00000000, 0x93a1bd9700000000,
<     0x637323e000000000, 0x0c3f867b00000000, 0x83d61e0f00000000,
<     0xec9abb9400000000, 0x1c4825e300000000, 0x7304807800000000,
<     0x029b140a00000000, 0x6dd7b19100000000, 0x9d052fe600000000,
<     0xf2498a7d00000000, 0x7da0120900000000, 0x12ecb79200000000,
<     0xe23e29e500000000, 0x8d728c7e00000000, 0xf8db311800000000,
<     0x9797948300000000, 0x67450af400000000, 0x0809af6f00000000,
<     0x87e0371b00000000, 0xe8ac928000000000, 0x187e0cf700000000,
<     0x7732a96c00000000, 0x06ad3d1e00000000, 0x69e1988500000000,
<     0x993306f200000000, 0xf67fa36900000000, 0x79963b1d00000000,
<     0x16da9e8600000000, 0xe60800f100000000, 0x8944a56a00000000,
<     0x0436291400000000, 0x6b7a8c8f00000000, 0x9ba812f800000000,
<     0xf4e4b76300000000, 0x7b0d2f1700000000, 0x14418a8c00000000,
<     0xe49314fb00000000, 0x8bdfb16000000000, 0xfa40251200000000,
<     0x950c808900000000, 0x65de1efe00000000, 0x0a92bb6500000000,
<     0x857b231100000000, 0xea37868a00000000, 0x1ae518fd00000000,
<     0x75a9bd6600000000, 0xf0b7633000000000, 0x9ffbc6ab00000000,
<     0x6f2958dc00000000, 0x0065fd4700000000, 0x8f8c653300000000,
<     0xe0c0c0a800000000, 0x10125edf00000000, 0x7f5efb4400000000,
<     0x0ec16f3600000000, 0x618dcaad00000000, 0x915f54da00000000,
<     0xfe13f14100000000, 0x71fa693500000000, 0x1eb6ccae00000000,
<     0xee6452d900000000, 0x8128f74200000000, 0x0c5a7b3c00000000,
<     0x6316dea700000000, 0x93c440d000000000, 0xfc88e54b00000000,
<     0x73617d3f00000000, 0x1c2dd8a400000000, 0xecff46d300000000,
<     0x83b3e34800000000, 0xf22c773a00000000, 0x9d60d2a100000000,
<     0x6db24cd600000000, 0x02fee94d00000000, 0x8d17713900000000,
<     0xe25bd4a200000000, 0x12894ad500000000, 0x7dc5ef4e00000000,
<     0x086c522800000000, 0x6720f7b300000000, 0x97f269c400000000,
<     0xf8becc5f00000000, 0x7757542b00000000, 0x181bf1b000000000,
<     0xe8c96fc700000000, 0x8785ca5c00000000, 0xf61a5e2e00000000,
<     0x9956fbb500000000, 0x698465c200000000, 0x06c8c05900000000,
<     0x8921582d00000000, 0xe66dfdb600000000, 0x16bf63c100000000,
<     0x79f3c65a00000000, 0xf4814a2400000000, 0x9bcdefbf00000000,
<     0x6b1f71c800000000, 0x0453d45300000000, 0x8bba4c2700000000,
<     0xe4f6e9bc00000000, 0x142477cb00000000, 0x7b68d25000000000,
<     0x0af7462200000000, 0x65bbe3b900000000, 0x95697dce00000000,
<     0xfa25d85500000000, 0x75cc402100000000, 0x1a80e5ba00000000,
<     0xea527bcd00000000, 0x851ede5600000000, 0xe06fc76000000000,
<     0x8f2362fb00000000, 0x7ff1fc8c00000000, 0x10bd591700000000,
<     0x9f54c16300000000, 0xf01864f800000000, 0x00cafa8f00000000,
<     0x6f865f1400000000, 0x1e19cb6600000000, 0x71556efd00000000,
<     0x8187f08a00000000, 0xeecb551100000000, 0x6122cd6500000000,
<     0x0e6e68fe00000000, 0xfebcf68900000000, 0x91f0531200000000,
<     0x1c82df6c00000000, 0x73ce7af700000000, 0x831ce48000000000,
<     0xec50411b00000000, 0x63b9d96f00000000, 0x0cf57cf400000000,
<     0xfc27e28300000000, 0x936b471800000000, 0xe2f4d36a00000000,
<     0x8db876f100000000, 0x7d6ae88600000000, 0x12264d1d00000000,
<     0x9dcfd56900000000, 0xf28370f200000000, 0x0251ee8500000000,
<     0x6d1d4b1e00000000, 0x18b4f67800000000, 0x77f853e300000000,
<     0x872acd9400000000, 0xe866680f00000000, 0x678ff07b00000000,
<     0x08c355e000000000, 0xf811cb9700000000, 0x975d6e0c00000000,
<     0xe6c2fa7e00000000, 0x898e5fe500000000, 0x795cc19200000000,
<     0x1610640900000000, 0x99f9fc7d00000000, 0xf6b559e600000000,
<     0x0667c79100000000, 0x692b620a00000000, 0xe459ee7400000000,
<     0x8b154bef00000000, 0x7bc7d59800000000, 0x148b700300000000,
<     0x9b62e87700000000, 0xf42e4dec00000000, 0x04fcd39b00000000,
<     0x6bb0760000000000, 0x1a2fe27200000000, 0x756347e900000000,
<     0x85b1d99e00000000, 0xeafd7c0500000000, 0x6514e47100000000,
<     0x0a5841ea00000000, 0xfa8adf9d00000000, 0x95c67a0600000000,
<     0x10d8a45000000000, 0x7f9401cb00000000, 0x8f469fbc00000000,
<     0xe00a3a2700000000, 0x6fe3a25300000000, 0x00af07c800000000,
<     0xf07d99bf00000000, 0x9f313c2400000000, 0xeeaea85600000000,
<     0x81e20dcd00000000, 0x713093ba00000000, 0x1e7c362100000000,
<     0x9195ae5500000000, 0xfed90bce00000000, 0x0e0b95b900000000,
<     0x6147302200000000, 0xec35bc5c00000000, 0x837919c700000000,
<     0x73ab87b000000000, 0x1ce7222b00000000, 0x930eba5f00000000,
<     0xfc421fc400000000, 0x0c9081b300000000, 0x63dc242800000000,
<     0x1243b05a00000000, 0x7d0f15c100000000, 0x8ddd8bb600000000,
<     0xe2912e2d00000000, 0x6d78b65900000000, 0x023413c200000000,
<     0xf2e68db500000000, 0x9daa282e00000000, 0xe803954800000000,
<     0x874f30d300000000, 0x779daea400000000, 0x18d10b3f00000000,
<     0x9738934b00000000, 0xf87436d000000000, 0x08a6a8a700000000,
<     0x67ea0d3c00000000, 0x1675994e00000000, 0x79393cd500000000,
<     0x89eba2a200000000, 0xe6a7073900000000, 0x694e9f4d00000000,
<     0x06023ad600000000, 0xf6d0a4a100000000, 0x999c013a00000000,
<     0x14ee8d4400000000, 0x7ba228df00000000, 0x8b70b6a800000000,
<     0xe43c133300000000, 0x6bd58b4700000000, 0x04992edc00000000,
<     0xf44bb0ab00000000, 0x9b07153000000000, 0xea98814200000000,
<     0x85d424d900000000, 0x7506baae00000000, 0x1a4a1f3500000000,
<     0x95a3874100000000, 0xfaef22da00000000, 0x0a3dbcad00000000,
<     0x6571193600000000},
<    {0x0000000000000000, 0x85d996dd00000000, 0x4bb55c6000000000,
<     0xce6ccabd00000000, 0x966ab9c000000000, 0x13b32f1d00000000,
<     0xdddfe5a000000000, 0x5806737d00000000, 0x6dd3035a00000000,
<     0xe80a958700000000, 0x26665f3a00000000, 0xa3bfc9e700000000,
<     0xfbb9ba9a00000000, 0x7e602c4700000000, 0xb00ce6fa00000000,
<     0x35d5702700000000, 0xdaa607b400000000, 0x5f7f916900000000,
<     0x91135bd400000000, 0x14cacd0900000000, 0x4cccbe7400000000,
<     0xc91528a900000000, 0x0779e21400000000, 0x82a074c900000000,
<     0xb77504ee00000000, 0x32ac923300000000, 0xfcc0588e00000000,
<     0x7919ce5300000000, 0x211fbd2e00000000, 0xa4c62bf300000000,
<     0x6aaae14e00000000, 0xef73779300000000, 0xf54b7eb300000000,
<     0x7092e86e00000000, 0xbefe22d300000000, 0x3b27b40e00000000,
<     0x6321c77300000000, 0xe6f851ae00000000, 0x28949b1300000000,
<     0xad4d0dce00000000, 0x98987de900000000, 0x1d41eb3400000000,
<     0xd32d218900000000, 0x56f4b75400000000, 0x0ef2c42900000000,
<     0x8b2b52f400000000, 0x4547984900000000, 0xc09e0e9400000000,
<     0x2fed790700000000, 0xaa34efda00000000, 0x6458256700000000,
<     0xe181b3ba00000000, 0xb987c0c700000000, 0x3c5e561a00000000,
<     0xf2329ca700000000, 0x77eb0a7a00000000, 0x423e7a5d00000000,
<     0xc7e7ec8000000000, 0x098b263d00000000, 0x8c52b0e000000000,
<     0xd454c39d00000000, 0x518d554000000000, 0x9fe19ffd00000000,
<     0x1a38092000000000, 0xab918dbd00000000, 0x2e481b6000000000,
<     0xe024d1dd00000000, 0x65fd470000000000, 0x3dfb347d00000000,
<     0xb822a2a000000000, 0x764e681d00000000, 0xf397fec000000000,
<     0xc6428ee700000000, 0x439b183a00000000, 0x8df7d28700000000,
<     0x082e445a00000000, 0x5028372700000000, 0xd5f1a1fa00000000,
<     0x1b9d6b4700000000, 0x9e44fd9a00000000, 0x71378a0900000000,
<     0xf4ee1cd400000000, 0x3a82d66900000000, 0xbf5b40b400000000,
<     0xe75d33c900000000, 0x6284a51400000000, 0xace86fa900000000,
<     0x2931f97400000000, 0x1ce4895300000000, 0x993d1f8e00000000,
<     0x5751d53300000000, 0xd28843ee00000000, 0x8a8e309300000000,
<     0x0f57a64e00000000, 0xc13b6cf300000000, 0x44e2fa2e00000000,
<     0x5edaf30e00000000, 0xdb0365d300000000, 0x156faf6e00000000,
<     0x90b639b300000000, 0xc8b04ace00000000, 0x4d69dc1300000000,
<     0x830516ae00000000, 0x06dc807300000000, 0x3309f05400000000,
<     0xb6d0668900000000, 0x78bcac3400000000, 0xfd653ae900000000,
<     0xa563499400000000, 0x20badf4900000000, 0xeed615f400000000,
<     0x6b0f832900000000, 0x847cf4ba00000000, 0x01a5626700000000,
<     0xcfc9a8da00000000, 0x4a103e0700000000, 0x12164d7a00000000,
<     0x97cfdba700000000, 0x59a3111a00000000, 0xdc7a87c700000000,
<     0xe9aff7e000000000, 0x6c76613d00000000, 0xa21aab8000000000,
<     0x27c33d5d00000000, 0x7fc54e2000000000, 0xfa1cd8fd00000000,
<     0x3470124000000000, 0xb1a9849d00000000, 0x17256aa000000000,
<     0x92fcfc7d00000000, 0x5c9036c000000000, 0xd949a01d00000000,
<     0x814fd36000000000, 0x049645bd00000000, 0xcafa8f0000000000,
<     0x4f2319dd00000000, 0x7af669fa00000000, 0xff2fff2700000000,
<     0x3143359a00000000, 0xb49aa34700000000, 0xec9cd03a00000000,
<     0x694546e700000000, 0xa7298c5a00000000, 0x22f01a8700000000,
<     0xcd836d1400000000, 0x485afbc900000000, 0x8636317400000000,
<     0x03efa7a900000000, 0x5be9d4d400000000, 0xde30420900000000,
<     0x105c88b400000000, 0x95851e6900000000, 0xa0506e4e00000000,
<     0x2589f89300000000, 0xebe5322e00000000, 0x6e3ca4f300000000,
<     0x363ad78e00000000, 0xb3e3415300000000, 0x7d8f8bee00000000,
<     0xf8561d3300000000, 0xe26e141300000000, 0x67b782ce00000000,
<     0xa9db487300000000, 0x2c02deae00000000, 0x7404add300000000,
<     0xf1dd3b0e00000000, 0x3fb1f1b300000000, 0xba68676e00000000,
<     0x8fbd174900000000, 0x0a64819400000000, 0xc4084b2900000000,
<     0x41d1ddf400000000, 0x19d7ae8900000000, 0x9c0e385400000000,
<     0x5262f2e900000000, 0xd7bb643400000000, 0x38c813a700000000,
<     0xbd11857a00000000, 0x737d4fc700000000, 0xf6a4d91a00000000,
<     0xaea2aa6700000000, 0x2b7b3cba00000000, 0xe517f60700000000,
<     0x60ce60da00000000, 0x551b10fd00000000, 0xd0c2862000000000,
<     0x1eae4c9d00000000, 0x9b77da4000000000, 0xc371a93d00000000,
<     0x46a83fe000000000, 0x88c4f55d00000000, 0x0d1d638000000000,
<     0xbcb4e71d00000000, 0x396d71c000000000, 0xf701bb7d00000000,
<     0x72d82da000000000, 0x2ade5edd00000000, 0xaf07c80000000000,
<     0x616b02bd00000000, 0xe4b2946000000000, 0xd167e44700000000,
<     0x54be729a00000000, 0x9ad2b82700000000, 0x1f0b2efa00000000,
<     0x470d5d8700000000, 0xc2d4cb5a00000000, 0x0cb801e700000000,
<     0x8961973a00000000, 0x6612e0a900000000, 0xe3cb767400000000,
<     0x2da7bcc900000000, 0xa87e2a1400000000, 0xf078596900000000,
<     0x75a1cfb400000000, 0xbbcd050900000000, 0x3e1493d400000000,
<     0x0bc1e3f300000000, 0x8e18752e00000000, 0x4074bf9300000000,
<     0xc5ad294e00000000, 0x9dab5a3300000000, 0x1872ccee00000000,
<     0xd61e065300000000, 0x53c7908e00000000, 0x49ff99ae00000000,
<     0xcc260f7300000000, 0x024ac5ce00000000, 0x8793531300000000,
<     0xdf95206e00000000, 0x5a4cb6b300000000, 0x94207c0e00000000,
<     0x11f9ead300000000, 0x242c9af400000000, 0xa1f50c2900000000,
<     0x6f99c69400000000, 0xea40504900000000, 0xb246233400000000,
<     0x379fb5e900000000, 0xf9f37f5400000000, 0x7c2ae98900000000,
<     0x93599e1a00000000, 0x168008c700000000, 0xd8ecc27a00000000,
<     0x5d3554a700000000, 0x053327da00000000, 0x80eab10700000000,
<     0x4e867bba00000000, 0xcb5fed6700000000, 0xfe8a9d4000000000,
<     0x7b530b9d00000000, 0xb53fc12000000000, 0x30e657fd00000000,
<     0x68e0248000000000, 0xed39b25d00000000, 0x235578e000000000,
<     0xa68cee3d00000000},
<    {0x0000000000000000, 0x76e10f9d00000000, 0xadc46ee100000000,
<     0xdb25617c00000000, 0x1b8fac1900000000, 0x6d6ea38400000000,
<     0xb64bc2f800000000, 0xc0aacd6500000000, 0x361e593300000000,
<     0x40ff56ae00000000, 0x9bda37d200000000, 0xed3b384f00000000,
<     0x2d91f52a00000000, 0x5b70fab700000000, 0x80559bcb00000000,
<     0xf6b4945600000000, 0x6c3cb26600000000, 0x1addbdfb00000000,
<     0xc1f8dc8700000000, 0xb719d31a00000000, 0x77b31e7f00000000,
<     0x015211e200000000, 0xda77709e00000000, 0xac967f0300000000,
<     0x5a22eb5500000000, 0x2cc3e4c800000000, 0xf7e685b400000000,
<     0x81078a2900000000, 0x41ad474c00000000, 0x374c48d100000000,
<     0xec6929ad00000000, 0x9a88263000000000, 0xd87864cd00000000,
<     0xae996b5000000000, 0x75bc0a2c00000000, 0x035d05b100000000,
<     0xc3f7c8d400000000, 0xb516c74900000000, 0x6e33a63500000000,
<     0x18d2a9a800000000, 0xee663dfe00000000, 0x9887326300000000,
<     0x43a2531f00000000, 0x35435c8200000000, 0xf5e991e700000000,
<     0x83089e7a00000000, 0x582dff0600000000, 0x2eccf09b00000000,
<     0xb444d6ab00000000, 0xc2a5d93600000000, 0x1980b84a00000000,
<     0x6f61b7d700000000, 0xafcb7ab200000000, 0xd92a752f00000000,
<     0x020f145300000000, 0x74ee1bce00000000, 0x825a8f9800000000,
<     0xf4bb800500000000, 0x2f9ee17900000000, 0x597feee400000000,
<     0x99d5238100000000, 0xef342c1c00000000, 0x34114d6000000000,
<     0x42f042fd00000000, 0xf1f7b94100000000, 0x8716b6dc00000000,
<     0x5c33d7a000000000, 0x2ad2d83d00000000, 0xea78155800000000,
<     0x9c991ac500000000, 0x47bc7bb900000000, 0x315d742400000000,
<     0xc7e9e07200000000, 0xb108efef00000000, 0x6a2d8e9300000000,
<     0x1ccc810e00000000, 0xdc664c6b00000000, 0xaa8743f600000000,
<     0x71a2228a00000000, 0x07432d1700000000, 0x9dcb0b2700000000,
<     0xeb2a04ba00000000, 0x300f65c600000000, 0x46ee6a5b00000000,
<     0x8644a73e00000000, 0xf0a5a8a300000000, 0x2b80c9df00000000,
<     0x5d61c64200000000, 0xabd5521400000000, 0xdd345d8900000000,
<     0x06113cf500000000, 0x70f0336800000000, 0xb05afe0d00000000,
<     0xc6bbf19000000000, 0x1d9e90ec00000000, 0x6b7f9f7100000000,
<     0x298fdd8c00000000, 0x5f6ed21100000000, 0x844bb36d00000000,
<     0xf2aabcf000000000, 0x3200719500000000, 0x44e17e0800000000,
<     0x9fc41f7400000000, 0xe92510e900000000, 0x1f9184bf00000000,
<     0x69708b2200000000, 0xb255ea5e00000000, 0xc4b4e5c300000000,
<     0x041e28a600000000, 0x72ff273b00000000, 0xa9da464700000000,
<     0xdf3b49da00000000, 0x45b36fea00000000, 0x3352607700000000,
<     0xe877010b00000000, 0x9e960e9600000000, 0x5e3cc3f300000000,
<     0x28ddcc6e00000000, 0xf3f8ad1200000000, 0x8519a28f00000000,
<     0x73ad36d900000000, 0x054c394400000000, 0xde69583800000000,
<     0xa88857a500000000, 0x68229ac000000000, 0x1ec3955d00000000,
<     0xc5e6f42100000000, 0xb307fbbc00000000, 0xe2ef738300000000,
<     0x940e7c1e00000000, 0x4f2b1d6200000000, 0x39ca12ff00000000,
<     0xf960df9a00000000, 0x8f81d00700000000, 0x54a4b17b00000000,
<     0x2245bee600000000, 0xd4f12ab000000000, 0xa210252d00000000,
<     0x7935445100000000, 0x0fd44bcc00000000, 0xcf7e86a900000000,
<     0xb99f893400000000, 0x62bae84800000000, 0x145be7d500000000,
<     0x8ed3c1e500000000, 0xf832ce7800000000, 0x2317af0400000000,
<     0x55f6a09900000000, 0x955c6dfc00000000, 0xe3bd626100000000,
<     0x3898031d00000000, 0x4e790c8000000000, 0xb8cd98d600000000,
<     0xce2c974b00000000, 0x1509f63700000000, 0x63e8f9aa00000000,
<     0xa34234cf00000000, 0xd5a33b5200000000, 0x0e865a2e00000000,
<     0x786755b300000000, 0x3a97174e00000000, 0x4c7618d300000000,
<     0x975379af00000000, 0xe1b2763200000000, 0x2118bb5700000000,
<     0x57f9b4ca00000000, 0x8cdcd5b600000000, 0xfa3dda2b00000000,
<     0x0c894e7d00000000, 0x7a6841e000000000, 0xa14d209c00000000,
<     0xd7ac2f0100000000, 0x1706e26400000000, 0x61e7edf900000000,
<     0xbac28c8500000000, 0xcc23831800000000, 0x56aba52800000000,
<     0x204aaab500000000, 0xfb6fcbc900000000, 0x8d8ec45400000000,
<     0x4d24093100000000, 0x3bc506ac00000000, 0xe0e067d000000000,
<     0x9601684d00000000, 0x60b5fc1b00000000, 0x1654f38600000000,
<     0xcd7192fa00000000, 0xbb909d6700000000, 0x7b3a500200000000,
<     0x0ddb5f9f00000000, 0xd6fe3ee300000000, 0xa01f317e00000000,
<     0x1318cac200000000, 0x65f9c55f00000000, 0xbedca42300000000,
<     0xc83dabbe00000000, 0x089766db00000000, 0x7e76694600000000,
<     0xa553083a00000000, 0xd3b207a700000000, 0x250693f100000000,
<     0x53e79c6c00000000, 0x88c2fd1000000000, 0xfe23f28d00000000,
<     0x3e893fe800000000, 0x4868307500000000, 0x934d510900000000,
<     0xe5ac5e9400000000, 0x7f2478a400000000, 0x09c5773900000000,
<     0xd2e0164500000000, 0xa40119d800000000, 0x64abd4bd00000000,
<     0x124adb2000000000, 0xc96fba5c00000000, 0xbf8eb5c100000000,
<     0x493a219700000000, 0x3fdb2e0a00000000, 0xe4fe4f7600000000,
<     0x921f40eb00000000, 0x52b58d8e00000000, 0x2454821300000000,
<     0xff71e36f00000000, 0x8990ecf200000000, 0xcb60ae0f00000000,
<     0xbd81a19200000000, 0x66a4c0ee00000000, 0x1045cf7300000000,
<     0xd0ef021600000000, 0xa60e0d8b00000000, 0x7d2b6cf700000000,
<     0x0bca636a00000000, 0xfd7ef73c00000000, 0x8b9ff8a100000000,
<     0x50ba99dd00000000, 0x265b964000000000, 0xe6f15b2500000000,
<     0x901054b800000000, 0x4b3535c400000000, 0x3dd43a5900000000,
<     0xa75c1c6900000000, 0xd1bd13f400000000, 0x0a98728800000000,
<     0x7c797d1500000000, 0xbcd3b07000000000, 0xca32bfed00000000,
<     0x1117de9100000000, 0x67f6d10c00000000, 0x9142455a00000000,
<     0xe7a34ac700000000, 0x3c862bbb00000000, 0x4a67242600000000,
<     0x8acde94300000000, 0xfc2ce6de00000000, 0x270987a200000000,
<     0x51e8883f00000000},
<    {0x0000000000000000, 0xe8dbfbb900000000, 0x91b186a800000000,
<     0x796a7d1100000000, 0x63657c8a00000000, 0x8bbe873300000000,
<     0xf2d4fa2200000000, 0x1a0f019b00000000, 0x87cc89cf00000000,
<     0x6f17727600000000, 0x167d0f6700000000, 0xfea6f4de00000000,
<     0xe4a9f54500000000, 0x0c720efc00000000, 0x751873ed00000000,
<     0x9dc3885400000000, 0x4f9f624400000000, 0xa74499fd00000000,
<     0xde2ee4ec00000000, 0x36f51f5500000000, 0x2cfa1ece00000000,
<     0xc421e57700000000, 0xbd4b986600000000, 0x559063df00000000,
<     0xc853eb8b00000000, 0x2088103200000000, 0x59e26d2300000000,
<     0xb139969a00000000, 0xab36970100000000, 0x43ed6cb800000000,
<     0x3a8711a900000000, 0xd25cea1000000000, 0x9e3ec58800000000,
<     0x76e53e3100000000, 0x0f8f432000000000, 0xe754b89900000000,
<     0xfd5bb90200000000, 0x158042bb00000000, 0x6cea3faa00000000,
<     0x8431c41300000000, 0x19f24c4700000000, 0xf129b7fe00000000,
<     0x8843caef00000000, 0x6098315600000000, 0x7a9730cd00000000,
<     0x924ccb7400000000, 0xeb26b66500000000, 0x03fd4ddc00000000,
<     0xd1a1a7cc00000000, 0x397a5c7500000000, 0x4010216400000000,
<     0xa8cbdadd00000000, 0xb2c4db4600000000, 0x5a1f20ff00000000,
<     0x23755dee00000000, 0xcbaea65700000000, 0x566d2e0300000000,
<     0xbeb6d5ba00000000, 0xc7dca8ab00000000, 0x2f07531200000000,
<     0x3508528900000000, 0xddd3a93000000000, 0xa4b9d42100000000,
<     0x4c622f9800000000, 0x7d7bfbca00000000, 0x95a0007300000000,
<     0xecca7d6200000000, 0x041186db00000000, 0x1e1e874000000000,
<     0xf6c57cf900000000, 0x8faf01e800000000, 0x6774fa5100000000,
<     0xfab7720500000000, 0x126c89bc00000000, 0x6b06f4ad00000000,
<     0x83dd0f1400000000, 0x99d20e8f00000000, 0x7109f53600000000,
<     0x0863882700000000, 0xe0b8739e00000000, 0x32e4998e00000000,
<     0xda3f623700000000, 0xa3551f2600000000, 0x4b8ee49f00000000,
<     0x5181e50400000000, 0xb95a1ebd00000000, 0xc03063ac00000000,
<     0x28eb981500000000, 0xb528104100000000, 0x5df3ebf800000000,
<     0x249996e900000000, 0xcc426d5000000000, 0xd64d6ccb00000000,
<     0x3e96977200000000, 0x47fcea6300000000, 0xaf2711da00000000,
<     0xe3453e4200000000, 0x0b9ec5fb00000000, 0x72f4b8ea00000000,
<     0x9a2f435300000000, 0x802042c800000000, 0x68fbb97100000000,
<     0x1191c46000000000, 0xf94a3fd900000000, 0x6489b78d00000000,
<     0x8c524c3400000000, 0xf538312500000000, 0x1de3ca9c00000000,
<     0x07eccb0700000000, 0xef3730be00000000, 0x965d4daf00000000,
<     0x7e86b61600000000, 0xacda5c0600000000, 0x4401a7bf00000000,
<     0x3d6bdaae00000000, 0xd5b0211700000000, 0xcfbf208c00000000,
<     0x2764db3500000000, 0x5e0ea62400000000, 0xb6d55d9d00000000,
<     0x2b16d5c900000000, 0xc3cd2e7000000000, 0xbaa7536100000000,
<     0x527ca8d800000000, 0x4873a94300000000, 0xa0a852fa00000000,
<     0xd9c22feb00000000, 0x3119d45200000000, 0xbbf0874e00000000,
<     0x532b7cf700000000, 0x2a4101e600000000, 0xc29afa5f00000000,
<     0xd895fbc400000000, 0x304e007d00000000, 0x49247d6c00000000,
<     0xa1ff86d500000000, 0x3c3c0e8100000000, 0xd4e7f53800000000,
<     0xad8d882900000000, 0x4556739000000000, 0x5f59720b00000000,
<     0xb78289b200000000, 0xcee8f4a300000000, 0x26330f1a00000000,
<     0xf46fe50a00000000, 0x1cb41eb300000000, 0x65de63a200000000,
<     0x8d05981b00000000, 0x970a998000000000, 0x7fd1623900000000,
<     0x06bb1f2800000000, 0xee60e49100000000, 0x73a36cc500000000,
<     0x9b78977c00000000, 0xe212ea6d00000000, 0x0ac911d400000000,
<     0x10c6104f00000000, 0xf81debf600000000, 0x817796e700000000,
<     0x69ac6d5e00000000, 0x25ce42c600000000, 0xcd15b97f00000000,
<     0xb47fc46e00000000, 0x5ca43fd700000000, 0x46ab3e4c00000000,
<     0xae70c5f500000000, 0xd71ab8e400000000, 0x3fc1435d00000000,
<     0xa202cb0900000000, 0x4ad930b000000000, 0x33b34da100000000,
<     0xdb68b61800000000, 0xc167b78300000000, 0x29bc4c3a00000000,
<     0x50d6312b00000000, 0xb80dca9200000000, 0x6a51208200000000,
<     0x828adb3b00000000, 0xfbe0a62a00000000, 0x133b5d9300000000,
<     0x09345c0800000000, 0xe1efa7b100000000, 0x9885daa000000000,
<     0x705e211900000000, 0xed9da94d00000000, 0x054652f400000000,
<     0x7c2c2fe500000000, 0x94f7d45c00000000, 0x8ef8d5c700000000,
<     0x66232e7e00000000, 0x1f49536f00000000, 0xf792a8d600000000,
<     0xc68b7c8400000000, 0x2e50873d00000000, 0x573afa2c00000000,
<     0xbfe1019500000000, 0xa5ee000e00000000, 0x4d35fbb700000000,
<     0x345f86a600000000, 0xdc847d1f00000000, 0x4147f54b00000000,
<     0xa99c0ef200000000, 0xd0f673e300000000, 0x382d885a00000000,
<     0x222289c100000000, 0xcaf9727800000000, 0xb3930f6900000000,
<     0x5b48f4d000000000, 0x89141ec000000000, 0x61cfe57900000000,
<     0x18a5986800000000, 0xf07e63d100000000, 0xea71624a00000000,
<     0x02aa99f300000000, 0x7bc0e4e200000000, 0x931b1f5b00000000,
<     0x0ed8970f00000000, 0xe6036cb600000000, 0x9f6911a700000000,
<     0x77b2ea1e00000000, 0x6dbdeb8500000000, 0x8566103c00000000,
<     0xfc0c6d2d00000000, 0x14d7969400000000, 0x58b5b90c00000000,
<     0xb06e42b500000000, 0xc9043fa400000000, 0x21dfc41d00000000,
<     0x3bd0c58600000000, 0xd30b3e3f00000000, 0xaa61432e00000000,
<     0x42bab89700000000, 0xdf7930c300000000, 0x37a2cb7a00000000,
<     0x4ec8b66b00000000, 0xa6134dd200000000, 0xbc1c4c4900000000,
<     0x54c7b7f000000000, 0x2dadcae100000000, 0xc576315800000000,
<     0x172adb4800000000, 0xfff120f100000000, 0x869b5de000000000,
<     0x6e40a65900000000, 0x744fa7c200000000, 0x9c945c7b00000000,
<     0xe5fe216a00000000, 0x0d25dad300000000, 0x90e6528700000000,
<     0x783da93e00000000, 0x0157d42f00000000, 0xe98c2f9600000000,
<     0xf3832e0d00000000, 0x1b58d5b400000000, 0x6232a8a500000000,
<     0x8ae9531c00000000},
<    {0x0000000000000000, 0x919168ae00000000, 0x6325a08700000000,
<     0xf2b4c82900000000, 0x874c31d400000000, 0x16dd597a00000000,
<     0xe469915300000000, 0x75f8f9fd00000000, 0x4f9f137300000000,
<     0xde0e7bdd00000000, 0x2cbab3f400000000, 0xbd2bdb5a00000000,
<     0xc8d322a700000000, 0x59424a0900000000, 0xabf6822000000000,
<     0x3a67ea8e00000000, 0x9e3e27e600000000, 0x0faf4f4800000000,
<     0xfd1b876100000000, 0x6c8aefcf00000000, 0x1972163200000000,
<     0x88e37e9c00000000, 0x7a57b6b500000000, 0xebc6de1b00000000,
<     0xd1a1349500000000, 0x40305c3b00000000, 0xb284941200000000,
<     0x2315fcbc00000000, 0x56ed054100000000, 0xc77c6def00000000,
<     0x35c8a5c600000000, 0xa459cd6800000000, 0x7d7b3f1700000000,
<     0xecea57b900000000, 0x1e5e9f9000000000, 0x8fcff73e00000000,
<     0xfa370ec300000000, 0x6ba6666d00000000, 0x9912ae4400000000,
<     0x0883c6ea00000000, 0x32e42c6400000000, 0xa37544ca00000000,
<     0x51c18ce300000000, 0xc050e44d00000000, 0xb5a81db000000000,
<     0x2439751e00000000, 0xd68dbd3700000000, 0x471cd59900000000,
<     0xe34518f100000000, 0x72d4705f00000000, 0x8060b87600000000,
<     0x11f1d0d800000000, 0x6409292500000000, 0xf598418b00000000,
<     0x072c89a200000000, 0x96bde10c00000000, 0xacda0b8200000000,
<     0x3d4b632c00000000, 0xcfffab0500000000, 0x5e6ec3ab00000000,
<     0x2b963a5600000000, 0xba0752f800000000, 0x48b39ad100000000,
<     0xd922f27f00000000, 0xfaf67e2e00000000, 0x6b67168000000000,
<     0x99d3dea900000000, 0x0842b60700000000, 0x7dba4ffa00000000,
<     0xec2b275400000000, 0x1e9fef7d00000000, 0x8f0e87d300000000,
<     0xb5696d5d00000000, 0x24f805f300000000, 0xd64ccdda00000000,
<     0x47dda57400000000, 0x32255c8900000000, 0xa3b4342700000000,
<     0x5100fc0e00000000, 0xc09194a000000000, 0x64c859c800000000,
<     0xf559316600000000, 0x07edf94f00000000, 0x967c91e100000000,
<     0xe384681c00000000, 0x721500b200000000, 0x80a1c89b00000000,
<     0x1130a03500000000, 0x2b574abb00000000, 0xbac6221500000000,
<     0x4872ea3c00000000, 0xd9e3829200000000, 0xac1b7b6f00000000,
<     0x3d8a13c100000000, 0xcf3edbe800000000, 0x5eafb34600000000,
<     0x878d413900000000, 0x161c299700000000, 0xe4a8e1be00000000,
<     0x7539891000000000, 0x00c170ed00000000, 0x9150184300000000,
<     0x63e4d06a00000000, 0xf275b8c400000000, 0xc812524a00000000,
<     0x59833ae400000000, 0xab37f2cd00000000, 0x3aa69a6300000000,
<     0x4f5e639e00000000, 0xdecf0b3000000000, 0x2c7bc31900000000,
<     0xbdeaabb700000000, 0x19b366df00000000, 0x88220e7100000000,
<     0x7a96c65800000000, 0xeb07aef600000000, 0x9eff570b00000000,
<     0x0f6e3fa500000000, 0xfddaf78c00000000, 0x6c4b9f2200000000,
<     0x562c75ac00000000, 0xc7bd1d0200000000, 0x3509d52b00000000,
<     0xa498bd8500000000, 0xd160447800000000, 0x40f12cd600000000,
<     0xb245e4ff00000000, 0x23d48c5100000000, 0xf4edfd5c00000000,
<     0x657c95f200000000, 0x97c85ddb00000000, 0x0659357500000000,
<     0x73a1cc8800000000, 0xe230a42600000000, 0x10846c0f00000000,
<     0x811504a100000000, 0xbb72ee2f00000000, 0x2ae3868100000000,
<     0xd8574ea800000000, 0x49c6260600000000, 0x3c3edffb00000000,
<     0xadafb75500000000, 0x5f1b7f7c00000000, 0xce8a17d200000000,
<     0x6ad3daba00000000, 0xfb42b21400000000, 0x09f67a3d00000000,
<     0x9867129300000000, 0xed9feb6e00000000, 0x7c0e83c000000000,
<     0x8eba4be900000000, 0x1f2b234700000000, 0x254cc9c900000000,
<     0xb4dda16700000000, 0x4669694e00000000, 0xd7f801e000000000,
<     0xa200f81d00000000, 0x339190b300000000, 0xc125589a00000000,
<     0x50b4303400000000, 0x8996c24b00000000, 0x1807aae500000000,
<     0xeab362cc00000000, 0x7b220a6200000000, 0x0edaf39f00000000,
<     0x9f4b9b3100000000, 0x6dff531800000000, 0xfc6e3bb600000000,
<     0xc609d13800000000, 0x5798b99600000000, 0xa52c71bf00000000,
<     0x34bd191100000000, 0x4145e0ec00000000, 0xd0d4884200000000,
<     0x2260406b00000000, 0xb3f128c500000000, 0x17a8e5ad00000000,
<     0x86398d0300000000, 0x748d452a00000000, 0xe51c2d8400000000,
<     0x90e4d47900000000, 0x0175bcd700000000, 0xf3c174fe00000000,
<     0x62501c5000000000, 0x5837f6de00000000, 0xc9a69e7000000000,
<     0x3b12565900000000, 0xaa833ef700000000, 0xdf7bc70a00000000,
<     0x4eeaafa400000000, 0xbc5e678d00000000, 0x2dcf0f2300000000,
<     0x0e1b837200000000, 0x9f8aebdc00000000, 0x6d3e23f500000000,
<     0xfcaf4b5b00000000, 0x8957b2a600000000, 0x18c6da0800000000,
<     0xea72122100000000, 0x7be37a8f00000000, 0x4184900100000000,
<     0xd015f8af00000000, 0x22a1308600000000, 0xb330582800000000,
<     0xc6c8a1d500000000, 0x5759c97b00000000, 0xa5ed015200000000,
<     0x347c69fc00000000, 0x9025a49400000000, 0x01b4cc3a00000000,
<     0xf300041300000000, 0x62916cbd00000000, 0x1769954000000000,
<     0x86f8fdee00000000, 0x744c35c700000000, 0xe5dd5d6900000000,
<     0xdfbab7e700000000, 0x4e2bdf4900000000, 0xbc9f176000000000,
<     0x2d0e7fce00000000, 0x58f6863300000000, 0xc967ee9d00000000,
<     0x3bd326b400000000, 0xaa424e1a00000000, 0x7360bc6500000000,
<     0xe2f1d4cb00000000, 0x10451ce200000000, 0x81d4744c00000000,
<     0xf42c8db100000000, 0x65bde51f00000000, 0x97092d3600000000,
<     0x0698459800000000, 0x3cffaf1600000000, 0xad6ec7b800000000,
<     0x5fda0f9100000000, 0xce4b673f00000000, 0xbbb39ec200000000,
<     0x2a22f66c00000000, 0xd8963e4500000000, 0x490756eb00000000,
<     0xed5e9b8300000000, 0x7ccff32d00000000, 0x8e7b3b0400000000,
<     0x1fea53aa00000000, 0x6a12aa5700000000, 0xfb83c2f900000000,
<     0x09370ad000000000, 0x98a6627e00000000, 0xa2c188f000000000,
<     0x3350e05e00000000, 0xc1e4287700000000, 0x507540d900000000,
<     0x258db92400000000, 0xb41cd18a00000000, 0x46a819a300000000,
<     0xd739710d00000000}};
< 
< #else /* W == 4 */
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0xccaa009e, 0x4225077d, 0x8e8f07e3, 0x844a0efa,
<     0x48e00e64, 0xc66f0987, 0x0ac50919, 0xd3e51bb5, 0x1f4f1b2b,
<     0x91c01cc8, 0x5d6a1c56, 0x57af154f, 0x9b0515d1, 0x158a1232,
<     0xd92012ac, 0x7cbb312b, 0xb01131b5, 0x3e9e3656, 0xf23436c8,
<     0xf8f13fd1, 0x345b3f4f, 0xbad438ac, 0x767e3832, 0xaf5e2a9e,
<     0x63f42a00, 0xed7b2de3, 0x21d12d7d, 0x2b142464, 0xe7be24fa,
<     0x69312319, 0xa59b2387, 0xf9766256, 0x35dc62c8, 0xbb53652b,
<     0x77f965b5, 0x7d3c6cac, 0xb1966c32, 0x3f196bd1, 0xf3b36b4f,
<     0x2a9379e3, 0xe639797d, 0x68b67e9e, 0xa41c7e00, 0xaed97719,
<     0x62737787, 0xecfc7064, 0x205670fa, 0x85cd537d, 0x496753e3,
<     0xc7e85400, 0x0b42549e, 0x01875d87, 0xcd2d5d19, 0x43a25afa,
<     0x8f085a64, 0x562848c8, 0x9a824856, 0x140d4fb5, 0xd8a74f2b,
<     0xd2624632, 0x1ec846ac, 0x9047414f, 0x5ced41d1, 0x299dc2ed,
<     0xe537c273, 0x6bb8c590, 0xa712c50e, 0xadd7cc17, 0x617dcc89,
<     0xeff2cb6a, 0x2358cbf4, 0xfa78d958, 0x36d2d9c6, 0xb85dde25,
<     0x74f7debb, 0x7e32d7a2, 0xb298d73c, 0x3c17d0df, 0xf0bdd041,
<     0x5526f3c6, 0x998cf358, 0x1703f4bb, 0xdba9f425, 0xd16cfd3c,
<     0x1dc6fda2, 0x9349fa41, 0x5fe3fadf, 0x86c3e873, 0x4a69e8ed,
<     0xc4e6ef0e, 0x084cef90, 0x0289e689, 0xce23e617, 0x40ace1f4,
<     0x8c06e16a, 0xd0eba0bb, 0x1c41a025, 0x92cea7c6, 0x5e64a758,
<     0x54a1ae41, 0x980baedf, 0x1684a93c, 0xda2ea9a2, 0x030ebb0e,
<     0xcfa4bb90, 0x412bbc73, 0x8d81bced, 0x8744b5f4, 0x4beeb56a,
<     0xc561b289, 0x09cbb217, 0xac509190, 0x60fa910e, 0xee7596ed,
<     0x22df9673, 0x281a9f6a, 0xe4b09ff4, 0x6a3f9817, 0xa6959889,
<     0x7fb58a25, 0xb31f8abb, 0x3d908d58, 0xf13a8dc6, 0xfbff84df,
<     0x37558441, 0xb9da83a2, 0x7570833c, 0x533b85da, 0x9f918544,
<     0x111e82a7, 0xddb48239, 0xd7718b20, 0x1bdb8bbe, 0x95548c5d,
<     0x59fe8cc3, 0x80de9e6f, 0x4c749ef1, 0xc2fb9912, 0x0e51998c,
<     0x04949095, 0xc83e900b, 0x46b197e8, 0x8a1b9776, 0x2f80b4f1,
<     0xe32ab46f, 0x6da5b38c, 0xa10fb312, 0xabcaba0b, 0x6760ba95,
<     0xe9efbd76, 0x2545bde8, 0xfc65af44, 0x30cfafda, 0xbe40a839,
<     0x72eaa8a7, 0x782fa1be, 0xb485a120, 0x3a0aa6c3, 0xf6a0a65d,
<     0xaa4de78c, 0x66e7e712, 0xe868e0f1, 0x24c2e06f, 0x2e07e976,
<     0xe2ade9e8, 0x6c22ee0b, 0xa088ee95, 0x79a8fc39, 0xb502fca7,
<     0x3b8dfb44, 0xf727fbda, 0xfde2f2c3, 0x3148f25d, 0xbfc7f5be,
<     0x736df520, 0xd6f6d6a7, 0x1a5cd639, 0x94d3d1da, 0x5879d144,
<     0x52bcd85d, 0x9e16d8c3, 0x1099df20, 0xdc33dfbe, 0x0513cd12,
<     0xc9b9cd8c, 0x4736ca6f, 0x8b9ccaf1, 0x8159c3e8, 0x4df3c376,
<     0xc37cc495, 0x0fd6c40b, 0x7aa64737, 0xb60c47a9, 0x3883404a,
<     0xf42940d4, 0xfeec49cd, 0x32464953, 0xbcc94eb0, 0x70634e2e,
<     0xa9435c82, 0x65e95c1c, 0xeb665bff, 0x27cc5b61, 0x2d095278,
<     0xe1a352e6, 0x6f2c5505, 0xa386559b, 0x061d761c, 0xcab77682,
<     0x44387161, 0x889271ff, 0x825778e6, 0x4efd7878, 0xc0727f9b,
<     0x0cd87f05, 0xd5f86da9, 0x19526d37, 0x97dd6ad4, 0x5b776a4a,
<     0x51b26353, 0x9d1863cd, 0x1397642e, 0xdf3d64b0, 0x83d02561,
<     0x4f7a25ff, 0xc1f5221c, 0x0d5f2282, 0x079a2b9b, 0xcb302b05,
<     0x45bf2ce6, 0x89152c78, 0x50353ed4, 0x9c9f3e4a, 0x121039a9,
<     0xdeba3937, 0xd47f302e, 0x18d530b0, 0x965a3753, 0x5af037cd,
<     0xff6b144a, 0x33c114d4, 0xbd4e1337, 0x71e413a9, 0x7b211ab0,
<     0xb78b1a2e, 0x39041dcd, 0xf5ae1d53, 0x2c8e0fff, 0xe0240f61,
<     0x6eab0882, 0xa201081c, 0xa8c40105, 0x646e019b, 0xeae10678,
<     0x264b06e6},
<    {0x00000000, 0xa6770bb4, 0x979f1129, 0x31e81a9d, 0xf44f2413,
<     0x52382fa7, 0x63d0353a, 0xc5a73e8e, 0x33ef4e67, 0x959845d3,
<     0xa4705f4e, 0x020754fa, 0xc7a06a74, 0x61d761c0, 0x503f7b5d,
<     0xf64870e9, 0x67de9cce, 0xc1a9977a, 0xf0418de7, 0x56368653,
<     0x9391b8dd, 0x35e6b369, 0x040ea9f4, 0xa279a240, 0x5431d2a9,
<     0xf246d91d, 0xc3aec380, 0x65d9c834, 0xa07ef6ba, 0x0609fd0e,
<     0x37e1e793, 0x9196ec27, 0xcfbd399c, 0x69ca3228, 0x582228b5,
<     0xfe552301, 0x3bf21d8f, 0x9d85163b, 0xac6d0ca6, 0x0a1a0712,
<     0xfc5277fb, 0x5a257c4f, 0x6bcd66d2, 0xcdba6d66, 0x081d53e8,
<     0xae6a585c, 0x9f8242c1, 0x39f54975, 0xa863a552, 0x0e14aee6,
<     0x3ffcb47b, 0x998bbfcf, 0x5c2c8141, 0xfa5b8af5, 0xcbb39068,
<     0x6dc49bdc, 0x9b8ceb35, 0x3dfbe081, 0x0c13fa1c, 0xaa64f1a8,
<     0x6fc3cf26, 0xc9b4c492, 0xf85cde0f, 0x5e2bd5bb, 0x440b7579,
<     0xe27c7ecd, 0xd3946450, 0x75e36fe4, 0xb044516a, 0x16335ade,
<     0x27db4043, 0x81ac4bf7, 0x77e43b1e, 0xd19330aa, 0xe07b2a37,
<     0x460c2183, 0x83ab1f0d, 0x25dc14b9, 0x14340e24, 0xb2430590,
<     0x23d5e9b7, 0x85a2e203, 0xb44af89e, 0x123df32a, 0xd79acda4,
<     0x71edc610, 0x4005dc8d, 0xe672d739, 0x103aa7d0, 0xb64dac64,
<     0x87a5b6f9, 0x21d2bd4d, 0xe47583c3, 0x42028877, 0x73ea92ea,
<     0xd59d995e, 0x8bb64ce5, 0x2dc14751, 0x1c295dcc, 0xba5e5678,
<     0x7ff968f6, 0xd98e6342, 0xe86679df, 0x4e11726b, 0xb8590282,
<     0x1e2e0936, 0x2fc613ab, 0x89b1181f, 0x4c162691, 0xea612d25,
<     0xdb8937b8, 0x7dfe3c0c, 0xec68d02b, 0x4a1fdb9f, 0x7bf7c102,
<     0xdd80cab6, 0x1827f438, 0xbe50ff8c, 0x8fb8e511, 0x29cfeea5,
<     0xdf879e4c, 0x79f095f8, 0x48188f65, 0xee6f84d1, 0x2bc8ba5f,
<     0x8dbfb1eb, 0xbc57ab76, 0x1a20a0c2, 0x8816eaf2, 0x2e61e146,
<     0x1f89fbdb, 0xb9fef06f, 0x7c59cee1, 0xda2ec555, 0xebc6dfc8,
<     0x4db1d47c, 0xbbf9a495, 0x1d8eaf21, 0x2c66b5bc, 0x8a11be08,
<     0x4fb68086, 0xe9c18b32, 0xd82991af, 0x7e5e9a1b, 0xefc8763c,
<     0x49bf7d88, 0x78576715, 0xde206ca1, 0x1b87522f, 0xbdf0599b,
<     0x8c184306, 0x2a6f48b2, 0xdc27385b, 0x7a5033ef, 0x4bb82972,
<     0xedcf22c6, 0x28681c48, 0x8e1f17fc, 0xbff70d61, 0x198006d5,
<     0x47abd36e, 0xe1dcd8da, 0xd034c247, 0x7643c9f3, 0xb3e4f77d,
<     0x1593fcc9, 0x247be654, 0x820cede0, 0x74449d09, 0xd23396bd,
<     0xe3db8c20, 0x45ac8794, 0x800bb91a, 0x267cb2ae, 0x1794a833,
<     0xb1e3a387, 0x20754fa0, 0x86024414, 0xb7ea5e89, 0x119d553d,
<     0xd43a6bb3, 0x724d6007, 0x43a57a9a, 0xe5d2712e, 0x139a01c7,
<     0xb5ed0a73, 0x840510ee, 0x22721b5a, 0xe7d525d4, 0x41a22e60,
<     0x704a34fd, 0xd63d3f49, 0xcc1d9f8b, 0x6a6a943f, 0x5b828ea2,
<     0xfdf58516, 0x3852bb98, 0x9e25b02c, 0xafcdaab1, 0x09baa105,
<     0xfff2d1ec, 0x5985da58, 0x686dc0c5, 0xce1acb71, 0x0bbdf5ff,
<     0xadcafe4b, 0x9c22e4d6, 0x3a55ef62, 0xabc30345, 0x0db408f1,
<     0x3c5c126c, 0x9a2b19d8, 0x5f8c2756, 0xf9fb2ce2, 0xc813367f,
<     0x6e643dcb, 0x982c4d22, 0x3e5b4696, 0x0fb35c0b, 0xa9c457bf,
<     0x6c636931, 0xca146285, 0xfbfc7818, 0x5d8b73ac, 0x03a0a617,
<     0xa5d7ada3, 0x943fb73e, 0x3248bc8a, 0xf7ef8204, 0x519889b0,
<     0x6070932d, 0xc6079899, 0x304fe870, 0x9638e3c4, 0xa7d0f959,
<     0x01a7f2ed, 0xc400cc63, 0x6277c7d7, 0x539fdd4a, 0xf5e8d6fe,
<     0x647e3ad9, 0xc209316d, 0xf3e12bf0, 0x55962044, 0x90311eca,
<     0x3646157e, 0x07ae0fe3, 0xa1d90457, 0x579174be, 0xf1e67f0a,
<     0xc00e6597, 0x66796e23, 0xa3de50ad, 0x05a95b19, 0x34414184,
<     0x92364a30},
<    {0x00000000, 0xcb5cd3a5, 0x4dc8a10b, 0x869472ae, 0x9b914216,
<     0x50cd91b3, 0xd659e31d, 0x1d0530b8, 0xec53826d, 0x270f51c8,
<     0xa19b2366, 0x6ac7f0c3, 0x77c2c07b, 0xbc9e13de, 0x3a0a6170,
<     0xf156b2d5, 0x03d6029b, 0xc88ad13e, 0x4e1ea390, 0x85427035,
<     0x9847408d, 0x531b9328, 0xd58fe186, 0x1ed33223, 0xef8580f6,
<     0x24d95353, 0xa24d21fd, 0x6911f258, 0x7414c2e0, 0xbf481145,
<     0x39dc63eb, 0xf280b04e, 0x07ac0536, 0xccf0d693, 0x4a64a43d,
<     0x81387798, 0x9c3d4720, 0x57619485, 0xd1f5e62b, 0x1aa9358e,
<     0xebff875b, 0x20a354fe, 0xa6372650, 0x6d6bf5f5, 0x706ec54d,
<     0xbb3216e8, 0x3da66446, 0xf6fab7e3, 0x047a07ad, 0xcf26d408,
<     0x49b2a6a6, 0x82ee7503, 0x9feb45bb, 0x54b7961e, 0xd223e4b0,
<     0x197f3715, 0xe82985c0, 0x23755665, 0xa5e124cb, 0x6ebdf76e,
<     0x73b8c7d6, 0xb8e41473, 0x3e7066dd, 0xf52cb578, 0x0f580a6c,
<     0xc404d9c9, 0x4290ab67, 0x89cc78c2, 0x94c9487a, 0x5f959bdf,
<     0xd901e971, 0x125d3ad4, 0xe30b8801, 0x28575ba4, 0xaec3290a,
<     0x659ffaaf, 0x789aca17, 0xb3c619b2, 0x35526b1c, 0xfe0eb8b9,
<     0x0c8e08f7, 0xc7d2db52, 0x4146a9fc, 0x8a1a7a59, 0x971f4ae1,
<     0x5c439944, 0xdad7ebea, 0x118b384f, 0xe0dd8a9a, 0x2b81593f,
<     0xad152b91, 0x6649f834, 0x7b4cc88c, 0xb0101b29, 0x36846987,
<     0xfdd8ba22, 0x08f40f5a, 0xc3a8dcff, 0x453cae51, 0x8e607df4,
<     0x93654d4c, 0x58399ee9, 0xdeadec47, 0x15f13fe2, 0xe4a78d37,
<     0x2ffb5e92, 0xa96f2c3c, 0x6233ff99, 0x7f36cf21, 0xb46a1c84,
<     0x32fe6e2a, 0xf9a2bd8f, 0x0b220dc1, 0xc07ede64, 0x46eaacca,
<     0x8db67f6f, 0x90b34fd7, 0x5bef9c72, 0xdd7beedc, 0x16273d79,
<     0xe7718fac, 0x2c2d5c09, 0xaab92ea7, 0x61e5fd02, 0x7ce0cdba,
<     0xb7bc1e1f, 0x31286cb1, 0xfa74bf14, 0x1eb014d8, 0xd5ecc77d,
<     0x5378b5d3, 0x98246676, 0x852156ce, 0x4e7d856b, 0xc8e9f7c5,
<     0x03b52460, 0xf2e396b5, 0x39bf4510, 0xbf2b37be, 0x7477e41b,
<     0x6972d4a3, 0xa22e0706, 0x24ba75a8, 0xefe6a60d, 0x1d661643,
<     0xd63ac5e6, 0x50aeb748, 0x9bf264ed, 0x86f75455, 0x4dab87f0,
<     0xcb3ff55e, 0x006326fb, 0xf135942e, 0x3a69478b, 0xbcfd3525,
<     0x77a1e680, 0x6aa4d638, 0xa1f8059d, 0x276c7733, 0xec30a496,
<     0x191c11ee, 0xd240c24b, 0x54d4b0e5, 0x9f886340, 0x828d53f8,
<     0x49d1805d, 0xcf45f2f3, 0x04192156, 0xf54f9383, 0x3e134026,
<     0xb8873288, 0x73dbe12d, 0x6eded195, 0xa5820230, 0x2316709e,
<     0xe84aa33b, 0x1aca1375, 0xd196c0d0, 0x5702b27e, 0x9c5e61db,
<     0x815b5163, 0x4a0782c6, 0xcc93f068, 0x07cf23cd, 0xf6999118,
<     0x3dc542bd, 0xbb513013, 0x700de3b6, 0x6d08d30e, 0xa65400ab,
<     0x20c07205, 0xeb9ca1a0, 0x11e81eb4, 0xdab4cd11, 0x5c20bfbf,
<     0x977c6c1a, 0x8a795ca2, 0x41258f07, 0xc7b1fda9, 0x0ced2e0c,
<     0xfdbb9cd9, 0x36e74f7c, 0xb0733dd2, 0x7b2fee77, 0x662adecf,
<     0xad760d6a, 0x2be27fc4, 0xe0beac61, 0x123e1c2f, 0xd962cf8a,
<     0x5ff6bd24, 0x94aa6e81, 0x89af5e39, 0x42f38d9c, 0xc467ff32,
<     0x0f3b2c97, 0xfe6d9e42, 0x35314de7, 0xb3a53f49, 0x78f9ecec,
<     0x65fcdc54, 0xaea00ff1, 0x28347d5f, 0xe368aefa, 0x16441b82,
<     0xdd18c827, 0x5b8cba89, 0x90d0692c, 0x8dd55994, 0x46898a31,
<     0xc01df89f, 0x0b412b3a, 0xfa1799ef, 0x314b4a4a, 0xb7df38e4,
<     0x7c83eb41, 0x6186dbf9, 0xaada085c, 0x2c4e7af2, 0xe712a957,
<     0x15921919, 0xdececabc, 0x585ab812, 0x93066bb7, 0x8e035b0f,
<     0x455f88aa, 0xc3cbfa04, 0x089729a1, 0xf9c19b74, 0x329d48d1,
<     0xb4093a7f, 0x7f55e9da, 0x6250d962, 0xa90c0ac7, 0x2f987869,
<     0xe4c4abcc},
<    {0x00000000, 0x3d6029b0, 0x7ac05360, 0x47a07ad0, 0xf580a6c0,
<     0xc8e08f70, 0x8f40f5a0, 0xb220dc10, 0x30704bc1, 0x0d106271,
<     0x4ab018a1, 0x77d03111, 0xc5f0ed01, 0xf890c4b1, 0xbf30be61,
<     0x825097d1, 0x60e09782, 0x5d80be32, 0x1a20c4e2, 0x2740ed52,
<     0x95603142, 0xa80018f2, 0xefa06222, 0xd2c04b92, 0x5090dc43,
<     0x6df0f5f3, 0x2a508f23, 0x1730a693, 0xa5107a83, 0x98705333,
<     0xdfd029e3, 0xe2b00053, 0xc1c12f04, 0xfca106b4, 0xbb017c64,
<     0x866155d4, 0x344189c4, 0x0921a074, 0x4e81daa4, 0x73e1f314,
<     0xf1b164c5, 0xccd14d75, 0x8b7137a5, 0xb6111e15, 0x0431c205,
<     0x3951ebb5, 0x7ef19165, 0x4391b8d5, 0xa121b886, 0x9c419136,
<     0xdbe1ebe6, 0xe681c256, 0x54a11e46, 0x69c137f6, 0x2e614d26,
<     0x13016496, 0x9151f347, 0xac31daf7, 0xeb91a027, 0xd6f18997,
<     0x64d15587, 0x59b17c37, 0x1e1106e7, 0x23712f57, 0x58f35849,
<     0x659371f9, 0x22330b29, 0x1f532299, 0xad73fe89, 0x9013d739,
<     0xd7b3ade9, 0xead38459, 0x68831388, 0x55e33a38, 0x124340e8,
<     0x2f236958, 0x9d03b548, 0xa0639cf8, 0xe7c3e628, 0xdaa3cf98,
<     0x3813cfcb, 0x0573e67b, 0x42d39cab, 0x7fb3b51b, 0xcd93690b,
<     0xf0f340bb, 0xb7533a6b, 0x8a3313db, 0x0863840a, 0x3503adba,
<     0x72a3d76a, 0x4fc3feda, 0xfde322ca, 0xc0830b7a, 0x872371aa,
<     0xba43581a, 0x9932774d, 0xa4525efd, 0xe3f2242d, 0xde920d9d,
<     0x6cb2d18d, 0x51d2f83d, 0x167282ed, 0x2b12ab5d, 0xa9423c8c,
<     0x9422153c, 0xd3826fec, 0xeee2465c, 0x5cc29a4c, 0x61a2b3fc,
<     0x2602c92c, 0x1b62e09c, 0xf9d2e0cf, 0xc4b2c97f, 0x8312b3af,
<     0xbe729a1f, 0x0c52460f, 0x31326fbf, 0x7692156f, 0x4bf23cdf,
<     0xc9a2ab0e, 0xf4c282be, 0xb362f86e, 0x8e02d1de, 0x3c220dce,
<     0x0142247e, 0x46e25eae, 0x7b82771e, 0xb1e6b092, 0x8c869922,
<     0xcb26e3f2, 0xf646ca42, 0x44661652, 0x79063fe2, 0x3ea64532,
<     0x03c66c82, 0x8196fb53, 0xbcf6d2e3, 0xfb56a833, 0xc6368183,
<     0x74165d93, 0x49767423, 0x0ed60ef3, 0x33b62743, 0xd1062710,
<     0xec660ea0, 0xabc67470, 0x96a65dc0, 0x248681d0, 0x19e6a860,
<     0x5e46d2b0, 0x6326fb00, 0xe1766cd1, 0xdc164561, 0x9bb63fb1,
<     0xa6d61601, 0x14f6ca11, 0x2996e3a1, 0x6e369971, 0x5356b0c1,
<     0x70279f96, 0x4d47b626, 0x0ae7ccf6, 0x3787e546, 0x85a73956,
<     0xb8c710e6, 0xff676a36, 0xc2074386, 0x4057d457, 0x7d37fde7,
<     0x3a978737, 0x07f7ae87, 0xb5d77297, 0x88b75b27, 0xcf1721f7,
<     0xf2770847, 0x10c70814, 0x2da721a4, 0x6a075b74, 0x576772c4,
<     0xe547aed4, 0xd8278764, 0x9f87fdb4, 0xa2e7d404, 0x20b743d5,
<     0x1dd76a65, 0x5a7710b5, 0x67173905, 0xd537e515, 0xe857cca5,
<     0xaff7b675, 0x92979fc5, 0xe915e8db, 0xd475c16b, 0x93d5bbbb,
<     0xaeb5920b, 0x1c954e1b, 0x21f567ab, 0x66551d7b, 0x5b3534cb,
<     0xd965a31a, 0xe4058aaa, 0xa3a5f07a, 0x9ec5d9ca, 0x2ce505da,
<     0x11852c6a, 0x562556ba, 0x6b457f0a, 0x89f57f59, 0xb49556e9,
<     0xf3352c39, 0xce550589, 0x7c75d999, 0x4115f029, 0x06b58af9,
<     0x3bd5a349, 0xb9853498, 0x84e51d28, 0xc34567f8, 0xfe254e48,
<     0x4c059258, 0x7165bbe8, 0x36c5c138, 0x0ba5e888, 0x28d4c7df,
<     0x15b4ee6f, 0x521494bf, 0x6f74bd0f, 0xdd54611f, 0xe03448af,
<     0xa794327f, 0x9af41bcf, 0x18a48c1e, 0x25c4a5ae, 0x6264df7e,
<     0x5f04f6ce, 0xed242ade, 0xd044036e, 0x97e479be, 0xaa84500e,
<     0x4834505d, 0x755479ed, 0x32f4033d, 0x0f942a8d, 0xbdb4f69d,
<     0x80d4df2d, 0xc774a5fd, 0xfa148c4d, 0x78441b9c, 0x4524322c,
<     0x028448fc, 0x3fe4614c, 0x8dc4bd5c, 0xb0a494ec, 0xf704ee3c,
<     0xca64c78c}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x00000000, 0xb029603d, 0x6053c07a, 0xd07aa047, 0xc0a680f5,
<     0x708fe0c8, 0xa0f5408f, 0x10dc20b2, 0xc14b7030, 0x7162100d,
<     0xa118b04a, 0x1131d077, 0x01edf0c5, 0xb1c490f8, 0x61be30bf,
<     0xd1975082, 0x8297e060, 0x32be805d, 0xe2c4201a, 0x52ed4027,
<     0x42316095, 0xf21800a8, 0x2262a0ef, 0x924bc0d2, 0x43dc9050,
<     0xf3f5f06d, 0x238f502a, 0x93a63017, 0x837a10a5, 0x33537098,
<     0xe329d0df, 0x5300b0e2, 0x042fc1c1, 0xb406a1fc, 0x647c01bb,
<     0xd4556186, 0xc4894134, 0x74a02109, 0xa4da814e, 0x14f3e173,
<     0xc564b1f1, 0x754dd1cc, 0xa537718b, 0x151e11b6, 0x05c23104,
<     0xb5eb5139, 0x6591f17e, 0xd5b89143, 0x86b821a1, 0x3691419c,
<     0xe6ebe1db, 0x56c281e6, 0x461ea154, 0xf637c169, 0x264d612e,
<     0x96640113, 0x47f35191, 0xf7da31ac, 0x27a091eb, 0x9789f1d6,
<     0x8755d164, 0x377cb159, 0xe706111e, 0x572f7123, 0x4958f358,
<     0xf9719365, 0x290b3322, 0x9922531f, 0x89fe73ad, 0x39d71390,
<     0xe9adb3d7, 0x5984d3ea, 0x88138368, 0x383ae355, 0xe8404312,
<     0x5869232f, 0x48b5039d, 0xf89c63a0, 0x28e6c3e7, 0x98cfa3da,
<     0xcbcf1338, 0x7be67305, 0xab9cd342, 0x1bb5b37f, 0x0b6993cd,
<     0xbb40f3f0, 0x6b3a53b7, 0xdb13338a, 0x0a846308, 0xbaad0335,
<     0x6ad7a372, 0xdafec34f, 0xca22e3fd, 0x7a0b83c0, 0xaa712387,
<     0x1a5843ba, 0x4d773299, 0xfd5e52a4, 0x2d24f2e3, 0x9d0d92de,
<     0x8dd1b26c, 0x3df8d251, 0xed827216, 0x5dab122b, 0x8c3c42a9,
<     0x3c152294, 0xec6f82d3, 0x5c46e2ee, 0x4c9ac25c, 0xfcb3a261,
<     0x2cc90226, 0x9ce0621b, 0xcfe0d2f9, 0x7fc9b2c4, 0xafb31283,
<     0x1f9a72be, 0x0f46520c, 0xbf6f3231, 0x6f159276, 0xdf3cf24b,
<     0x0eaba2c9, 0xbe82c2f4, 0x6ef862b3, 0xded1028e, 0xce0d223c,
<     0x7e244201, 0xae5ee246, 0x1e77827b, 0x92b0e6b1, 0x2299868c,
<     0xf2e326cb, 0x42ca46f6, 0x52166644, 0xe23f0679, 0x3245a63e,
<     0x826cc603, 0x53fb9681, 0xe3d2f6bc, 0x33a856fb, 0x838136c6,
<     0x935d1674, 0x23747649, 0xf30ed60e, 0x4327b633, 0x102706d1,
<     0xa00e66ec, 0x7074c6ab, 0xc05da696, 0xd0818624, 0x60a8e619,
<     0xb0d2465e, 0x00fb2663, 0xd16c76e1, 0x614516dc, 0xb13fb69b,
<     0x0116d6a6, 0x11caf614, 0xa1e39629, 0x7199366e, 0xc1b05653,
<     0x969f2770, 0x26b6474d, 0xf6cce70a, 0x46e58737, 0x5639a785,
<     0xe610c7b8, 0x366a67ff, 0x864307c2, 0x57d45740, 0xe7fd377d,
<     0x3787973a, 0x87aef707, 0x9772d7b5, 0x275bb788, 0xf72117cf,
<     0x470877f2, 0x1408c710, 0xa421a72d, 0x745b076a, 0xc4726757,
<     0xd4ae47e5, 0x648727d8, 0xb4fd879f, 0x04d4e7a2, 0xd543b720,
<     0x656ad71d, 0xb510775a, 0x05391767, 0x15e537d5, 0xa5cc57e8,
<     0x75b6f7af, 0xc59f9792, 0xdbe815e9, 0x6bc175d4, 0xbbbbd593,
<     0x0b92b5ae, 0x1b4e951c, 0xab67f521, 0x7b1d5566, 0xcb34355b,
<     0x1aa365d9, 0xaa8a05e4, 0x7af0a5a3, 0xcad9c59e, 0xda05e52c,
<     0x6a2c8511, 0xba562556, 0x0a7f456b, 0x597ff589, 0xe95695b4,
<     0x392c35f3, 0x890555ce, 0x99d9757c, 0x29f01541, 0xf98ab506,
<     0x49a3d53b, 0x983485b9, 0x281de584, 0xf86745c3, 0x484e25fe,
<     0x5892054c, 0xe8bb6571, 0x38c1c536, 0x88e8a50b, 0xdfc7d428,
<     0x6feeb415, 0xbf941452, 0x0fbd746f, 0x1f6154dd, 0xaf4834e0,
<     0x7f3294a7, 0xcf1bf49a, 0x1e8ca418, 0xaea5c425, 0x7edf6462,
<     0xcef6045f, 0xde2a24ed, 0x6e0344d0, 0xbe79e497, 0x0e5084aa,
<     0x5d503448, 0xed795475, 0x3d03f432, 0x8d2a940f, 0x9df6b4bd,
<     0x2ddfd480, 0xfda574c7, 0x4d8c14fa, 0x9c1b4478, 0x2c322445,
<     0xfc488402, 0x4c61e43f, 0x5cbdc48d, 0xec94a4b0, 0x3cee04f7,
<     0x8cc764ca},
<    {0x00000000, 0xa5d35ccb, 0x0ba1c84d, 0xae729486, 0x1642919b,
<     0xb391cd50, 0x1de359d6, 0xb830051d, 0x6d8253ec, 0xc8510f27,
<     0x66239ba1, 0xc3f0c76a, 0x7bc0c277, 0xde139ebc, 0x70610a3a,
<     0xd5b256f1, 0x9b02d603, 0x3ed18ac8, 0x90a31e4e, 0x35704285,
<     0x8d404798, 0x28931b53, 0x86e18fd5, 0x2332d31e, 0xf68085ef,
<     0x5353d924, 0xfd214da2, 0x58f21169, 0xe0c21474, 0x451148bf,
<     0xeb63dc39, 0x4eb080f2, 0x3605ac07, 0x93d6f0cc, 0x3da4644a,
<     0x98773881, 0x20473d9c, 0x85946157, 0x2be6f5d1, 0x8e35a91a,
<     0x5b87ffeb, 0xfe54a320, 0x502637a6, 0xf5f56b6d, 0x4dc56e70,
<     0xe81632bb, 0x4664a63d, 0xe3b7faf6, 0xad077a04, 0x08d426cf,
<     0xa6a6b249, 0x0375ee82, 0xbb45eb9f, 0x1e96b754, 0xb0e423d2,
<     0x15377f19, 0xc08529e8, 0x65567523, 0xcb24e1a5, 0x6ef7bd6e,
<     0xd6c7b873, 0x7314e4b8, 0xdd66703e, 0x78b52cf5, 0x6c0a580f,
<     0xc9d904c4, 0x67ab9042, 0xc278cc89, 0x7a48c994, 0xdf9b955f,
<     0x71e901d9, 0xd43a5d12, 0x01880be3, 0xa45b5728, 0x0a29c3ae,
<     0xaffa9f65, 0x17ca9a78, 0xb219c6b3, 0x1c6b5235, 0xb9b80efe,
<     0xf7088e0c, 0x52dbd2c7, 0xfca94641, 0x597a1a8a, 0xe14a1f97,
<     0x4499435c, 0xeaebd7da, 0x4f388b11, 0x9a8adde0, 0x3f59812b,
<     0x912b15ad, 0x34f84966, 0x8cc84c7b, 0x291b10b0, 0x87698436,
<     0x22bad8fd, 0x5a0ff408, 0xffdca8c3, 0x51ae3c45, 0xf47d608e,
<     0x4c4d6593, 0xe99e3958, 0x47ecadde, 0xe23ff115, 0x378da7e4,
<     0x925efb2f, 0x3c2c6fa9, 0x99ff3362, 0x21cf367f, 0x841c6ab4,
<     0x2a6efe32, 0x8fbda2f9, 0xc10d220b, 0x64de7ec0, 0xcaacea46,
<     0x6f7fb68d, 0xd74fb390, 0x729cef5b, 0xdcee7bdd, 0x793d2716,
<     0xac8f71e7, 0x095c2d2c, 0xa72eb9aa, 0x02fde561, 0xbacde07c,
<     0x1f1ebcb7, 0xb16c2831, 0x14bf74fa, 0xd814b01e, 0x7dc7ecd5,
<     0xd3b57853, 0x76662498, 0xce562185, 0x6b857d4e, 0xc5f7e9c8,
<     0x6024b503, 0xb596e3f2, 0x1045bf39, 0xbe372bbf, 0x1be47774,
<     0xa3d47269, 0x06072ea2, 0xa875ba24, 0x0da6e6ef, 0x4316661d,
<     0xe6c53ad6, 0x48b7ae50, 0xed64f29b, 0x5554f786, 0xf087ab4d,
<     0x5ef53fcb, 0xfb266300, 0x2e9435f1, 0x8b47693a, 0x2535fdbc,
<     0x80e6a177, 0x38d6a46a, 0x9d05f8a1, 0x33776c27, 0x96a430ec,
<     0xee111c19, 0x4bc240d2, 0xe5b0d454, 0x4063889f, 0xf8538d82,
<     0x5d80d149, 0xf3f245cf, 0x56211904, 0x83934ff5, 0x2640133e,
<     0x883287b8, 0x2de1db73, 0x95d1de6e, 0x300282a5, 0x9e701623,
<     0x3ba34ae8, 0x7513ca1a, 0xd0c096d1, 0x7eb20257, 0xdb615e9c,
<     0x63515b81, 0xc682074a, 0x68f093cc, 0xcd23cf07, 0x189199f6,
<     0xbd42c53d, 0x133051bb, 0xb6e30d70, 0x0ed3086d, 0xab0054a6,
<     0x0572c020, 0xa0a19ceb, 0xb41ee811, 0x11cdb4da, 0xbfbf205c,
<     0x1a6c7c97, 0xa25c798a, 0x078f2541, 0xa9fdb1c7, 0x0c2eed0c,
<     0xd99cbbfd, 0x7c4fe736, 0xd23d73b0, 0x77ee2f7b, 0xcfde2a66,
<     0x6a0d76ad, 0xc47fe22b, 0x61acbee0, 0x2f1c3e12, 0x8acf62d9,
<     0x24bdf65f, 0x816eaa94, 0x395eaf89, 0x9c8df342, 0x32ff67c4,
<     0x972c3b0f, 0x429e6dfe, 0xe74d3135, 0x493fa5b3, 0xececf978,
<     0x54dcfc65, 0xf10fa0ae, 0x5f7d3428, 0xfaae68e3, 0x821b4416,
<     0x27c818dd, 0x89ba8c5b, 0x2c69d090, 0x9459d58d, 0x318a8946,
<     0x9ff81dc0, 0x3a2b410b, 0xef9917fa, 0x4a4a4b31, 0xe438dfb7,
<     0x41eb837c, 0xf9db8661, 0x5c08daaa, 0xf27a4e2c, 0x57a912e7,
<     0x19199215, 0xbccacede, 0x12b85a58, 0xb76b0693, 0x0f5b038e,
<     0xaa885f45, 0x04facbc3, 0xa1299708, 0x749bc1f9, 0xd1489d32,
<     0x7f3a09b4, 0xdae9557f, 0x62d95062, 0xc70a0ca9, 0x6978982f,
<     0xccabc4e4},
<    {0x00000000, 0xb40b77a6, 0x29119f97, 0x9d1ae831, 0x13244ff4,
<     0xa72f3852, 0x3a35d063, 0x8e3ea7c5, 0x674eef33, 0xd3459895,
<     0x4e5f70a4, 0xfa540702, 0x746aa0c7, 0xc061d761, 0x5d7b3f50,
<     0xe97048f6, 0xce9cde67, 0x7a97a9c1, 0xe78d41f0, 0x53863656,
<     0xddb89193, 0x69b3e635, 0xf4a90e04, 0x40a279a2, 0xa9d23154,
<     0x1dd946f2, 0x80c3aec3, 0x34c8d965, 0xbaf67ea0, 0x0efd0906,
<     0x93e7e137, 0x27ec9691, 0x9c39bdcf, 0x2832ca69, 0xb5282258,
<     0x012355fe, 0x8f1df23b, 0x3b16859d, 0xa60c6dac, 0x12071a0a,
<     0xfb7752fc, 0x4f7c255a, 0xd266cd6b, 0x666dbacd, 0xe8531d08,
<     0x5c586aae, 0xc142829f, 0x7549f539, 0x52a563a8, 0xe6ae140e,
<     0x7bb4fc3f, 0xcfbf8b99, 0x41812c5c, 0xf58a5bfa, 0x6890b3cb,
<     0xdc9bc46d, 0x35eb8c9b, 0x81e0fb3d, 0x1cfa130c, 0xa8f164aa,
<     0x26cfc36f, 0x92c4b4c9, 0x0fde5cf8, 0xbbd52b5e, 0x79750b44,
<     0xcd7e7ce2, 0x506494d3, 0xe46fe375, 0x6a5144b0, 0xde5a3316,
<     0x4340db27, 0xf74bac81, 0x1e3be477, 0xaa3093d1, 0x372a7be0,
<     0x83210c46, 0x0d1fab83, 0xb914dc25, 0x240e3414, 0x900543b2,
<     0xb7e9d523, 0x03e2a285, 0x9ef84ab4, 0x2af33d12, 0xa4cd9ad7,
<     0x10c6ed71, 0x8ddc0540, 0x39d772e6, 0xd0a73a10, 0x64ac4db6,
<     0xf9b6a587, 0x4dbdd221, 0xc38375e4, 0x77880242, 0xea92ea73,
<     0x5e999dd5, 0xe54cb68b, 0x5147c12d, 0xcc5d291c, 0x78565eba,
<     0xf668f97f, 0x42638ed9, 0xdf7966e8, 0x6b72114e, 0x820259b8,
<     0x36092e1e, 0xab13c62f, 0x1f18b189, 0x9126164c, 0x252d61ea,
<     0xb83789db, 0x0c3cfe7d, 0x2bd068ec, 0x9fdb1f4a, 0x02c1f77b,
<     0xb6ca80dd, 0x38f42718, 0x8cff50be, 0x11e5b88f, 0xa5eecf29,
<     0x4c9e87df, 0xf895f079, 0x658f1848, 0xd1846fee, 0x5fbac82b,
<     0xebb1bf8d, 0x76ab57bc, 0xc2a0201a, 0xf2ea1688, 0x46e1612e,
<     0xdbfb891f, 0x6ff0feb9, 0xe1ce597c, 0x55c52eda, 0xc8dfc6eb,
<     0x7cd4b14d, 0x95a4f9bb, 0x21af8e1d, 0xbcb5662c, 0x08be118a,
<     0x8680b64f, 0x328bc1e9, 0xaf9129d8, 0x1b9a5e7e, 0x3c76c8ef,
<     0x887dbf49, 0x15675778, 0xa16c20de, 0x2f52871b, 0x9b59f0bd,
<     0x0643188c, 0xb2486f2a, 0x5b3827dc, 0xef33507a, 0x7229b84b,
<     0xc622cfed, 0x481c6828, 0xfc171f8e, 0x610df7bf, 0xd5068019,
<     0x6ed3ab47, 0xdad8dce1, 0x47c234d0, 0xf3c94376, 0x7df7e4b3,
<     0xc9fc9315, 0x54e67b24, 0xe0ed0c82, 0x099d4474, 0xbd9633d2,
<     0x208cdbe3, 0x9487ac45, 0x1ab90b80, 0xaeb27c26, 0x33a89417,
<     0x87a3e3b1, 0xa04f7520, 0x14440286, 0x895eeab7, 0x3d559d11,
<     0xb36b3ad4, 0x07604d72, 0x9a7aa543, 0x2e71d2e5, 0xc7019a13,
<     0x730aedb5, 0xee100584, 0x5a1b7222, 0xd425d5e7, 0x602ea241,
<     0xfd344a70, 0x493f3dd6, 0x8b9f1dcc, 0x3f946a6a, 0xa28e825b,
<     0x1685f5fd, 0x98bb5238, 0x2cb0259e, 0xb1aacdaf, 0x05a1ba09,
<     0xecd1f2ff, 0x58da8559, 0xc5c06d68, 0x71cb1ace, 0xfff5bd0b,
<     0x4bfecaad, 0xd6e4229c, 0x62ef553a, 0x4503c3ab, 0xf108b40d,
<     0x6c125c3c, 0xd8192b9a, 0x56278c5f, 0xe22cfbf9, 0x7f3613c8,
<     0xcb3d646e, 0x224d2c98, 0x96465b3e, 0x0b5cb30f, 0xbf57c4a9,
<     0x3169636c, 0x856214ca, 0x1878fcfb, 0xac738b5d, 0x17a6a003,
<     0xa3add7a5, 0x3eb73f94, 0x8abc4832, 0x0482eff7, 0xb0899851,
<     0x2d937060, 0x999807c6, 0x70e84f30, 0xc4e33896, 0x59f9d0a7,
<     0xedf2a701, 0x63cc00c4, 0xd7c77762, 0x4add9f53, 0xfed6e8f5,
<     0xd93a7e64, 0x6d3109c2, 0xf02be1f3, 0x44209655, 0xca1e3190,
<     0x7e154636, 0xe30fae07, 0x5704d9a1, 0xbe749157, 0x0a7fe6f1,
<     0x97650ec0, 0x236e7966, 0xad50dea3, 0x195ba905, 0x84414134,
<     0x304a3692},
<    {0x00000000, 0x9e00aacc, 0x7d072542, 0xe3078f8e, 0xfa0e4a84,
<     0x640ee048, 0x87096fc6, 0x1909c50a, 0xb51be5d3, 0x2b1b4f1f,
<     0xc81cc091, 0x561c6a5d, 0x4f15af57, 0xd115059b, 0x32128a15,
<     0xac1220d9, 0x2b31bb7c, 0xb53111b0, 0x56369e3e, 0xc83634f2,
<     0xd13ff1f8, 0x4f3f5b34, 0xac38d4ba, 0x32387e76, 0x9e2a5eaf,
<     0x002af463, 0xe32d7bed, 0x7d2dd121, 0x6424142b, 0xfa24bee7,
<     0x19233169, 0x87239ba5, 0x566276f9, 0xc862dc35, 0x2b6553bb,
<     0xb565f977, 0xac6c3c7d, 0x326c96b1, 0xd16b193f, 0x4f6bb3f3,
<     0xe379932a, 0x7d7939e6, 0x9e7eb668, 0x007e1ca4, 0x1977d9ae,
<     0x87777362, 0x6470fcec, 0xfa705620, 0x7d53cd85, 0xe3536749,
<     0x0054e8c7, 0x9e54420b, 0x875d8701, 0x195d2dcd, 0xfa5aa243,
<     0x645a088f, 0xc8482856, 0x5648829a, 0xb54f0d14, 0x2b4fa7d8,
<     0x324662d2, 0xac46c81e, 0x4f414790, 0xd141ed5c, 0xedc29d29,
<     0x73c237e5, 0x90c5b86b, 0x0ec512a7, 0x17ccd7ad, 0x89cc7d61,
<     0x6acbf2ef, 0xf4cb5823, 0x58d978fa, 0xc6d9d236, 0x25de5db8,
<     0xbbdef774, 0xa2d7327e, 0x3cd798b2, 0xdfd0173c, 0x41d0bdf0,
<     0xc6f32655, 0x58f38c99, 0xbbf40317, 0x25f4a9db, 0x3cfd6cd1,
<     0xa2fdc61d, 0x41fa4993, 0xdffae35f, 0x73e8c386, 0xede8694a,
<     0x0eefe6c4, 0x90ef4c08, 0x89e68902, 0x17e623ce, 0xf4e1ac40,
<     0x6ae1068c, 0xbba0ebd0, 0x25a0411c, 0xc6a7ce92, 0x58a7645e,
<     0x41aea154, 0xdfae0b98, 0x3ca98416, 0xa2a92eda, 0x0ebb0e03,
<     0x90bba4cf, 0x73bc2b41, 0xedbc818d, 0xf4b54487, 0x6ab5ee4b,
<     0x89b261c5, 0x17b2cb09, 0x909150ac, 0x0e91fa60, 0xed9675ee,
<     0x7396df22, 0x6a9f1a28, 0xf49fb0e4, 0x17983f6a, 0x899895a6,
<     0x258ab57f, 0xbb8a1fb3, 0x588d903d, 0xc68d3af1, 0xdf84fffb,
<     0x41845537, 0xa283dab9, 0x3c837075, 0xda853b53, 0x4485919f,
<     0xa7821e11, 0x3982b4dd, 0x208b71d7, 0xbe8bdb1b, 0x5d8c5495,
<     0xc38cfe59, 0x6f9ede80, 0xf19e744c, 0x1299fbc2, 0x8c99510e,
<     0x95909404, 0x0b903ec8, 0xe897b146, 0x76971b8a, 0xf1b4802f,
<     0x6fb42ae3, 0x8cb3a56d, 0x12b30fa1, 0x0bbacaab, 0x95ba6067,
<     0x76bdefe9, 0xe8bd4525, 0x44af65fc, 0xdaafcf30, 0x39a840be,
<     0xa7a8ea72, 0xbea12f78, 0x20a185b4, 0xc3a60a3a, 0x5da6a0f6,
<     0x8ce74daa, 0x12e7e766, 0xf1e068e8, 0x6fe0c224, 0x76e9072e,
<     0xe8e9ade2, 0x0bee226c, 0x95ee88a0, 0x39fca879, 0xa7fc02b5,
<     0x44fb8d3b, 0xdafb27f7, 0xc3f2e2fd, 0x5df24831, 0xbef5c7bf,
<     0x20f56d73, 0xa7d6f6d6, 0x39d65c1a, 0xdad1d394, 0x44d17958,
<     0x5dd8bc52, 0xc3d8169e, 0x20df9910, 0xbedf33dc, 0x12cd1305,
<     0x8ccdb9c9, 0x6fca3647, 0xf1ca9c8b, 0xe8c35981, 0x76c3f34d,
<     0x95c47cc3, 0x0bc4d60f, 0x3747a67a, 0xa9470cb6, 0x4a408338,
<     0xd44029f4, 0xcd49ecfe, 0x53494632, 0xb04ec9bc, 0x2e4e6370,
<     0x825c43a9, 0x1c5ce965, 0xff5b66eb, 0x615bcc27, 0x7852092d,
<     0xe652a3e1, 0x05552c6f, 0x9b5586a3, 0x1c761d06, 0x8276b7ca,
<     0x61713844, 0xff719288, 0xe6785782, 0x7878fd4e, 0x9b7f72c0,
<     0x057fd80c, 0xa96df8d5, 0x376d5219, 0xd46add97, 0x4a6a775b,
<     0x5363b251, 0xcd63189d, 0x2e649713, 0xb0643ddf, 0x6125d083,
<     0xff257a4f, 0x1c22f5c1, 0x82225f0d, 0x9b2b9a07, 0x052b30cb,
<     0xe62cbf45, 0x782c1589, 0xd43e3550, 0x4a3e9f9c, 0xa9391012,
<     0x3739bade, 0x2e307fd4, 0xb030d518, 0x53375a96, 0xcd37f05a,
<     0x4a146bff, 0xd414c133, 0x37134ebd, 0xa913e471, 0xb01a217b,
<     0x2e1a8bb7, 0xcd1d0439, 0x531daef5, 0xff0f8e2c, 0x610f24e0,
<     0x8208ab6e, 0x1c0801a2, 0x0501c4a8, 0x9b016e64, 0x7806e1ea,
<     0xe6064b26}};
< 
< #endif
< 
< #endif
< 
< #if N == 3
< 
< #if W == 8
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0x81256527, 0xd93bcc0f, 0x581ea928, 0x69069e5f,
<     0xe823fb78, 0xb03d5250, 0x31183777, 0xd20d3cbe, 0x53285999,
<     0x0b36f0b1, 0x8a139596, 0xbb0ba2e1, 0x3a2ec7c6, 0x62306eee,
<     0xe3150bc9, 0x7f6b7f3d, 0xfe4e1a1a, 0xa650b332, 0x2775d615,
<     0x166de162, 0x97488445, 0xcf562d6d, 0x4e73484a, 0xad664383,
<     0x2c4326a4, 0x745d8f8c, 0xf578eaab, 0xc460dddc, 0x4545b8fb,
<     0x1d5b11d3, 0x9c7e74f4, 0xfed6fe7a, 0x7ff39b5d, 0x27ed3275,
<     0xa6c85752, 0x97d06025, 0x16f50502, 0x4eebac2a, 0xcfcec90d,
<     0x2cdbc2c4, 0xadfea7e3, 0xf5e00ecb, 0x74c56bec, 0x45dd5c9b,
<     0xc4f839bc, 0x9ce69094, 0x1dc3f5b3, 0x81bd8147, 0x0098e460,
<     0x58864d48, 0xd9a3286f, 0xe8bb1f18, 0x699e7a3f, 0x3180d317,
<     0xb0a5b630, 0x53b0bdf9, 0xd295d8de, 0x8a8b71f6, 0x0bae14d1,
<     0x3ab623a6, 0xbb934681, 0xe38defa9, 0x62a88a8e, 0x26dcfab5,
<     0xa7f99f92, 0xffe736ba, 0x7ec2539d, 0x4fda64ea, 0xceff01cd,
<     0x96e1a8e5, 0x17c4cdc2, 0xf4d1c60b, 0x75f4a32c, 0x2dea0a04,
<     0xaccf6f23, 0x9dd75854, 0x1cf23d73, 0x44ec945b, 0xc5c9f17c,
<     0x59b78588, 0xd892e0af, 0x808c4987, 0x01a92ca0, 0x30b11bd7,
<     0xb1947ef0, 0xe98ad7d8, 0x68afb2ff, 0x8bbab936, 0x0a9fdc11,
<     0x52817539, 0xd3a4101e, 0xe2bc2769, 0x6399424e, 0x3b87eb66,
<     0xbaa28e41, 0xd80a04cf, 0x592f61e8, 0x0131c8c0, 0x8014ade7,
<     0xb10c9a90, 0x3029ffb7, 0x6837569f, 0xe91233b8, 0x0a073871,
<     0x8b225d56, 0xd33cf47e, 0x52199159, 0x6301a62e, 0xe224c309,
<     0xba3a6a21, 0x3b1f0f06, 0xa7617bf2, 0x26441ed5, 0x7e5ab7fd,
<     0xff7fd2da, 0xce67e5ad, 0x4f42808a, 0x175c29a2, 0x96794c85,
<     0x756c474c, 0xf449226b, 0xac578b43, 0x2d72ee64, 0x1c6ad913,
<     0x9d4fbc34, 0xc551151c, 0x4474703b, 0x4db9f56a, 0xcc9c904d,
<     0x94823965, 0x15a75c42, 0x24bf6b35, 0xa59a0e12, 0xfd84a73a,
<     0x7ca1c21d, 0x9fb4c9d4, 0x1e91acf3, 0x468f05db, 0xc7aa60fc,
<     0xf6b2578b, 0x779732ac, 0x2f899b84, 0xaeacfea3, 0x32d28a57,
<     0xb3f7ef70, 0xebe94658, 0x6acc237f, 0x5bd41408, 0xdaf1712f,
<     0x82efd807, 0x03cabd20, 0xe0dfb6e9, 0x61fad3ce, 0x39e47ae6,
<     0xb8c11fc1, 0x89d928b6, 0x08fc4d91, 0x50e2e4b9, 0xd1c7819e,
<     0xb36f0b10, 0x324a6e37, 0x6a54c71f, 0xeb71a238, 0xda69954f,
<     0x5b4cf068, 0x03525940, 0x82773c67, 0x616237ae, 0xe0475289,
<     0xb859fba1, 0x397c9e86, 0x0864a9f1, 0x8941ccd6, 0xd15f65fe,
<     0x507a00d9, 0xcc04742d, 0x4d21110a, 0x153fb822, 0x941add05,
<     0xa502ea72, 0x24278f55, 0x7c39267d, 0xfd1c435a, 0x1e094893,
<     0x9f2c2db4, 0xc732849c, 0x4617e1bb, 0x770fd6cc, 0xf62ab3eb,
<     0xae341ac3, 0x2f117fe4, 0x6b650fdf, 0xea406af8, 0xb25ec3d0,
<     0x337ba6f7, 0x02639180, 0x8346f4a7, 0xdb585d8f, 0x5a7d38a8,
<     0xb9683361, 0x384d5646, 0x6053ff6e, 0xe1769a49, 0xd06ead3e,
<     0x514bc819, 0x09556131, 0x88700416, 0x140e70e2, 0x952b15c5,
<     0xcd35bced, 0x4c10d9ca, 0x7d08eebd, 0xfc2d8b9a, 0xa43322b2,
<     0x25164795, 0xc6034c5c, 0x4726297b, 0x1f388053, 0x9e1de574,
<     0xaf05d203, 0x2e20b724, 0x763e1e0c, 0xf71b7b2b, 0x95b3f1a5,
<     0x14969482, 0x4c883daa, 0xcdad588d, 0xfcb56ffa, 0x7d900add,
<     0x258ea3f5, 0xa4abc6d2, 0x47becd1b, 0xc69ba83c, 0x9e850114,
<     0x1fa06433, 0x2eb85344, 0xaf9d3663, 0xf7839f4b, 0x76a6fa6c,
<     0xead88e98, 0x6bfdebbf, 0x33e34297, 0xb2c627b0, 0x83de10c7,
<     0x02fb75e0, 0x5ae5dcc8, 0xdbc0b9ef, 0x38d5b226, 0xb9f0d701,
<     0xe1ee7e29, 0x60cb1b0e, 0x51d32c79, 0xd0f6495e, 0x88e8e076,
<     0x09cd8551},
<    {0x00000000, 0x9b73ead4, 0xed96d3e9, 0x76e5393d, 0x005ca193,
<     0x9b2f4b47, 0xedca727a, 0x76b998ae, 0x00b94326, 0x9bcaa9f2,
<     0xed2f90cf, 0x765c7a1b, 0x00e5e2b5, 0x9b960861, 0xed73315c,
<     0x7600db88, 0x0172864c, 0x9a016c98, 0xece455a5, 0x7797bf71,
<     0x012e27df, 0x9a5dcd0b, 0xecb8f436, 0x77cb1ee2, 0x01cbc56a,
<     0x9ab82fbe, 0xec5d1683, 0x772efc57, 0x019764f9, 0x9ae48e2d,
<     0xec01b710, 0x77725dc4, 0x02e50c98, 0x9996e64c, 0xef73df71,
<     0x740035a5, 0x02b9ad0b, 0x99ca47df, 0xef2f7ee2, 0x745c9436,
<     0x025c4fbe, 0x992fa56a, 0xefca9c57, 0x74b97683, 0x0200ee2d,
<     0x997304f9, 0xef963dc4, 0x74e5d710, 0x03978ad4, 0x98e46000,
<     0xee01593d, 0x7572b3e9, 0x03cb2b47, 0x98b8c193, 0xee5df8ae,
<     0x752e127a, 0x032ec9f2, 0x985d2326, 0xeeb81a1b, 0x75cbf0cf,
<     0x03726861, 0x980182b5, 0xeee4bb88, 0x7597515c, 0x05ca1930,
<     0x9eb9f3e4, 0xe85ccad9, 0x732f200d, 0x0596b8a3, 0x9ee55277,
<     0xe8006b4a, 0x7373819e, 0x05735a16, 0x9e00b0c2, 0xe8e589ff,
<     0x7396632b, 0x052ffb85, 0x9e5c1151, 0xe8b9286c, 0x73cac2b8,
<     0x04b89f7c, 0x9fcb75a8, 0xe92e4c95, 0x725da641, 0x04e43eef,
<     0x9f97d43b, 0xe972ed06, 0x720107d2, 0x0401dc5a, 0x9f72368e,
<     0xe9970fb3, 0x72e4e567, 0x045d7dc9, 0x9f2e971d, 0xe9cbae20,
<     0x72b844f4, 0x072f15a8, 0x9c5cff7c, 0xeab9c641, 0x71ca2c95,
<     0x0773b43b, 0x9c005eef, 0xeae567d2, 0x71968d06, 0x0796568e,
<     0x9ce5bc5a, 0xea008567, 0x71736fb3, 0x07caf71d, 0x9cb91dc9,
<     0xea5c24f4, 0x712fce20, 0x065d93e4, 0x9d2e7930, 0xebcb400d,
<     0x70b8aad9, 0x06013277, 0x9d72d8a3, 0xeb97e19e, 0x70e40b4a,
<     0x06e4d0c2, 0x9d973a16, 0xeb72032b, 0x7001e9ff, 0x06b87151,
<     0x9dcb9b85, 0xeb2ea2b8, 0x705d486c, 0x0b943260, 0x90e7d8b4,
<     0xe602e189, 0x7d710b5d, 0x0bc893f3, 0x90bb7927, 0xe65e401a,
<     0x7d2daace, 0x0b2d7146, 0x905e9b92, 0xe6bba2af, 0x7dc8487b,
<     0x0b71d0d5, 0x90023a01, 0xe6e7033c, 0x7d94e9e8, 0x0ae6b42c,
<     0x91955ef8, 0xe77067c5, 0x7c038d11, 0x0aba15bf, 0x91c9ff6b,
<     0xe72cc656, 0x7c5f2c82, 0x0a5ff70a, 0x912c1dde, 0xe7c924e3,
<     0x7cbace37, 0x0a035699, 0x9170bc4d, 0xe7958570, 0x7ce66fa4,
<     0x09713ef8, 0x9202d42c, 0xe4e7ed11, 0x7f9407c5, 0x092d9f6b,
<     0x925e75bf, 0xe4bb4c82, 0x7fc8a656, 0x09c87dde, 0x92bb970a,
<     0xe45eae37, 0x7f2d44e3, 0x0994dc4d, 0x92e73699, 0xe4020fa4,
<     0x7f71e570, 0x0803b8b4, 0x93705260, 0xe5956b5d, 0x7ee68189,
<     0x085f1927, 0x932cf3f3, 0xe5c9cace, 0x7eba201a, 0x08bafb92,
<     0x93c91146, 0xe52c287b, 0x7e5fc2af, 0x08e65a01, 0x9395b0d5,
<     0xe57089e8, 0x7e03633c, 0x0e5e2b50, 0x952dc184, 0xe3c8f8b9,
<     0x78bb126d, 0x0e028ac3, 0x95716017, 0xe394592a, 0x78e7b3fe,
<     0x0ee76876, 0x959482a2, 0xe371bb9f, 0x7802514b, 0x0ebbc9e5,
<     0x95c82331, 0xe32d1a0c, 0x785ef0d8, 0x0f2cad1c, 0x945f47c8,
<     0xe2ba7ef5, 0x79c99421, 0x0f700c8f, 0x9403e65b, 0xe2e6df66,
<     0x799535b2, 0x0f95ee3a, 0x94e604ee, 0xe2033dd3, 0x7970d707,
<     0x0fc94fa9, 0x94baa57d, 0xe25f9c40, 0x792c7694, 0x0cbb27c8,
<     0x97c8cd1c, 0xe12df421, 0x7a5e1ef5, 0x0ce7865b, 0x97946c8f,
<     0xe17155b2, 0x7a02bf66, 0x0c0264ee, 0x97718e3a, 0xe194b707,
<     0x7ae75dd3, 0x0c5ec57d, 0x972d2fa9, 0xe1c81694, 0x7abbfc40,
<     0x0dc9a184, 0x96ba4b50, 0xe05f726d, 0x7b2c98b9, 0x0d950017,
<     0x96e6eac3, 0xe003d3fe, 0x7b70392a, 0x0d70e2a2, 0x96030876,
<     0xe0e6314b, 0x7b95db9f, 0x0d2c4331, 0x965fa9e5, 0xe0ba90d8,
<     0x7bc97a0c},
<    {0x00000000, 0x172864c0, 0x2e50c980, 0x3978ad40, 0x5ca19300,
<     0x4b89f7c0, 0x72f15a80, 0x65d93e40, 0xb9432600, 0xae6b42c0,
<     0x9713ef80, 0x803b8b40, 0xe5e2b500, 0xf2cad1c0, 0xcbb27c80,
<     0xdc9a1840, 0xa9f74a41, 0xbedf2e81, 0x87a783c1, 0x908fe701,
<     0xf556d941, 0xe27ebd81, 0xdb0610c1, 0xcc2e7401, 0x10b46c41,
<     0x079c0881, 0x3ee4a5c1, 0x29ccc101, 0x4c15ff41, 0x5b3d9b81,
<     0x624536c1, 0x756d5201, 0x889f92c3, 0x9fb7f603, 0xa6cf5b43,
<     0xb1e73f83, 0xd43e01c3, 0xc3166503, 0xfa6ec843, 0xed46ac83,
<     0x31dcb4c3, 0x26f4d003, 0x1f8c7d43, 0x08a41983, 0x6d7d27c3,
<     0x7a554303, 0x432dee43, 0x54058a83, 0x2168d882, 0x3640bc42,
<     0x0f381102, 0x181075c2, 0x7dc94b82, 0x6ae12f42, 0x53998202,
<     0x44b1e6c2, 0x982bfe82, 0x8f039a42, 0xb67b3702, 0xa15353c2,
<     0xc48a6d82, 0xd3a20942, 0xeadaa402, 0xfdf2c0c2, 0xca4e23c7,
<     0xdd664707, 0xe41eea47, 0xf3368e87, 0x96efb0c7, 0x81c7d407,
<     0xb8bf7947, 0xaf971d87, 0x730d05c7, 0x64256107, 0x5d5dcc47,
<     0x4a75a887, 0x2fac96c7, 0x3884f207, 0x01fc5f47, 0x16d43b87,
<     0x63b96986, 0x74910d46, 0x4de9a006, 0x5ac1c4c6, 0x3f18fa86,
<     0x28309e46, 0x11483306, 0x066057c6, 0xdafa4f86, 0xcdd22b46,
<     0xf4aa8606, 0xe382e2c6, 0x865bdc86, 0x9173b846, 0xa80b1506,
<     0xbf2371c6, 0x42d1b104, 0x55f9d5c4, 0x6c817884, 0x7ba91c44,
<     0x1e702204, 0x095846c4, 0x3020eb84, 0x27088f44, 0xfb929704,
<     0xecbaf3c4, 0xd5c25e84, 0xc2ea3a44, 0xa7330404, 0xb01b60c4,
<     0x8963cd84, 0x9e4ba944, 0xeb26fb45, 0xfc0e9f85, 0xc57632c5,
<     0xd25e5605, 0xb7876845, 0xa0af0c85, 0x99d7a1c5, 0x8effc505,
<     0x5265dd45, 0x454db985, 0x7c3514c5, 0x6b1d7005, 0x0ec44e45,
<     0x19ec2a85, 0x209487c5, 0x37bce305, 0x4fed41cf, 0x58c5250f,
<     0x61bd884f, 0x7695ec8f, 0x134cd2cf, 0x0464b60f, 0x3d1c1b4f,
<     0x2a347f8f, 0xf6ae67cf, 0xe186030f, 0xd8feae4f, 0xcfd6ca8f,
<     0xaa0ff4cf, 0xbd27900f, 0x845f3d4f, 0x9377598f, 0xe61a0b8e,
<     0xf1326f4e, 0xc84ac20e, 0xdf62a6ce, 0xbabb988e, 0xad93fc4e,
<     0x94eb510e, 0x83c335ce, 0x5f592d8e, 0x4871494e, 0x7109e40e,
<     0x662180ce, 0x03f8be8e, 0x14d0da4e, 0x2da8770e, 0x3a8013ce,
<     0xc772d30c, 0xd05ab7cc, 0xe9221a8c, 0xfe0a7e4c, 0x9bd3400c,
<     0x8cfb24cc, 0xb583898c, 0xa2abed4c, 0x7e31f50c, 0x691991cc,
<     0x50613c8c, 0x4749584c, 0x2290660c, 0x35b802cc, 0x0cc0af8c,
<     0x1be8cb4c, 0x6e85994d, 0x79adfd8d, 0x40d550cd, 0x57fd340d,
<     0x32240a4d, 0x250c6e8d, 0x1c74c3cd, 0x0b5ca70d, 0xd7c6bf4d,
<     0xc0eedb8d, 0xf99676cd, 0xeebe120d, 0x8b672c4d, 0x9c4f488d,
<     0xa537e5cd, 0xb21f810d, 0x85a36208, 0x928b06c8, 0xabf3ab88,
<     0xbcdbcf48, 0xd902f108, 0xce2a95c8, 0xf7523888, 0xe07a5c48,
<     0x3ce04408, 0x2bc820c8, 0x12b08d88, 0x0598e948, 0x6041d708,
<     0x7769b3c8, 0x4e111e88, 0x59397a48, 0x2c542849, 0x3b7c4c89,
<     0x0204e1c9, 0x152c8509, 0x70f5bb49, 0x67dddf89, 0x5ea572c9,
<     0x498d1609, 0x95170e49, 0x823f6a89, 0xbb47c7c9, 0xac6fa309,
<     0xc9b69d49, 0xde9ef989, 0xe7e654c9, 0xf0ce3009, 0x0d3cf0cb,
<     0x1a14940b, 0x236c394b, 0x34445d8b, 0x519d63cb, 0x46b5070b,
<     0x7fcdaa4b, 0x68e5ce8b, 0xb47fd6cb, 0xa357b20b, 0x9a2f1f4b,
<     0x8d077b8b, 0xe8de45cb, 0xfff6210b, 0xc68e8c4b, 0xd1a6e88b,
<     0xa4cbba8a, 0xb3e3de4a, 0x8a9b730a, 0x9db317ca, 0xf86a298a,
<     0xef424d4a, 0xd63ae00a, 0xc11284ca, 0x1d889c8a, 0x0aa0f84a,
<     0x33d8550a, 0x24f031ca, 0x41290f8a, 0x56016b4a, 0x6f79c60a,
<     0x7851a2ca},
<    {0x00000000, 0x9fda839e, 0xe4c4017d, 0x7b1e82e3, 0x12f904bb,
<     0x8d238725, 0xf63d05c6, 0x69e78658, 0x25f20976, 0xba288ae8,
<     0xc136080b, 0x5eec8b95, 0x370b0dcd, 0xa8d18e53, 0xd3cf0cb0,
<     0x4c158f2e, 0x4be412ec, 0xd43e9172, 0xaf201391, 0x30fa900f,
<     0x591d1657, 0xc6c795c9, 0xbdd9172a, 0x220394b4, 0x6e161b9a,
<     0xf1cc9804, 0x8ad21ae7, 0x15089979, 0x7cef1f21, 0xe3359cbf,
<     0x982b1e5c, 0x07f19dc2, 0x97c825d8, 0x0812a646, 0x730c24a5,
<     0xecd6a73b, 0x85312163, 0x1aeba2fd, 0x61f5201e, 0xfe2fa380,
<     0xb23a2cae, 0x2de0af30, 0x56fe2dd3, 0xc924ae4d, 0xa0c32815,
<     0x3f19ab8b, 0x44072968, 0xdbddaaf6, 0xdc2c3734, 0x43f6b4aa,
<     0x38e83649, 0xa732b5d7, 0xced5338f, 0x510fb011, 0x2a1132f2,
<     0xb5cbb16c, 0xf9de3e42, 0x6604bddc, 0x1d1a3f3f, 0x82c0bca1,
<     0xeb273af9, 0x74fdb967, 0x0fe33b84, 0x9039b81a, 0xf4e14df1,
<     0x6b3bce6f, 0x10254c8c, 0x8fffcf12, 0xe618494a, 0x79c2cad4,
<     0x02dc4837, 0x9d06cba9, 0xd1134487, 0x4ec9c719, 0x35d745fa,
<     0xaa0dc664, 0xc3ea403c, 0x5c30c3a2, 0x272e4141, 0xb8f4c2df,
<     0xbf055f1d, 0x20dfdc83, 0x5bc15e60, 0xc41bddfe, 0xadfc5ba6,
<     0x3226d838, 0x49385adb, 0xd6e2d945, 0x9af7566b, 0x052dd5f5,
<     0x7e335716, 0xe1e9d488, 0x880e52d0, 0x17d4d14e, 0x6cca53ad,
<     0xf310d033, 0x63296829, 0xfcf3ebb7, 0x87ed6954, 0x1837eaca,
<     0x71d06c92, 0xee0aef0c, 0x95146def, 0x0aceee71, 0x46db615f,
<     0xd901e2c1, 0xa21f6022, 0x3dc5e3bc, 0x542265e4, 0xcbf8e67a,
<     0xb0e66499, 0x2f3ce707, 0x28cd7ac5, 0xb717f95b, 0xcc097bb8,
<     0x53d3f826, 0x3a347e7e, 0xa5eefde0, 0xdef07f03, 0x412afc9d,
<     0x0d3f73b3, 0x92e5f02d, 0xe9fb72ce, 0x7621f150, 0x1fc67708,
<     0x801cf496, 0xfb027675, 0x64d8f5eb, 0x32b39da3, 0xad691e3d,
<     0xd6779cde, 0x49ad1f40, 0x204a9918, 0xbf901a86, 0xc48e9865,
<     0x5b541bfb, 0x174194d5, 0x889b174b, 0xf38595a8, 0x6c5f1636,
<     0x05b8906e, 0x9a6213f0, 0xe17c9113, 0x7ea6128d, 0x79578f4f,
<     0xe68d0cd1, 0x9d938e32, 0x02490dac, 0x6bae8bf4, 0xf474086a,
<     0x8f6a8a89, 0x10b00917, 0x5ca58639, 0xc37f05a7, 0xb8618744,
<     0x27bb04da, 0x4e5c8282, 0xd186011c, 0xaa9883ff, 0x35420061,
<     0xa57bb87b, 0x3aa13be5, 0x41bfb906, 0xde653a98, 0xb782bcc0,
<     0x28583f5e, 0x5346bdbd, 0xcc9c3e23, 0x8089b10d, 0x1f533293,
<     0x644db070, 0xfb9733ee, 0x9270b5b6, 0x0daa3628, 0x76b4b4cb,
<     0xe96e3755, 0xee9faa97, 0x71452909, 0x0a5babea, 0x95812874,
<     0xfc66ae2c, 0x63bc2db2, 0x18a2af51, 0x87782ccf, 0xcb6da3e1,
<     0x54b7207f, 0x2fa9a29c, 0xb0732102, 0xd994a75a, 0x464e24c4,
<     0x3d50a627, 0xa28a25b9, 0xc652d052, 0x598853cc, 0x2296d12f,
<     0xbd4c52b1, 0xd4abd4e9, 0x4b715777, 0x306fd594, 0xafb5560a,
<     0xe3a0d924, 0x7c7a5aba, 0x0764d859, 0x98be5bc7, 0xf159dd9f,
<     0x6e835e01, 0x159ddce2, 0x8a475f7c, 0x8db6c2be, 0x126c4120,
<     0x6972c3c3, 0xf6a8405d, 0x9f4fc605, 0x0095459b, 0x7b8bc778,
<     0xe45144e6, 0xa844cbc8, 0x379e4856, 0x4c80cab5, 0xd35a492b,
<     0xbabdcf73, 0x25674ced, 0x5e79ce0e, 0xc1a34d90, 0x519af58a,
<     0xce407614, 0xb55ef4f7, 0x2a847769, 0x4363f131, 0xdcb972af,
<     0xa7a7f04c, 0x387d73d2, 0x7468fcfc, 0xebb27f62, 0x90acfd81,
<     0x0f767e1f, 0x6691f847, 0xf94b7bd9, 0x8255f93a, 0x1d8f7aa4,
<     0x1a7ee766, 0x85a464f8, 0xfebae61b, 0x61606585, 0x0887e3dd,
<     0x975d6043, 0xec43e2a0, 0x7399613e, 0x3f8cee10, 0xa0566d8e,
<     0xdb48ef6d, 0x44926cf3, 0x2d75eaab, 0xb2af6935, 0xc9b1ebd6,
<     0x566b6848},
<    {0x00000000, 0x65673b46, 0xcace768c, 0xafa94dca, 0x4eedeb59,
<     0x2b8ad01f, 0x84239dd5, 0xe144a693, 0x9ddbd6b2, 0xf8bcedf4,
<     0x5715a03e, 0x32729b78, 0xd3363deb, 0xb65106ad, 0x19f84b67,
<     0x7c9f7021, 0xe0c6ab25, 0x85a19063, 0x2a08dda9, 0x4f6fe6ef,
<     0xae2b407c, 0xcb4c7b3a, 0x64e536f0, 0x01820db6, 0x7d1d7d97,
<     0x187a46d1, 0xb7d30b1b, 0xd2b4305d, 0x33f096ce, 0x5697ad88,
<     0xf93ee042, 0x9c59db04, 0x1afc500b, 0x7f9b6b4d, 0xd0322687,
<     0xb5551dc1, 0x5411bb52, 0x31768014, 0x9edfcdde, 0xfbb8f698,
<     0x872786b9, 0xe240bdff, 0x4de9f035, 0x288ecb73, 0xc9ca6de0,
<     0xacad56a6, 0x03041b6c, 0x6663202a, 0xfa3afb2e, 0x9f5dc068,
<     0x30f48da2, 0x5593b6e4, 0xb4d71077, 0xd1b02b31, 0x7e1966fb,
<     0x1b7e5dbd, 0x67e12d9c, 0x028616da, 0xad2f5b10, 0xc8486056,
<     0x290cc6c5, 0x4c6bfd83, 0xe3c2b049, 0x86a58b0f, 0x35f8a016,
<     0x509f9b50, 0xff36d69a, 0x9a51eddc, 0x7b154b4f, 0x1e727009,
<     0xb1db3dc3, 0xd4bc0685, 0xa82376a4, 0xcd444de2, 0x62ed0028,
<     0x078a3b6e, 0xe6ce9dfd, 0x83a9a6bb, 0x2c00eb71, 0x4967d037,
<     0xd53e0b33, 0xb0593075, 0x1ff07dbf, 0x7a9746f9, 0x9bd3e06a,
<     0xfeb4db2c, 0x511d96e6, 0x347aada0, 0x48e5dd81, 0x2d82e6c7,
<     0x822bab0d, 0xe74c904b, 0x060836d8, 0x636f0d9e, 0xccc64054,
<     0xa9a17b12, 0x2f04f01d, 0x4a63cb5b, 0xe5ca8691, 0x80adbdd7,
<     0x61e91b44, 0x048e2002, 0xab276dc8, 0xce40568e, 0xb2df26af,
<     0xd7b81de9, 0x78115023, 0x1d766b65, 0xfc32cdf6, 0x9955f6b0,
<     0x36fcbb7a, 0x539b803c, 0xcfc25b38, 0xaaa5607e, 0x050c2db4,
<     0x606b16f2, 0x812fb061, 0xe4488b27, 0x4be1c6ed, 0x2e86fdab,
<     0x52198d8a, 0x377eb6cc, 0x98d7fb06, 0xfdb0c040, 0x1cf466d3,
<     0x79935d95, 0xd63a105f, 0xb35d2b19, 0x6bf1402c, 0x0e967b6a,
<     0xa13f36a0, 0xc4580de6, 0x251cab75, 0x407b9033, 0xefd2ddf9,
<     0x8ab5e6bf, 0xf62a969e, 0x934dadd8, 0x3ce4e012, 0x5983db54,
<     0xb8c77dc7, 0xdda04681, 0x72090b4b, 0x176e300d, 0x8b37eb09,
<     0xee50d04f, 0x41f99d85, 0x249ea6c3, 0xc5da0050, 0xa0bd3b16,
<     0x0f1476dc, 0x6a734d9a, 0x16ec3dbb, 0x738b06fd, 0xdc224b37,
<     0xb9457071, 0x5801d6e2, 0x3d66eda4, 0x92cfa06e, 0xf7a89b28,
<     0x710d1027, 0x146a2b61, 0xbbc366ab, 0xdea45ded, 0x3fe0fb7e,
<     0x5a87c038, 0xf52e8df2, 0x9049b6b4, 0xecd6c695, 0x89b1fdd3,
<     0x2618b019, 0x437f8b5f, 0xa23b2dcc, 0xc75c168a, 0x68f55b40,
<     0x0d926006, 0x91cbbb02, 0xf4ac8044, 0x5b05cd8e, 0x3e62f6c8,
<     0xdf26505b, 0xba416b1d, 0x15e826d7, 0x708f1d91, 0x0c106db0,
<     0x697756f6, 0xc6de1b3c, 0xa3b9207a, 0x42fd86e9, 0x279abdaf,
<     0x8833f065, 0xed54cb23, 0x5e09e03a, 0x3b6edb7c, 0x94c796b6,
<     0xf1a0adf0, 0x10e40b63, 0x75833025, 0xda2a7def, 0xbf4d46a9,
<     0xc3d23688, 0xa6b50dce, 0x091c4004, 0x6c7b7b42, 0x8d3fddd1,
<     0xe858e697, 0x47f1ab5d, 0x2296901b, 0xbecf4b1f, 0xdba87059,
<     0x74013d93, 0x116606d5, 0xf022a046, 0x95459b00, 0x3aecd6ca,
<     0x5f8bed8c, 0x23149dad, 0x4673a6eb, 0xe9daeb21, 0x8cbdd067,
<     0x6df976f4, 0x089e4db2, 0xa7370078, 0xc2503b3e, 0x44f5b031,
<     0x21928b77, 0x8e3bc6bd, 0xeb5cfdfb, 0x0a185b68, 0x6f7f602e,
<     0xc0d62de4, 0xa5b116a2, 0xd92e6683, 0xbc495dc5, 0x13e0100f,
<     0x76872b49, 0x97c38dda, 0xf2a4b69c, 0x5d0dfb56, 0x386ac010,
<     0xa4331b14, 0xc1542052, 0x6efd6d98, 0x0b9a56de, 0xeadef04d,
<     0x8fb9cb0b, 0x201086c1, 0x4577bd87, 0x39e8cda6, 0x5c8ff6e0,
<     0xf326bb2a, 0x9641806c, 0x770526ff, 0x12621db9, 0xbdcb5073,
<     0xd8ac6b35},
<    {0x00000000, 0xd7e28058, 0x74b406f1, 0xa35686a9, 0xe9680de2,
<     0x3e8a8dba, 0x9ddc0b13, 0x4a3e8b4b, 0x09a11d85, 0xde439ddd,
<     0x7d151b74, 0xaaf79b2c, 0xe0c91067, 0x372b903f, 0x947d1696,
<     0x439f96ce, 0x13423b0a, 0xc4a0bb52, 0x67f63dfb, 0xb014bda3,
<     0xfa2a36e8, 0x2dc8b6b0, 0x8e9e3019, 0x597cb041, 0x1ae3268f,
<     0xcd01a6d7, 0x6e57207e, 0xb9b5a026, 0xf38b2b6d, 0x2469ab35,
<     0x873f2d9c, 0x50ddadc4, 0x26847614, 0xf166f64c, 0x523070e5,
<     0x85d2f0bd, 0xcfec7bf6, 0x180efbae, 0xbb587d07, 0x6cbafd5f,
<     0x2f256b91, 0xf8c7ebc9, 0x5b916d60, 0x8c73ed38, 0xc64d6673,
<     0x11afe62b, 0xb2f96082, 0x651be0da, 0x35c64d1e, 0xe224cd46,
<     0x41724bef, 0x9690cbb7, 0xdcae40fc, 0x0b4cc0a4, 0xa81a460d,
<     0x7ff8c655, 0x3c67509b, 0xeb85d0c3, 0x48d3566a, 0x9f31d632,
<     0xd50f5d79, 0x02eddd21, 0xa1bb5b88, 0x7659dbd0, 0x4d08ec28,
<     0x9aea6c70, 0x39bcead9, 0xee5e6a81, 0xa460e1ca, 0x73826192,
<     0xd0d4e73b, 0x07366763, 0x44a9f1ad, 0x934b71f5, 0x301df75c,
<     0xe7ff7704, 0xadc1fc4f, 0x7a237c17, 0xd975fabe, 0x0e977ae6,
<     0x5e4ad722, 0x89a8577a, 0x2afed1d3, 0xfd1c518b, 0xb722dac0,
<     0x60c05a98, 0xc396dc31, 0x14745c69, 0x57ebcaa7, 0x80094aff,
<     0x235fcc56, 0xf4bd4c0e, 0xbe83c745, 0x6961471d, 0xca37c1b4,
<     0x1dd541ec, 0x6b8c9a3c, 0xbc6e1a64, 0x1f389ccd, 0xc8da1c95,
<     0x82e497de, 0x55061786, 0xf650912f, 0x21b21177, 0x622d87b9,
<     0xb5cf07e1, 0x16998148, 0xc17b0110, 0x8b458a5b, 0x5ca70a03,
<     0xfff18caa, 0x28130cf2, 0x78cea136, 0xaf2c216e, 0x0c7aa7c7,
<     0xdb98279f, 0x91a6acd4, 0x46442c8c, 0xe512aa25, 0x32f02a7d,
<     0x716fbcb3, 0xa68d3ceb, 0x05dbba42, 0xd2393a1a, 0x9807b151,
<     0x4fe53109, 0xecb3b7a0, 0x3b5137f8, 0x9a11d850, 0x4df35808,
<     0xeea5dea1, 0x39475ef9, 0x7379d5b2, 0xa49b55ea, 0x07cdd343,
<     0xd02f531b, 0x93b0c5d5, 0x4452458d, 0xe704c324, 0x30e6437c,
<     0x7ad8c837, 0xad3a486f, 0x0e6ccec6, 0xd98e4e9e, 0x8953e35a,
<     0x5eb16302, 0xfde7e5ab, 0x2a0565f3, 0x603beeb8, 0xb7d96ee0,
<     0x148fe849, 0xc36d6811, 0x80f2fedf, 0x57107e87, 0xf446f82e,
<     0x23a47876, 0x699af33d, 0xbe787365, 0x1d2ef5cc, 0xcacc7594,
<     0xbc95ae44, 0x6b772e1c, 0xc821a8b5, 0x1fc328ed, 0x55fda3a6,
<     0x821f23fe, 0x2149a557, 0xf6ab250f, 0xb534b3c1, 0x62d63399,
<     0xc180b530, 0x16623568, 0x5c5cbe23, 0x8bbe3e7b, 0x28e8b8d2,
<     0xff0a388a, 0xafd7954e, 0x78351516, 0xdb6393bf, 0x0c8113e7,
<     0x46bf98ac, 0x915d18f4, 0x320b9e5d, 0xe5e91e05, 0xa67688cb,
<     0x71940893, 0xd2c28e3a, 0x05200e62, 0x4f1e8529, 0x98fc0571,
<     0x3baa83d8, 0xec480380, 0xd7193478, 0x00fbb420, 0xa3ad3289,
<     0x744fb2d1, 0x3e71399a, 0xe993b9c2, 0x4ac53f6b, 0x9d27bf33,
<     0xdeb829fd, 0x095aa9a5, 0xaa0c2f0c, 0x7deeaf54, 0x37d0241f,
<     0xe032a447, 0x436422ee, 0x9486a2b6, 0xc45b0f72, 0x13b98f2a,
<     0xb0ef0983, 0x670d89db, 0x2d330290, 0xfad182c8, 0x59870461,
<     0x8e658439, 0xcdfa12f7, 0x1a1892af, 0xb94e1406, 0x6eac945e,
<     0x24921f15, 0xf3709f4d, 0x502619e4, 0x87c499bc, 0xf19d426c,
<     0x267fc234, 0x8529449d, 0x52cbc4c5, 0x18f54f8e, 0xcf17cfd6,
<     0x6c41497f, 0xbba3c927, 0xf83c5fe9, 0x2fdedfb1, 0x8c885918,
<     0x5b6ad940, 0x1154520b, 0xc6b6d253, 0x65e054fa, 0xb202d4a2,
<     0xe2df7966, 0x353df93e, 0x966b7f97, 0x4189ffcf, 0x0bb77484,
<     0xdc55f4dc, 0x7f037275, 0xa8e1f22d, 0xeb7e64e3, 0x3c9ce4bb,
<     0x9fca6212, 0x4828e24a, 0x02166901, 0xd5f4e959, 0x76a26ff0,
<     0xa140efa8},
<    {0x00000000, 0xef52b6e1, 0x05d46b83, 0xea86dd62, 0x0ba8d706,
<     0xe4fa61e7, 0x0e7cbc85, 0xe12e0a64, 0x1751ae0c, 0xf80318ed,
<     0x1285c58f, 0xfdd7736e, 0x1cf9790a, 0xf3abcfeb, 0x192d1289,
<     0xf67fa468, 0x2ea35c18, 0xc1f1eaf9, 0x2b77379b, 0xc425817a,
<     0x250b8b1e, 0xca593dff, 0x20dfe09d, 0xcf8d567c, 0x39f2f214,
<     0xd6a044f5, 0x3c269997, 0xd3742f76, 0x325a2512, 0xdd0893f3,
<     0x378e4e91, 0xd8dcf870, 0x5d46b830, 0xb2140ed1, 0x5892d3b3,
<     0xb7c06552, 0x56ee6f36, 0xb9bcd9d7, 0x533a04b5, 0xbc68b254,
<     0x4a17163c, 0xa545a0dd, 0x4fc37dbf, 0xa091cb5e, 0x41bfc13a,
<     0xaeed77db, 0x446baab9, 0xab391c58, 0x73e5e428, 0x9cb752c9,
<     0x76318fab, 0x9963394a, 0x784d332e, 0x971f85cf, 0x7d9958ad,
<     0x92cbee4c, 0x64b44a24, 0x8be6fcc5, 0x616021a7, 0x8e329746,
<     0x6f1c9d22, 0x804e2bc3, 0x6ac8f6a1, 0x859a4040, 0xba8d7060,
<     0x55dfc681, 0xbf591be3, 0x500bad02, 0xb125a766, 0x5e771187,
<     0xb4f1cce5, 0x5ba37a04, 0xaddcde6c, 0x428e688d, 0xa808b5ef,
<     0x475a030e, 0xa674096a, 0x4926bf8b, 0xa3a062e9, 0x4cf2d408,
<     0x942e2c78, 0x7b7c9a99, 0x91fa47fb, 0x7ea8f11a, 0x9f86fb7e,
<     0x70d44d9f, 0x9a5290fd, 0x7500261c, 0x837f8274, 0x6c2d3495,
<     0x86abe9f7, 0x69f95f16, 0x88d75572, 0x6785e393, 0x8d033ef1,
<     0x62518810, 0xe7cbc850, 0x08997eb1, 0xe21fa3d3, 0x0d4d1532,
<     0xec631f56, 0x0331a9b7, 0xe9b774d5, 0x06e5c234, 0xf09a665c,
<     0x1fc8d0bd, 0xf54e0ddf, 0x1a1cbb3e, 0xfb32b15a, 0x146007bb,
<     0xfee6dad9, 0x11b46c38, 0xc9689448, 0x263a22a9, 0xccbcffcb,
<     0x23ee492a, 0xc2c0434e, 0x2d92f5af, 0xc71428cd, 0x28469e2c,
<     0xde393a44, 0x316b8ca5, 0xdbed51c7, 0x34bfe726, 0xd591ed42,
<     0x3ac35ba3, 0xd04586c1, 0x3f173020, 0xae6be681, 0x41395060,
<     0xabbf8d02, 0x44ed3be3, 0xa5c33187, 0x4a918766, 0xa0175a04,
<     0x4f45ece5, 0xb93a488d, 0x5668fe6c, 0xbcee230e, 0x53bc95ef,
<     0xb2929f8b, 0x5dc0296a, 0xb746f408, 0x581442e9, 0x80c8ba99,
<     0x6f9a0c78, 0x851cd11a, 0x6a4e67fb, 0x8b606d9f, 0x6432db7e,
<     0x8eb4061c, 0x61e6b0fd, 0x97991495, 0x78cba274, 0x924d7f16,
<     0x7d1fc9f7, 0x9c31c393, 0x73637572, 0x99e5a810, 0x76b71ef1,
<     0xf32d5eb1, 0x1c7fe850, 0xf6f93532, 0x19ab83d3, 0xf88589b7,
<     0x17d73f56, 0xfd51e234, 0x120354d5, 0xe47cf0bd, 0x0b2e465c,
<     0xe1a89b3e, 0x0efa2ddf, 0xefd427bb, 0x0086915a, 0xea004c38,
<     0x0552fad9, 0xdd8e02a9, 0x32dcb448, 0xd85a692a, 0x3708dfcb,
<     0xd626d5af, 0x3974634e, 0xd3f2be2c, 0x3ca008cd, 0xcadfaca5,
<     0x258d1a44, 0xcf0bc726, 0x205971c7, 0xc1777ba3, 0x2e25cd42,
<     0xc4a31020, 0x2bf1a6c1, 0x14e696e1, 0xfbb42000, 0x1132fd62,
<     0xfe604b83, 0x1f4e41e7, 0xf01cf706, 0x1a9a2a64, 0xf5c89c85,
<     0x03b738ed, 0xece58e0c, 0x0663536e, 0xe931e58f, 0x081fefeb,
<     0xe74d590a, 0x0dcb8468, 0xe2993289, 0x3a45caf9, 0xd5177c18,
<     0x3f91a17a, 0xd0c3179b, 0x31ed1dff, 0xdebfab1e, 0x3439767c,
<     0xdb6bc09d, 0x2d1464f5, 0xc246d214, 0x28c00f76, 0xc792b997,
<     0x26bcb3f3, 0xc9ee0512, 0x2368d870, 0xcc3a6e91, 0x49a02ed1,
<     0xa6f29830, 0x4c744552, 0xa326f3b3, 0x4208f9d7, 0xad5a4f36,
<     0x47dc9254, 0xa88e24b5, 0x5ef180dd, 0xb1a3363c, 0x5b25eb5e,
<     0xb4775dbf, 0x555957db, 0xba0be13a, 0x508d3c58, 0xbfdf8ab9,
<     0x670372c9, 0x8851c428, 0x62d7194a, 0x8d85afab, 0x6caba5cf,
<     0x83f9132e, 0x697fce4c, 0x862d78ad, 0x7052dcc5, 0x9f006a24,
<     0x7586b746, 0x9ad401a7, 0x7bfa0bc3, 0x94a8bd22, 0x7e2e6040,
<     0x917cd6a1},
<    {0x00000000, 0x87a6cb43, 0xd43c90c7, 0x539a5b84, 0x730827cf,
<     0xf4aeec8c, 0xa734b708, 0x20927c4b, 0xe6104f9e, 0x61b684dd,
<     0x322cdf59, 0xb58a141a, 0x95186851, 0x12bea312, 0x4124f896,
<     0xc68233d5, 0x1751997d, 0x90f7523e, 0xc36d09ba, 0x44cbc2f9,
<     0x6459beb2, 0xe3ff75f1, 0xb0652e75, 0x37c3e536, 0xf141d6e3,
<     0x76e71da0, 0x257d4624, 0xa2db8d67, 0x8249f12c, 0x05ef3a6f,
<     0x567561eb, 0xd1d3aaa8, 0x2ea332fa, 0xa905f9b9, 0xfa9fa23d,
<     0x7d39697e, 0x5dab1535, 0xda0dde76, 0x899785f2, 0x0e314eb1,
<     0xc8b37d64, 0x4f15b627, 0x1c8feda3, 0x9b2926e0, 0xbbbb5aab,
<     0x3c1d91e8, 0x6f87ca6c, 0xe821012f, 0x39f2ab87, 0xbe5460c4,
<     0xedce3b40, 0x6a68f003, 0x4afa8c48, 0xcd5c470b, 0x9ec61c8f,
<     0x1960d7cc, 0xdfe2e419, 0x58442f5a, 0x0bde74de, 0x8c78bf9d,
<     0xaceac3d6, 0x2b4c0895, 0x78d65311, 0xff709852, 0x5d4665f4,
<     0xdae0aeb7, 0x897af533, 0x0edc3e70, 0x2e4e423b, 0xa9e88978,
<     0xfa72d2fc, 0x7dd419bf, 0xbb562a6a, 0x3cf0e129, 0x6f6abaad,
<     0xe8cc71ee, 0xc85e0da5, 0x4ff8c6e6, 0x1c629d62, 0x9bc45621,
<     0x4a17fc89, 0xcdb137ca, 0x9e2b6c4e, 0x198da70d, 0x391fdb46,
<     0xbeb91005, 0xed234b81, 0x6a8580c2, 0xac07b317, 0x2ba17854,
<     0x783b23d0, 0xff9de893, 0xdf0f94d8, 0x58a95f9b, 0x0b33041f,
<     0x8c95cf5c, 0x73e5570e, 0xf4439c4d, 0xa7d9c7c9, 0x207f0c8a,
<     0x00ed70c1, 0x874bbb82, 0xd4d1e006, 0x53772b45, 0x95f51890,
<     0x1253d3d3, 0x41c98857, 0xc66f4314, 0xe6fd3f5f, 0x615bf41c,
<     0x32c1af98, 0xb56764db, 0x64b4ce73, 0xe3120530, 0xb0885eb4,
<     0x372e95f7, 0x17bce9bc, 0x901a22ff, 0xc380797b, 0x4426b238,
<     0x82a481ed, 0x05024aae, 0x5698112a, 0xd13eda69, 0xf1aca622,
<     0x760a6d61, 0x259036e5, 0xa236fda6, 0xba8ccbe8, 0x3d2a00ab,
<     0x6eb05b2f, 0xe916906c, 0xc984ec27, 0x4e222764, 0x1db87ce0,
<     0x9a1eb7a3, 0x5c9c8476, 0xdb3a4f35, 0x88a014b1, 0x0f06dff2,
<     0x2f94a3b9, 0xa83268fa, 0xfba8337e, 0x7c0ef83d, 0xaddd5295,
<     0x2a7b99d6, 0x79e1c252, 0xfe470911, 0xded5755a, 0x5973be19,
<     0x0ae9e59d, 0x8d4f2ede, 0x4bcd1d0b, 0xcc6bd648, 0x9ff18dcc,
<     0x1857468f, 0x38c53ac4, 0xbf63f187, 0xecf9aa03, 0x6b5f6140,
<     0x942ff912, 0x13893251, 0x401369d5, 0xc7b5a296, 0xe727dedd,
<     0x6081159e, 0x331b4e1a, 0xb4bd8559, 0x723fb68c, 0xf5997dcf,
<     0xa603264b, 0x21a5ed08, 0x01379143, 0x86915a00, 0xd50b0184,
<     0x52adcac7, 0x837e606f, 0x04d8ab2c, 0x5742f0a8, 0xd0e43beb,
<     0xf07647a0, 0x77d08ce3, 0x244ad767, 0xa3ec1c24, 0x656e2ff1,
<     0xe2c8e4b2, 0xb152bf36, 0x36f47475, 0x1666083e, 0x91c0c37d,
<     0xc25a98f9, 0x45fc53ba, 0xe7caae1c, 0x606c655f, 0x33f63edb,
<     0xb450f598, 0x94c289d3, 0x13644290, 0x40fe1914, 0xc758d257,
<     0x01dae182, 0x867c2ac1, 0xd5e67145, 0x5240ba06, 0x72d2c64d,
<     0xf5740d0e, 0xa6ee568a, 0x21489dc9, 0xf09b3761, 0x773dfc22,
<     0x24a7a7a6, 0xa3016ce5, 0x839310ae, 0x0435dbed, 0x57af8069,
<     0xd0094b2a, 0x168b78ff, 0x912db3bc, 0xc2b7e838, 0x4511237b,
<     0x65835f30, 0xe2259473, 0xb1bfcff7, 0x361904b4, 0xc9699ce6,
<     0x4ecf57a5, 0x1d550c21, 0x9af3c762, 0xba61bb29, 0x3dc7706a,
<     0x6e5d2bee, 0xe9fbe0ad, 0x2f79d378, 0xa8df183b, 0xfb4543bf,
<     0x7ce388fc, 0x5c71f4b7, 0xdbd73ff4, 0x884d6470, 0x0febaf33,
<     0xde38059b, 0x599eced8, 0x0a04955c, 0x8da25e1f, 0xad302254,
<     0x2a96e917, 0x790cb293, 0xfeaa79d0, 0x38284a05, 0xbf8e8146,
<     0xec14dac2, 0x6bb21181, 0x4b206dca, 0xcc86a689, 0x9f1cfd0d,
<     0x18ba364e}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x0000000000000000, 0x43cba68700000000, 0xc7903cd400000000,
<     0x845b9a5300000000, 0xcf27087300000000, 0x8cecaef400000000,
<     0x08b734a700000000, 0x4b7c922000000000, 0x9e4f10e600000000,
<     0xdd84b66100000000, 0x59df2c3200000000, 0x1a148ab500000000,
<     0x5168189500000000, 0x12a3be1200000000, 0x96f8244100000000,
<     0xd53382c600000000, 0x7d99511700000000, 0x3e52f79000000000,
<     0xba096dc300000000, 0xf9c2cb4400000000, 0xb2be596400000000,
<     0xf175ffe300000000, 0x752e65b000000000, 0x36e5c33700000000,
<     0xe3d641f100000000, 0xa01de77600000000, 0x24467d2500000000,
<     0x678ddba200000000, 0x2cf1498200000000, 0x6f3aef0500000000,
<     0xeb61755600000000, 0xa8aad3d100000000, 0xfa32a32e00000000,
<     0xb9f905a900000000, 0x3da29ffa00000000, 0x7e69397d00000000,
<     0x3515ab5d00000000, 0x76de0dda00000000, 0xf285978900000000,
<     0xb14e310e00000000, 0x647db3c800000000, 0x27b6154f00000000,
<     0xa3ed8f1c00000000, 0xe026299b00000000, 0xab5abbbb00000000,
<     0xe8911d3c00000000, 0x6cca876f00000000, 0x2f0121e800000000,
<     0x87abf23900000000, 0xc46054be00000000, 0x403bceed00000000,
<     0x03f0686a00000000, 0x488cfa4a00000000, 0x0b475ccd00000000,
<     0x8f1cc69e00000000, 0xccd7601900000000, 0x19e4e2df00000000,
<     0x5a2f445800000000, 0xde74de0b00000000, 0x9dbf788c00000000,
<     0xd6c3eaac00000000, 0x95084c2b00000000, 0x1153d67800000000,
<     0x529870ff00000000, 0xf465465d00000000, 0xb7aee0da00000000,
<     0x33f57a8900000000, 0x703edc0e00000000, 0x3b424e2e00000000,
<     0x7889e8a900000000, 0xfcd272fa00000000, 0xbf19d47d00000000,
<     0x6a2a56bb00000000, 0x29e1f03c00000000, 0xadba6a6f00000000,
<     0xee71cce800000000, 0xa50d5ec800000000, 0xe6c6f84f00000000,
<     0x629d621c00000000, 0x2156c49b00000000, 0x89fc174a00000000,
<     0xca37b1cd00000000, 0x4e6c2b9e00000000, 0x0da78d1900000000,
<     0x46db1f3900000000, 0x0510b9be00000000, 0x814b23ed00000000,
<     0xc280856a00000000, 0x17b307ac00000000, 0x5478a12b00000000,
<     0xd0233b7800000000, 0x93e89dff00000000, 0xd8940fdf00000000,
<     0x9b5fa95800000000, 0x1f04330b00000000, 0x5ccf958c00000000,
<     0x0e57e57300000000, 0x4d9c43f400000000, 0xc9c7d9a700000000,
<     0x8a0c7f2000000000, 0xc170ed0000000000, 0x82bb4b8700000000,
<     0x06e0d1d400000000, 0x452b775300000000, 0x9018f59500000000,
<     0xd3d3531200000000, 0x5788c94100000000, 0x14436fc600000000,
<     0x5f3ffde600000000, 0x1cf45b6100000000, 0x98afc13200000000,
<     0xdb6467b500000000, 0x73ceb46400000000, 0x300512e300000000,
<     0xb45e88b000000000, 0xf7952e3700000000, 0xbce9bc1700000000,
<     0xff221a9000000000, 0x7b7980c300000000, 0x38b2264400000000,
<     0xed81a48200000000, 0xae4a020500000000, 0x2a11985600000000,
<     0x69da3ed100000000, 0x22a6acf100000000, 0x616d0a7600000000,
<     0xe536902500000000, 0xa6fd36a200000000, 0xe8cb8cba00000000,
<     0xab002a3d00000000, 0x2f5bb06e00000000, 0x6c9016e900000000,
<     0x27ec84c900000000, 0x6427224e00000000, 0xe07cb81d00000000,
<     0xa3b71e9a00000000, 0x76849c5c00000000, 0x354f3adb00000000,
<     0xb114a08800000000, 0xf2df060f00000000, 0xb9a3942f00000000,
<     0xfa6832a800000000, 0x7e33a8fb00000000, 0x3df80e7c00000000,
<     0x9552ddad00000000, 0xd6997b2a00000000, 0x52c2e17900000000,
<     0x110947fe00000000, 0x5a75d5de00000000, 0x19be735900000000,
<     0x9de5e90a00000000, 0xde2e4f8d00000000, 0x0b1dcd4b00000000,
<     0x48d66bcc00000000, 0xcc8df19f00000000, 0x8f46571800000000,
<     0xc43ac53800000000, 0x87f163bf00000000, 0x03aaf9ec00000000,
<     0x40615f6b00000000, 0x12f92f9400000000, 0x5132891300000000,
<     0xd569134000000000, 0x96a2b5c700000000, 0xddde27e700000000,
<     0x9e15816000000000, 0x1a4e1b3300000000, 0x5985bdb400000000,
<     0x8cb63f7200000000, 0xcf7d99f500000000, 0x4b2603a600000000,
<     0x08eda52100000000, 0x4391370100000000, 0x005a918600000000,
<     0x84010bd500000000, 0xc7caad5200000000, 0x6f607e8300000000,
<     0x2cabd80400000000, 0xa8f0425700000000, 0xeb3be4d000000000,
<     0xa04776f000000000, 0xe38cd07700000000, 0x67d74a2400000000,
<     0x241ceca300000000, 0xf12f6e6500000000, 0xb2e4c8e200000000,
<     0x36bf52b100000000, 0x7574f43600000000, 0x3e08661600000000,
<     0x7dc3c09100000000, 0xf9985ac200000000, 0xba53fc4500000000,
<     0x1caecae700000000, 0x5f656c6000000000, 0xdb3ef63300000000,
<     0x98f550b400000000, 0xd389c29400000000, 0x9042641300000000,
<     0x1419fe4000000000, 0x57d258c700000000, 0x82e1da0100000000,
<     0xc12a7c8600000000, 0x4571e6d500000000, 0x06ba405200000000,
<     0x4dc6d27200000000, 0x0e0d74f500000000, 0x8a56eea600000000,
<     0xc99d482100000000, 0x61379bf000000000, 0x22fc3d7700000000,
<     0xa6a7a72400000000, 0xe56c01a300000000, 0xae10938300000000,
<     0xeddb350400000000, 0x6980af5700000000, 0x2a4b09d000000000,
<     0xff788b1600000000, 0xbcb32d9100000000, 0x38e8b7c200000000,
<     0x7b23114500000000, 0x305f836500000000, 0x739425e200000000,
<     0xf7cfbfb100000000, 0xb404193600000000, 0xe69c69c900000000,
<     0xa557cf4e00000000, 0x210c551d00000000, 0x62c7f39a00000000,
<     0x29bb61ba00000000, 0x6a70c73d00000000, 0xee2b5d6e00000000,
<     0xade0fbe900000000, 0x78d3792f00000000, 0x3b18dfa800000000,
<     0xbf4345fb00000000, 0xfc88e37c00000000, 0xb7f4715c00000000,
<     0xf43fd7db00000000, 0x70644d8800000000, 0x33afeb0f00000000,
<     0x9b0538de00000000, 0xd8ce9e5900000000, 0x5c95040a00000000,
<     0x1f5ea28d00000000, 0x542230ad00000000, 0x17e9962a00000000,
<     0x93b20c7900000000, 0xd079aafe00000000, 0x054a283800000000,
<     0x46818ebf00000000, 0xc2da14ec00000000, 0x8111b26b00000000,
<     0xca6d204b00000000, 0x89a686cc00000000, 0x0dfd1c9f00000000,
<     0x4e36ba1800000000},
<    {0x0000000000000000, 0xe1b652ef00000000, 0x836bd40500000000,
<     0x62dd86ea00000000, 0x06d7a80b00000000, 0xe761fae400000000,
<     0x85bc7c0e00000000, 0x640a2ee100000000, 0x0cae511700000000,
<     0xed1803f800000000, 0x8fc5851200000000, 0x6e73d7fd00000000,
<     0x0a79f91c00000000, 0xebcfabf300000000, 0x89122d1900000000,
<     0x68a47ff600000000, 0x185ca32e00000000, 0xf9eaf1c100000000,
<     0x9b37772b00000000, 0x7a8125c400000000, 0x1e8b0b2500000000,
<     0xff3d59ca00000000, 0x9de0df2000000000, 0x7c568dcf00000000,
<     0x14f2f23900000000, 0xf544a0d600000000, 0x9799263c00000000,
<     0x762f74d300000000, 0x12255a3200000000, 0xf39308dd00000000,
<     0x914e8e3700000000, 0x70f8dcd800000000, 0x30b8465d00000000,
<     0xd10e14b200000000, 0xb3d3925800000000, 0x5265c0b700000000,
<     0x366fee5600000000, 0xd7d9bcb900000000, 0xb5043a5300000000,
<     0x54b268bc00000000, 0x3c16174a00000000, 0xdda045a500000000,
<     0xbf7dc34f00000000, 0x5ecb91a000000000, 0x3ac1bf4100000000,
<     0xdb77edae00000000, 0xb9aa6b4400000000, 0x581c39ab00000000,
<     0x28e4e57300000000, 0xc952b79c00000000, 0xab8f317600000000,
<     0x4a39639900000000, 0x2e334d7800000000, 0xcf851f9700000000,
<     0xad58997d00000000, 0x4ceecb9200000000, 0x244ab46400000000,
<     0xc5fce68b00000000, 0xa721606100000000, 0x4697328e00000000,
<     0x229d1c6f00000000, 0xc32b4e8000000000, 0xa1f6c86a00000000,
<     0x40409a8500000000, 0x60708dba00000000, 0x81c6df5500000000,
<     0xe31b59bf00000000, 0x02ad0b5000000000, 0x66a725b100000000,
<     0x8711775e00000000, 0xe5ccf1b400000000, 0x047aa35b00000000,
<     0x6cdedcad00000000, 0x8d688e4200000000, 0xefb508a800000000,
<     0x0e035a4700000000, 0x6a0974a600000000, 0x8bbf264900000000,
<     0xe962a0a300000000, 0x08d4f24c00000000, 0x782c2e9400000000,
<     0x999a7c7b00000000, 0xfb47fa9100000000, 0x1af1a87e00000000,
<     0x7efb869f00000000, 0x9f4dd47000000000, 0xfd90529a00000000,
<     0x1c26007500000000, 0x74827f8300000000, 0x95342d6c00000000,
<     0xf7e9ab8600000000, 0x165ff96900000000, 0x7255d78800000000,
<     0x93e3856700000000, 0xf13e038d00000000, 0x1088516200000000,
<     0x50c8cbe700000000, 0xb17e990800000000, 0xd3a31fe200000000,
<     0x32154d0d00000000, 0x561f63ec00000000, 0xb7a9310300000000,
<     0xd574b7e900000000, 0x34c2e50600000000, 0x5c669af000000000,
<     0xbdd0c81f00000000, 0xdf0d4ef500000000, 0x3ebb1c1a00000000,
<     0x5ab132fb00000000, 0xbb07601400000000, 0xd9dae6fe00000000,
<     0x386cb41100000000, 0x489468c900000000, 0xa9223a2600000000,
<     0xcbffbccc00000000, 0x2a49ee2300000000, 0x4e43c0c200000000,
<     0xaff5922d00000000, 0xcd2814c700000000, 0x2c9e462800000000,
<     0x443a39de00000000, 0xa58c6b3100000000, 0xc751eddb00000000,
<     0x26e7bf3400000000, 0x42ed91d500000000, 0xa35bc33a00000000,
<     0xc18645d000000000, 0x2030173f00000000, 0x81e66bae00000000,
<     0x6050394100000000, 0x028dbfab00000000, 0xe33bed4400000000,
<     0x8731c3a500000000, 0x6687914a00000000, 0x045a17a000000000,
<     0xe5ec454f00000000, 0x8d483ab900000000, 0x6cfe685600000000,
<     0x0e23eebc00000000, 0xef95bc5300000000, 0x8b9f92b200000000,
<     0x6a29c05d00000000, 0x08f446b700000000, 0xe942145800000000,
<     0x99bac88000000000, 0x780c9a6f00000000, 0x1ad11c8500000000,
<     0xfb674e6a00000000, 0x9f6d608b00000000, 0x7edb326400000000,
<     0x1c06b48e00000000, 0xfdb0e66100000000, 0x9514999700000000,
<     0x74a2cb7800000000, 0x167f4d9200000000, 0xf7c91f7d00000000,
<     0x93c3319c00000000, 0x7275637300000000, 0x10a8e59900000000,
<     0xf11eb77600000000, 0xb15e2df300000000, 0x50e87f1c00000000,
<     0x3235f9f600000000, 0xd383ab1900000000, 0xb78985f800000000,
<     0x563fd71700000000, 0x34e251fd00000000, 0xd554031200000000,
<     0xbdf07ce400000000, 0x5c462e0b00000000, 0x3e9ba8e100000000,
<     0xdf2dfa0e00000000, 0xbb27d4ef00000000, 0x5a91860000000000,
<     0x384c00ea00000000, 0xd9fa520500000000, 0xa9028edd00000000,
<     0x48b4dc3200000000, 0x2a695ad800000000, 0xcbdf083700000000,
<     0xafd526d600000000, 0x4e63743900000000, 0x2cbef2d300000000,
<     0xcd08a03c00000000, 0xa5acdfca00000000, 0x441a8d2500000000,
<     0x26c70bcf00000000, 0xc771592000000000, 0xa37b77c100000000,
<     0x42cd252e00000000, 0x2010a3c400000000, 0xc1a6f12b00000000,
<     0xe196e61400000000, 0x0020b4fb00000000, 0x62fd321100000000,
<     0x834b60fe00000000, 0xe7414e1f00000000, 0x06f71cf000000000,
<     0x642a9a1a00000000, 0x859cc8f500000000, 0xed38b70300000000,
<     0x0c8ee5ec00000000, 0x6e53630600000000, 0x8fe531e900000000,
<     0xebef1f0800000000, 0x0a594de700000000, 0x6884cb0d00000000,
<     0x893299e200000000, 0xf9ca453a00000000, 0x187c17d500000000,
<     0x7aa1913f00000000, 0x9b17c3d000000000, 0xff1ded3100000000,
<     0x1eabbfde00000000, 0x7c76393400000000, 0x9dc06bdb00000000,
<     0xf564142d00000000, 0x14d246c200000000, 0x760fc02800000000,
<     0x97b992c700000000, 0xf3b3bc2600000000, 0x1205eec900000000,
<     0x70d8682300000000, 0x916e3acc00000000, 0xd12ea04900000000,
<     0x3098f2a600000000, 0x5245744c00000000, 0xb3f326a300000000,
<     0xd7f9084200000000, 0x364f5aad00000000, 0x5492dc4700000000,
<     0xb5248ea800000000, 0xdd80f15e00000000, 0x3c36a3b100000000,
<     0x5eeb255b00000000, 0xbf5d77b400000000, 0xdb57595500000000,
<     0x3ae10bba00000000, 0x583c8d5000000000, 0xb98adfbf00000000,
<     0xc972036700000000, 0x28c4518800000000, 0x4a19d76200000000,
<     0xabaf858d00000000, 0xcfa5ab6c00000000, 0x2e13f98300000000,
<     0x4cce7f6900000000, 0xad782d8600000000, 0xc5dc527000000000,
<     0x246a009f00000000, 0x46b7867500000000, 0xa701d49a00000000,
<     0xc30bfa7b00000000, 0x22bda89400000000, 0x40602e7e00000000,
<     0xa1d67c9100000000},
<    {0x0000000000000000, 0x5880e2d700000000, 0xf106b47400000000,
<     0xa98656a300000000, 0xe20d68e900000000, 0xba8d8a3e00000000,
<     0x130bdc9d00000000, 0x4b8b3e4a00000000, 0x851da10900000000,
<     0xdd9d43de00000000, 0x741b157d00000000, 0x2c9bf7aa00000000,
<     0x6710c9e000000000, 0x3f902b3700000000, 0x96167d9400000000,
<     0xce969f4300000000, 0x0a3b421300000000, 0x52bba0c400000000,
<     0xfb3df66700000000, 0xa3bd14b000000000, 0xe8362afa00000000,
<     0xb0b6c82d00000000, 0x19309e8e00000000, 0x41b07c5900000000,
<     0x8f26e31a00000000, 0xd7a601cd00000000, 0x7e20576e00000000,
<     0x26a0b5b900000000, 0x6d2b8bf300000000, 0x35ab692400000000,
<     0x9c2d3f8700000000, 0xc4addd5000000000, 0x1476842600000000,
<     0x4cf666f100000000, 0xe570305200000000, 0xbdf0d28500000000,
<     0xf67beccf00000000, 0xaefb0e1800000000, 0x077d58bb00000000,
<     0x5ffdba6c00000000, 0x916b252f00000000, 0xc9ebc7f800000000,
<     0x606d915b00000000, 0x38ed738c00000000, 0x73664dc600000000,
<     0x2be6af1100000000, 0x8260f9b200000000, 0xdae01b6500000000,
<     0x1e4dc63500000000, 0x46cd24e200000000, 0xef4b724100000000,
<     0xb7cb909600000000, 0xfc40aedc00000000, 0xa4c04c0b00000000,
<     0x0d461aa800000000, 0x55c6f87f00000000, 0x9b50673c00000000,
<     0xc3d085eb00000000, 0x6a56d34800000000, 0x32d6319f00000000,
<     0x795d0fd500000000, 0x21dded0200000000, 0x885bbba100000000,
<     0xd0db597600000000, 0x28ec084d00000000, 0x706cea9a00000000,
<     0xd9eabc3900000000, 0x816a5eee00000000, 0xcae160a400000000,
<     0x9261827300000000, 0x3be7d4d000000000, 0x6367360700000000,
<     0xadf1a94400000000, 0xf5714b9300000000, 0x5cf71d3000000000,
<     0x0477ffe700000000, 0x4ffcc1ad00000000, 0x177c237a00000000,
<     0xbefa75d900000000, 0xe67a970e00000000, 0x22d74a5e00000000,
<     0x7a57a88900000000, 0xd3d1fe2a00000000, 0x8b511cfd00000000,
<     0xc0da22b700000000, 0x985ac06000000000, 0x31dc96c300000000,
<     0x695c741400000000, 0xa7caeb5700000000, 0xff4a098000000000,
<     0x56cc5f2300000000, 0x0e4cbdf400000000, 0x45c783be00000000,
<     0x1d47616900000000, 0xb4c137ca00000000, 0xec41d51d00000000,
<     0x3c9a8c6b00000000, 0x641a6ebc00000000, 0xcd9c381f00000000,
<     0x951cdac800000000, 0xde97e48200000000, 0x8617065500000000,
<     0x2f9150f600000000, 0x7711b22100000000, 0xb9872d6200000000,
<     0xe107cfb500000000, 0x4881991600000000, 0x10017bc100000000,
<     0x5b8a458b00000000, 0x030aa75c00000000, 0xaa8cf1ff00000000,
<     0xf20c132800000000, 0x36a1ce7800000000, 0x6e212caf00000000,
<     0xc7a77a0c00000000, 0x9f2798db00000000, 0xd4aca69100000000,
<     0x8c2c444600000000, 0x25aa12e500000000, 0x7d2af03200000000,
<     0xb3bc6f7100000000, 0xeb3c8da600000000, 0x42badb0500000000,
<     0x1a3a39d200000000, 0x51b1079800000000, 0x0931e54f00000000,
<     0xa0b7b3ec00000000, 0xf837513b00000000, 0x50d8119a00000000,
<     0x0858f34d00000000, 0xa1dea5ee00000000, 0xf95e473900000000,
<     0xb2d5797300000000, 0xea559ba400000000, 0x43d3cd0700000000,
<     0x1b532fd000000000, 0xd5c5b09300000000, 0x8d45524400000000,
<     0x24c304e700000000, 0x7c43e63000000000, 0x37c8d87a00000000,
<     0x6f483aad00000000, 0xc6ce6c0e00000000, 0x9e4e8ed900000000,
<     0x5ae3538900000000, 0x0263b15e00000000, 0xabe5e7fd00000000,
<     0xf365052a00000000, 0xb8ee3b6000000000, 0xe06ed9b700000000,
<     0x49e88f1400000000, 0x11686dc300000000, 0xdffef28000000000,
<     0x877e105700000000, 0x2ef846f400000000, 0x7678a42300000000,
<     0x3df39a6900000000, 0x657378be00000000, 0xccf52e1d00000000,
<     0x9475ccca00000000, 0x44ae95bc00000000, 0x1c2e776b00000000,
<     0xb5a821c800000000, 0xed28c31f00000000, 0xa6a3fd5500000000,
<     0xfe231f8200000000, 0x57a5492100000000, 0x0f25abf600000000,
<     0xc1b334b500000000, 0x9933d66200000000, 0x30b580c100000000,
<     0x6835621600000000, 0x23be5c5c00000000, 0x7b3ebe8b00000000,
<     0xd2b8e82800000000, 0x8a380aff00000000, 0x4e95d7af00000000,
<     0x1615357800000000, 0xbf9363db00000000, 0xe713810c00000000,
<     0xac98bf4600000000, 0xf4185d9100000000, 0x5d9e0b3200000000,
<     0x051ee9e500000000, 0xcb8876a600000000, 0x9308947100000000,
<     0x3a8ec2d200000000, 0x620e200500000000, 0x29851e4f00000000,
<     0x7105fc9800000000, 0xd883aa3b00000000, 0x800348ec00000000,
<     0x783419d700000000, 0x20b4fb0000000000, 0x8932ada300000000,
<     0xd1b24f7400000000, 0x9a39713e00000000, 0xc2b993e900000000,
<     0x6b3fc54a00000000, 0x33bf279d00000000, 0xfd29b8de00000000,
<     0xa5a95a0900000000, 0x0c2f0caa00000000, 0x54afee7d00000000,
<     0x1f24d03700000000, 0x47a432e000000000, 0xee22644300000000,
<     0xb6a2869400000000, 0x720f5bc400000000, 0x2a8fb91300000000,
<     0x8309efb000000000, 0xdb890d6700000000, 0x9002332d00000000,
<     0xc882d1fa00000000, 0x6104875900000000, 0x3984658e00000000,
<     0xf712facd00000000, 0xaf92181a00000000, 0x06144eb900000000,
<     0x5e94ac6e00000000, 0x151f922400000000, 0x4d9f70f300000000,
<     0xe419265000000000, 0xbc99c48700000000, 0x6c429df100000000,
<     0x34c27f2600000000, 0x9d44298500000000, 0xc5c4cb5200000000,
<     0x8e4ff51800000000, 0xd6cf17cf00000000, 0x7f49416c00000000,
<     0x27c9a3bb00000000, 0xe95f3cf800000000, 0xb1dfde2f00000000,
<     0x1859888c00000000, 0x40d96a5b00000000, 0x0b52541100000000,
<     0x53d2b6c600000000, 0xfa54e06500000000, 0xa2d402b200000000,
<     0x6679dfe200000000, 0x3ef93d3500000000, 0x977f6b9600000000,
<     0xcfff894100000000, 0x8474b70b00000000, 0xdcf455dc00000000,
<     0x7572037f00000000, 0x2df2e1a800000000, 0xe3647eeb00000000,
<     0xbbe49c3c00000000, 0x1262ca9f00000000, 0x4ae2284800000000,
<     0x0169160200000000, 0x59e9f4d500000000, 0xf06fa27600000000,
<     0xa8ef40a100000000},
<    {0x0000000000000000, 0x463b676500000000, 0x8c76ceca00000000,
<     0xca4da9af00000000, 0x59ebed4e00000000, 0x1fd08a2b00000000,
<     0xd59d238400000000, 0x93a644e100000000, 0xb2d6db9d00000000,
<     0xf4edbcf800000000, 0x3ea0155700000000, 0x789b723200000000,
<     0xeb3d36d300000000, 0xad0651b600000000, 0x674bf81900000000,
<     0x21709f7c00000000, 0x25abc6e000000000, 0x6390a18500000000,
<     0xa9dd082a00000000, 0xefe66f4f00000000, 0x7c402bae00000000,
<     0x3a7b4ccb00000000, 0xf036e56400000000, 0xb60d820100000000,
<     0x977d1d7d00000000, 0xd1467a1800000000, 0x1b0bd3b700000000,
<     0x5d30b4d200000000, 0xce96f03300000000, 0x88ad975600000000,
<     0x42e03ef900000000, 0x04db599c00000000, 0x0b50fc1a00000000,
<     0x4d6b9b7f00000000, 0x872632d000000000, 0xc11d55b500000000,
<     0x52bb115400000000, 0x1480763100000000, 0xdecddf9e00000000,
<     0x98f6b8fb00000000, 0xb986278700000000, 0xffbd40e200000000,
<     0x35f0e94d00000000, 0x73cb8e2800000000, 0xe06dcac900000000,
<     0xa656adac00000000, 0x6c1b040300000000, 0x2a20636600000000,
<     0x2efb3afa00000000, 0x68c05d9f00000000, 0xa28df43000000000,
<     0xe4b6935500000000, 0x7710d7b400000000, 0x312bb0d100000000,
<     0xfb66197e00000000, 0xbd5d7e1b00000000, 0x9c2de16700000000,
<     0xda16860200000000, 0x105b2fad00000000, 0x566048c800000000,
<     0xc5c60c2900000000, 0x83fd6b4c00000000, 0x49b0c2e300000000,
<     0x0f8ba58600000000, 0x16a0f83500000000, 0x509b9f5000000000,
<     0x9ad636ff00000000, 0xdced519a00000000, 0x4f4b157b00000000,
<     0x0970721e00000000, 0xc33ddbb100000000, 0x8506bcd400000000,
<     0xa47623a800000000, 0xe24d44cd00000000, 0x2800ed6200000000,
<     0x6e3b8a0700000000, 0xfd9dcee600000000, 0xbba6a98300000000,
<     0x71eb002c00000000, 0x37d0674900000000, 0x330b3ed500000000,
<     0x753059b000000000, 0xbf7df01f00000000, 0xf946977a00000000,
<     0x6ae0d39b00000000, 0x2cdbb4fe00000000, 0xe6961d5100000000,
<     0xa0ad7a3400000000, 0x81dde54800000000, 0xc7e6822d00000000,
<     0x0dab2b8200000000, 0x4b904ce700000000, 0xd836080600000000,
<     0x9e0d6f6300000000, 0x5440c6cc00000000, 0x127ba1a900000000,
<     0x1df0042f00000000, 0x5bcb634a00000000, 0x9186cae500000000,
<     0xd7bdad8000000000, 0x441be96100000000, 0x02208e0400000000,
<     0xc86d27ab00000000, 0x8e5640ce00000000, 0xaf26dfb200000000,
<     0xe91db8d700000000, 0x2350117800000000, 0x656b761d00000000,
<     0xf6cd32fc00000000, 0xb0f6559900000000, 0x7abbfc3600000000,
<     0x3c809b5300000000, 0x385bc2cf00000000, 0x7e60a5aa00000000,
<     0xb42d0c0500000000, 0xf2166b6000000000, 0x61b02f8100000000,
<     0x278b48e400000000, 0xedc6e14b00000000, 0xabfd862e00000000,
<     0x8a8d195200000000, 0xccb67e3700000000, 0x06fbd79800000000,
<     0x40c0b0fd00000000, 0xd366f41c00000000, 0x955d937900000000,
<     0x5f103ad600000000, 0x192b5db300000000, 0x2c40f16b00000000,
<     0x6a7b960e00000000, 0xa0363fa100000000, 0xe60d58c400000000,
<     0x75ab1c2500000000, 0x33907b4000000000, 0xf9ddd2ef00000000,
<     0xbfe6b58a00000000, 0x9e962af600000000, 0xd8ad4d9300000000,
<     0x12e0e43c00000000, 0x54db835900000000, 0xc77dc7b800000000,
<     0x8146a0dd00000000, 0x4b0b097200000000, 0x0d306e1700000000,
<     0x09eb378b00000000, 0x4fd050ee00000000, 0x859df94100000000,
<     0xc3a69e2400000000, 0x5000dac500000000, 0x163bbda000000000,
<     0xdc76140f00000000, 0x9a4d736a00000000, 0xbb3dec1600000000,
<     0xfd068b7300000000, 0x374b22dc00000000, 0x717045b900000000,
<     0xe2d6015800000000, 0xa4ed663d00000000, 0x6ea0cf9200000000,
<     0x289ba8f700000000, 0x27100d7100000000, 0x612b6a1400000000,
<     0xab66c3bb00000000, 0xed5da4de00000000, 0x7efbe03f00000000,
<     0x38c0875a00000000, 0xf28d2ef500000000, 0xb4b6499000000000,
<     0x95c6d6ec00000000, 0xd3fdb18900000000, 0x19b0182600000000,
<     0x5f8b7f4300000000, 0xcc2d3ba200000000, 0x8a165cc700000000,
<     0x405bf56800000000, 0x0660920d00000000, 0x02bbcb9100000000,
<     0x4480acf400000000, 0x8ecd055b00000000, 0xc8f6623e00000000,
<     0x5b5026df00000000, 0x1d6b41ba00000000, 0xd726e81500000000,
<     0x911d8f7000000000, 0xb06d100c00000000, 0xf656776900000000,
<     0x3c1bdec600000000, 0x7a20b9a300000000, 0xe986fd4200000000,
<     0xafbd9a2700000000, 0x65f0338800000000, 0x23cb54ed00000000,
<     0x3ae0095e00000000, 0x7cdb6e3b00000000, 0xb696c79400000000,
<     0xf0ada0f100000000, 0x630be41000000000, 0x2530837500000000,
<     0xef7d2ada00000000, 0xa9464dbf00000000, 0x8836d2c300000000,
<     0xce0db5a600000000, 0x04401c0900000000, 0x427b7b6c00000000,
<     0xd1dd3f8d00000000, 0x97e658e800000000, 0x5dabf14700000000,
<     0x1b90962200000000, 0x1f4bcfbe00000000, 0x5970a8db00000000,
<     0x933d017400000000, 0xd506661100000000, 0x46a022f000000000,
<     0x009b459500000000, 0xcad6ec3a00000000, 0x8ced8b5f00000000,
<     0xad9d142300000000, 0xeba6734600000000, 0x21ebdae900000000,
<     0x67d0bd8c00000000, 0xf476f96d00000000, 0xb24d9e0800000000,
<     0x780037a700000000, 0x3e3b50c200000000, 0x31b0f54400000000,
<     0x778b922100000000, 0xbdc63b8e00000000, 0xfbfd5ceb00000000,
<     0x685b180a00000000, 0x2e607f6f00000000, 0xe42dd6c000000000,
<     0xa216b1a500000000, 0x83662ed900000000, 0xc55d49bc00000000,
<     0x0f10e01300000000, 0x492b877600000000, 0xda8dc39700000000,
<     0x9cb6a4f200000000, 0x56fb0d5d00000000, 0x10c06a3800000000,
<     0x141b33a400000000, 0x522054c100000000, 0x986dfd6e00000000,
<     0xde569a0b00000000, 0x4df0deea00000000, 0x0bcbb98f00000000,
<     0xc186102000000000, 0x87bd774500000000, 0xa6cde83900000000,
<     0xe0f68f5c00000000, 0x2abb26f300000000, 0x6c80419600000000,
<     0xff26057700000000, 0xb91d621200000000, 0x7350cbbd00000000,
<     0x356bacd800000000},
<    {0x0000000000000000, 0x9e83da9f00000000, 0x7d01c4e400000000,
<     0xe3821e7b00000000, 0xbb04f91200000000, 0x2587238d00000000,
<     0xc6053df600000000, 0x5886e76900000000, 0x7609f22500000000,
<     0xe88a28ba00000000, 0x0b0836c100000000, 0x958bec5e00000000,
<     0xcd0d0b3700000000, 0x538ed1a800000000, 0xb00ccfd300000000,
<     0x2e8f154c00000000, 0xec12e44b00000000, 0x72913ed400000000,
<     0x911320af00000000, 0x0f90fa3000000000, 0x57161d5900000000,
<     0xc995c7c600000000, 0x2a17d9bd00000000, 0xb494032200000000,
<     0x9a1b166e00000000, 0x0498ccf100000000, 0xe71ad28a00000000,
<     0x7999081500000000, 0x211fef7c00000000, 0xbf9c35e300000000,
<     0x5c1e2b9800000000, 0xc29df10700000000, 0xd825c89700000000,
<     0x46a6120800000000, 0xa5240c7300000000, 0x3ba7d6ec00000000,
<     0x6321318500000000, 0xfda2eb1a00000000, 0x1e20f56100000000,
<     0x80a32ffe00000000, 0xae2c3ab200000000, 0x30afe02d00000000,
<     0xd32dfe5600000000, 0x4dae24c900000000, 0x1528c3a000000000,
<     0x8bab193f00000000, 0x6829074400000000, 0xf6aadddb00000000,
<     0x34372cdc00000000, 0xaab4f64300000000, 0x4936e83800000000,
<     0xd7b532a700000000, 0x8f33d5ce00000000, 0x11b00f5100000000,
<     0xf232112a00000000, 0x6cb1cbb500000000, 0x423edef900000000,
<     0xdcbd046600000000, 0x3f3f1a1d00000000, 0xa1bcc08200000000,
<     0xf93a27eb00000000, 0x67b9fd7400000000, 0x843be30f00000000,
<     0x1ab8399000000000, 0xf14de1f400000000, 0x6fce3b6b00000000,
<     0x8c4c251000000000, 0x12cfff8f00000000, 0x4a4918e600000000,
<     0xd4cac27900000000, 0x3748dc0200000000, 0xa9cb069d00000000,
<     0x874413d100000000, 0x19c7c94e00000000, 0xfa45d73500000000,
<     0x64c60daa00000000, 0x3c40eac300000000, 0xa2c3305c00000000,
<     0x41412e2700000000, 0xdfc2f4b800000000, 0x1d5f05bf00000000,
<     0x83dcdf2000000000, 0x605ec15b00000000, 0xfedd1bc400000000,
<     0xa65bfcad00000000, 0x38d8263200000000, 0xdb5a384900000000,
<     0x45d9e2d600000000, 0x6b56f79a00000000, 0xf5d52d0500000000,
<     0x1657337e00000000, 0x88d4e9e100000000, 0xd0520e8800000000,
<     0x4ed1d41700000000, 0xad53ca6c00000000, 0x33d010f300000000,
<     0x2968296300000000, 0xb7ebf3fc00000000, 0x5469ed8700000000,
<     0xcaea371800000000, 0x926cd07100000000, 0x0cef0aee00000000,
<     0xef6d149500000000, 0x71eece0a00000000, 0x5f61db4600000000,
<     0xc1e201d900000000, 0x22601fa200000000, 0xbce3c53d00000000,
<     0xe465225400000000, 0x7ae6f8cb00000000, 0x9964e6b000000000,
<     0x07e73c2f00000000, 0xc57acd2800000000, 0x5bf917b700000000,
<     0xb87b09cc00000000, 0x26f8d35300000000, 0x7e7e343a00000000,
<     0xe0fdeea500000000, 0x037ff0de00000000, 0x9dfc2a4100000000,
<     0xb3733f0d00000000, 0x2df0e59200000000, 0xce72fbe900000000,
<     0x50f1217600000000, 0x0877c61f00000000, 0x96f41c8000000000,
<     0x757602fb00000000, 0xebf5d86400000000, 0xa39db33200000000,
<     0x3d1e69ad00000000, 0xde9c77d600000000, 0x401fad4900000000,
<     0x18994a2000000000, 0x861a90bf00000000, 0x65988ec400000000,
<     0xfb1b545b00000000, 0xd594411700000000, 0x4b179b8800000000,
<     0xa89585f300000000, 0x36165f6c00000000, 0x6e90b80500000000,
<     0xf013629a00000000, 0x13917ce100000000, 0x8d12a67e00000000,
<     0x4f8f577900000000, 0xd10c8de600000000, 0x328e939d00000000,
<     0xac0d490200000000, 0xf48bae6b00000000, 0x6a0874f400000000,
<     0x898a6a8f00000000, 0x1709b01000000000, 0x3986a55c00000000,
<     0xa7057fc300000000, 0x448761b800000000, 0xda04bb2700000000,
<     0x82825c4e00000000, 0x1c0186d100000000, 0xff8398aa00000000,
<     0x6100423500000000, 0x7bb87ba500000000, 0xe53ba13a00000000,
<     0x06b9bf4100000000, 0x983a65de00000000, 0xc0bc82b700000000,
<     0x5e3f582800000000, 0xbdbd465300000000, 0x233e9ccc00000000,
<     0x0db1898000000000, 0x9332531f00000000, 0x70b04d6400000000,
<     0xee3397fb00000000, 0xb6b5709200000000, 0x2836aa0d00000000,
<     0xcbb4b47600000000, 0x55376ee900000000, 0x97aa9fee00000000,
<     0x0929457100000000, 0xeaab5b0a00000000, 0x7428819500000000,
<     0x2cae66fc00000000, 0xb22dbc6300000000, 0x51afa21800000000,
<     0xcf2c788700000000, 0xe1a36dcb00000000, 0x7f20b75400000000,
<     0x9ca2a92f00000000, 0x022173b000000000, 0x5aa794d900000000,
<     0xc4244e4600000000, 0x27a6503d00000000, 0xb9258aa200000000,
<     0x52d052c600000000, 0xcc53885900000000, 0x2fd1962200000000,
<     0xb1524cbd00000000, 0xe9d4abd400000000, 0x7757714b00000000,
<     0x94d56f3000000000, 0x0a56b5af00000000, 0x24d9a0e300000000,
<     0xba5a7a7c00000000, 0x59d8640700000000, 0xc75bbe9800000000,
<     0x9fdd59f100000000, 0x015e836e00000000, 0xe2dc9d1500000000,
<     0x7c5f478a00000000, 0xbec2b68d00000000, 0x20416c1200000000,
<     0xc3c3726900000000, 0x5d40a8f600000000, 0x05c64f9f00000000,
<     0x9b45950000000000, 0x78c78b7b00000000, 0xe64451e400000000,
<     0xc8cb44a800000000, 0x56489e3700000000, 0xb5ca804c00000000,
<     0x2b495ad300000000, 0x73cfbdba00000000, 0xed4c672500000000,
<     0x0ece795e00000000, 0x904da3c100000000, 0x8af59a5100000000,
<     0x147640ce00000000, 0xf7f45eb500000000, 0x6977842a00000000,
<     0x31f1634300000000, 0xaf72b9dc00000000, 0x4cf0a7a700000000,
<     0xd2737d3800000000, 0xfcfc687400000000, 0x627fb2eb00000000,
<     0x81fdac9000000000, 0x1f7e760f00000000, 0x47f8916600000000,
<     0xd97b4bf900000000, 0x3af9558200000000, 0xa47a8f1d00000000,
<     0x66e77e1a00000000, 0xf864a48500000000, 0x1be6bafe00000000,
<     0x8565606100000000, 0xdde3870800000000, 0x43605d9700000000,
<     0xa0e243ec00000000, 0x3e61997300000000, 0x10ee8c3f00000000,
<     0x8e6d56a000000000, 0x6def48db00000000, 0xf36c924400000000,
<     0xabea752d00000000, 0x3569afb200000000, 0xd6ebb1c900000000,
<     0x48686b5600000000},
<    {0x0000000000000000, 0xc064281700000000, 0x80c9502e00000000,
<     0x40ad783900000000, 0x0093a15c00000000, 0xc0f7894b00000000,
<     0x805af17200000000, 0x403ed96500000000, 0x002643b900000000,
<     0xc0426bae00000000, 0x80ef139700000000, 0x408b3b8000000000,
<     0x00b5e2e500000000, 0xc0d1caf200000000, 0x807cb2cb00000000,
<     0x40189adc00000000, 0x414af7a900000000, 0x812edfbe00000000,
<     0xc183a78700000000, 0x01e78f9000000000, 0x41d956f500000000,
<     0x81bd7ee200000000, 0xc11006db00000000, 0x01742ecc00000000,
<     0x416cb41000000000, 0x81089c0700000000, 0xc1a5e43e00000000,
<     0x01c1cc2900000000, 0x41ff154c00000000, 0x819b3d5b00000000,
<     0xc136456200000000, 0x01526d7500000000, 0xc3929f8800000000,
<     0x03f6b79f00000000, 0x435bcfa600000000, 0x833fe7b100000000,
<     0xc3013ed400000000, 0x036516c300000000, 0x43c86efa00000000,
<     0x83ac46ed00000000, 0xc3b4dc3100000000, 0x03d0f42600000000,
<     0x437d8c1f00000000, 0x8319a40800000000, 0xc3277d6d00000000,
<     0x0343557a00000000, 0x43ee2d4300000000, 0x838a055400000000,
<     0x82d8682100000000, 0x42bc403600000000, 0x0211380f00000000,
<     0xc275101800000000, 0x824bc97d00000000, 0x422fe16a00000000,
<     0x0282995300000000, 0xc2e6b14400000000, 0x82fe2b9800000000,
<     0x429a038f00000000, 0x02377bb600000000, 0xc25353a100000000,
<     0x826d8ac400000000, 0x4209a2d300000000, 0x02a4daea00000000,
<     0xc2c0f2fd00000000, 0xc7234eca00000000, 0x074766dd00000000,
<     0x47ea1ee400000000, 0x878e36f300000000, 0xc7b0ef9600000000,
<     0x07d4c78100000000, 0x4779bfb800000000, 0x871d97af00000000,
<     0xc7050d7300000000, 0x0761256400000000, 0x47cc5d5d00000000,
<     0x87a8754a00000000, 0xc796ac2f00000000, 0x07f2843800000000,
<     0x475ffc0100000000, 0x873bd41600000000, 0x8669b96300000000,
<     0x460d917400000000, 0x06a0e94d00000000, 0xc6c4c15a00000000,
<     0x86fa183f00000000, 0x469e302800000000, 0x0633481100000000,
<     0xc657600600000000, 0x864ffada00000000, 0x462bd2cd00000000,
<     0x0686aaf400000000, 0xc6e282e300000000, 0x86dc5b8600000000,
<     0x46b8739100000000, 0x06150ba800000000, 0xc67123bf00000000,
<     0x04b1d14200000000, 0xc4d5f95500000000, 0x8478816c00000000,
<     0x441ca97b00000000, 0x0422701e00000000, 0xc446580900000000,
<     0x84eb203000000000, 0x448f082700000000, 0x049792fb00000000,
<     0xc4f3baec00000000, 0x845ec2d500000000, 0x443aeac200000000,
<     0x040433a700000000, 0xc4601bb000000000, 0x84cd638900000000,
<     0x44a94b9e00000000, 0x45fb26eb00000000, 0x859f0efc00000000,
<     0xc53276c500000000, 0x05565ed200000000, 0x456887b700000000,
<     0x850cafa000000000, 0xc5a1d79900000000, 0x05c5ff8e00000000,
<     0x45dd655200000000, 0x85b94d4500000000, 0xc514357c00000000,
<     0x05701d6b00000000, 0x454ec40e00000000, 0x852aec1900000000,
<     0xc587942000000000, 0x05e3bc3700000000, 0xcf41ed4f00000000,
<     0x0f25c55800000000, 0x4f88bd6100000000, 0x8fec957600000000,
<     0xcfd24c1300000000, 0x0fb6640400000000, 0x4f1b1c3d00000000,
<     0x8f7f342a00000000, 0xcf67aef600000000, 0x0f0386e100000000,
<     0x4faefed800000000, 0x8fcad6cf00000000, 0xcff40faa00000000,
<     0x0f9027bd00000000, 0x4f3d5f8400000000, 0x8f59779300000000,
<     0x8e0b1ae600000000, 0x4e6f32f100000000, 0x0ec24ac800000000,
<     0xcea662df00000000, 0x8e98bbba00000000, 0x4efc93ad00000000,
<     0x0e51eb9400000000, 0xce35c38300000000, 0x8e2d595f00000000,
<     0x4e49714800000000, 0x0ee4097100000000, 0xce80216600000000,
<     0x8ebef80300000000, 0x4edad01400000000, 0x0e77a82d00000000,
<     0xce13803a00000000, 0x0cd372c700000000, 0xccb75ad000000000,
<     0x8c1a22e900000000, 0x4c7e0afe00000000, 0x0c40d39b00000000,
<     0xcc24fb8c00000000, 0x8c8983b500000000, 0x4cedaba200000000,
<     0x0cf5317e00000000, 0xcc91196900000000, 0x8c3c615000000000,
<     0x4c58494700000000, 0x0c66902200000000, 0xcc02b83500000000,
<     0x8cafc00c00000000, 0x4ccbe81b00000000, 0x4d99856e00000000,
<     0x8dfdad7900000000, 0xcd50d54000000000, 0x0d34fd5700000000,
<     0x4d0a243200000000, 0x8d6e0c2500000000, 0xcdc3741c00000000,
<     0x0da75c0b00000000, 0x4dbfc6d700000000, 0x8ddbeec000000000,
<     0xcd7696f900000000, 0x0d12beee00000000, 0x4d2c678b00000000,
<     0x8d484f9c00000000, 0xcde537a500000000, 0x0d811fb200000000,
<     0x0862a38500000000, 0xc8068b9200000000, 0x88abf3ab00000000,
<     0x48cfdbbc00000000, 0x08f102d900000000, 0xc8952ace00000000,
<     0x883852f700000000, 0x485c7ae000000000, 0x0844e03c00000000,
<     0xc820c82b00000000, 0x888db01200000000, 0x48e9980500000000,
<     0x08d7416000000000, 0xc8b3697700000000, 0x881e114e00000000,
<     0x487a395900000000, 0x4928542c00000000, 0x894c7c3b00000000,
<     0xc9e1040200000000, 0x09852c1500000000, 0x49bbf57000000000,
<     0x89dfdd6700000000, 0xc972a55e00000000, 0x09168d4900000000,
<     0x490e179500000000, 0x896a3f8200000000, 0xc9c747bb00000000,
<     0x09a36fac00000000, 0x499db6c900000000, 0x89f99ede00000000,
<     0xc954e6e700000000, 0x0930cef000000000, 0xcbf03c0d00000000,
<     0x0b94141a00000000, 0x4b396c2300000000, 0x8b5d443400000000,
<     0xcb639d5100000000, 0x0b07b54600000000, 0x4baacd7f00000000,
<     0x8bcee56800000000, 0xcbd67fb400000000, 0x0bb257a300000000,
<     0x4b1f2f9a00000000, 0x8b7b078d00000000, 0xcb45dee800000000,
<     0x0b21f6ff00000000, 0x4b8c8ec600000000, 0x8be8a6d100000000,
<     0x8abacba400000000, 0x4adee3b300000000, 0x0a739b8a00000000,
<     0xca17b39d00000000, 0x8a296af800000000, 0x4a4d42ef00000000,
<     0x0ae03ad600000000, 0xca8412c100000000, 0x8a9c881d00000000,
<     0x4af8a00a00000000, 0x0a55d83300000000, 0xca31f02400000000,
<     0x8a0f294100000000, 0x4a6b015600000000, 0x0ac6796f00000000,
<     0xcaa2517800000000},
<    {0x0000000000000000, 0xd4ea739b00000000, 0xe9d396ed00000000,
<     0x3d39e57600000000, 0x93a15c0000000000, 0x474b2f9b00000000,
<     0x7a72caed00000000, 0xae98b97600000000, 0x2643b90000000000,
<     0xf2a9ca9b00000000, 0xcf902fed00000000, 0x1b7a5c7600000000,
<     0xb5e2e50000000000, 0x6108969b00000000, 0x5c3173ed00000000,
<     0x88db007600000000, 0x4c86720100000000, 0x986c019a00000000,
<     0xa555e4ec00000000, 0x71bf977700000000, 0xdf272e0100000000,
<     0x0bcd5d9a00000000, 0x36f4b8ec00000000, 0xe21ecb7700000000,
<     0x6ac5cb0100000000, 0xbe2fb89a00000000, 0x83165dec00000000,
<     0x57fc2e7700000000, 0xf964970100000000, 0x2d8ee49a00000000,
<     0x10b701ec00000000, 0xc45d727700000000, 0x980ce50200000000,
<     0x4ce6969900000000, 0x71df73ef00000000, 0xa535007400000000,
<     0x0badb90200000000, 0xdf47ca9900000000, 0xe27e2fef00000000,
<     0x36945c7400000000, 0xbe4f5c0200000000, 0x6aa52f9900000000,
<     0x579ccaef00000000, 0x8376b97400000000, 0x2dee000200000000,
<     0xf904739900000000, 0xc43d96ef00000000, 0x10d7e57400000000,
<     0xd48a970300000000, 0x0060e49800000000, 0x3d5901ee00000000,
<     0xe9b3727500000000, 0x472bcb0300000000, 0x93c1b89800000000,
<     0xaef85dee00000000, 0x7a122e7500000000, 0xf2c92e0300000000,
<     0x26235d9800000000, 0x1b1ab8ee00000000, 0xcff0cb7500000000,
<     0x6168720300000000, 0xb582019800000000, 0x88bbe4ee00000000,
<     0x5c51977500000000, 0x3019ca0500000000, 0xe4f3b99e00000000,
<     0xd9ca5ce800000000, 0x0d202f7300000000, 0xa3b8960500000000,
<     0x7752e59e00000000, 0x4a6b00e800000000, 0x9e81737300000000,
<     0x165a730500000000, 0xc2b0009e00000000, 0xff89e5e800000000,
<     0x2b63967300000000, 0x85fb2f0500000000, 0x51115c9e00000000,
<     0x6c28b9e800000000, 0xb8c2ca7300000000, 0x7c9fb80400000000,
<     0xa875cb9f00000000, 0x954c2ee900000000, 0x41a65d7200000000,
<     0xef3ee40400000000, 0x3bd4979f00000000, 0x06ed72e900000000,
<     0xd207017200000000, 0x5adc010400000000, 0x8e36729f00000000,
<     0xb30f97e900000000, 0x67e5e47200000000, 0xc97d5d0400000000,
<     0x1d972e9f00000000, 0x20aecbe900000000, 0xf444b87200000000,
<     0xa8152f0700000000, 0x7cff5c9c00000000, 0x41c6b9ea00000000,
<     0x952cca7100000000, 0x3bb4730700000000, 0xef5e009c00000000,
<     0xd267e5ea00000000, 0x068d967100000000, 0x8e56960700000000,
<     0x5abce59c00000000, 0x678500ea00000000, 0xb36f737100000000,
<     0x1df7ca0700000000, 0xc91db99c00000000, 0xf4245cea00000000,
<     0x20ce2f7100000000, 0xe4935d0600000000, 0x30792e9d00000000,
<     0x0d40cbeb00000000, 0xd9aab87000000000, 0x7732010600000000,
<     0xa3d8729d00000000, 0x9ee197eb00000000, 0x4a0be47000000000,
<     0xc2d0e40600000000, 0x163a979d00000000, 0x2b0372eb00000000,
<     0xffe9017000000000, 0x5171b80600000000, 0x859bcb9d00000000,
<     0xb8a22eeb00000000, 0x6c485d7000000000, 0x6032940b00000000,
<     0xb4d8e79000000000, 0x89e102e600000000, 0x5d0b717d00000000,
<     0xf393c80b00000000, 0x2779bb9000000000, 0x1a405ee600000000,
<     0xceaa2d7d00000000, 0x46712d0b00000000, 0x929b5e9000000000,
<     0xafa2bbe600000000, 0x7b48c87d00000000, 0xd5d0710b00000000,
<     0x013a029000000000, 0x3c03e7e600000000, 0xe8e9947d00000000,
<     0x2cb4e60a00000000, 0xf85e959100000000, 0xc56770e700000000,
<     0x118d037c00000000, 0xbf15ba0a00000000, 0x6bffc99100000000,
<     0x56c62ce700000000, 0x822c5f7c00000000, 0x0af75f0a00000000,
<     0xde1d2c9100000000, 0xe324c9e700000000, 0x37ceba7c00000000,
<     0x9956030a00000000, 0x4dbc709100000000, 0x708595e700000000,
<     0xa46fe67c00000000, 0xf83e710900000000, 0x2cd4029200000000,
<     0x11ede7e400000000, 0xc507947f00000000, 0x6b9f2d0900000000,
<     0xbf755e9200000000, 0x824cbbe400000000, 0x56a6c87f00000000,
<     0xde7dc80900000000, 0x0a97bb9200000000, 0x37ae5ee400000000,
<     0xe3442d7f00000000, 0x4ddc940900000000, 0x9936e79200000000,
<     0xa40f02e400000000, 0x70e5717f00000000, 0xb4b8030800000000,
<     0x6052709300000000, 0x5d6b95e500000000, 0x8981e67e00000000,
<     0x27195f0800000000, 0xf3f32c9300000000, 0xcecac9e500000000,
<     0x1a20ba7e00000000, 0x92fbba0800000000, 0x4611c99300000000,
<     0x7b282ce500000000, 0xafc25f7e00000000, 0x015ae60800000000,
<     0xd5b0959300000000, 0xe88970e500000000, 0x3c63037e00000000,
<     0x502b5e0e00000000, 0x84c12d9500000000, 0xb9f8c8e300000000,
<     0x6d12bb7800000000, 0xc38a020e00000000, 0x1760719500000000,
<     0x2a5994e300000000, 0xfeb3e77800000000, 0x7668e70e00000000,
<     0xa282949500000000, 0x9fbb71e300000000, 0x4b51027800000000,
<     0xe5c9bb0e00000000, 0x3123c89500000000, 0x0c1a2de300000000,
<     0xd8f05e7800000000, 0x1cad2c0f00000000, 0xc8475f9400000000,
<     0xf57ebae200000000, 0x2194c97900000000, 0x8f0c700f00000000,
<     0x5be6039400000000, 0x66dfe6e200000000, 0xb235957900000000,
<     0x3aee950f00000000, 0xee04e69400000000, 0xd33d03e200000000,
<     0x07d7707900000000, 0xa94fc90f00000000, 0x7da5ba9400000000,
<     0x409c5fe200000000, 0x94762c7900000000, 0xc827bb0c00000000,
<     0x1ccdc89700000000, 0x21f42de100000000, 0xf51e5e7a00000000,
<     0x5b86e70c00000000, 0x8f6c949700000000, 0xb25571e100000000,
<     0x66bf027a00000000, 0xee64020c00000000, 0x3a8e719700000000,
<     0x07b794e100000000, 0xd35de77a00000000, 0x7dc55e0c00000000,
<     0xa92f2d9700000000, 0x9416c8e100000000, 0x40fcbb7a00000000,
<     0x84a1c90d00000000, 0x504bba9600000000, 0x6d725fe000000000,
<     0xb9982c7b00000000, 0x1700950d00000000, 0xc3eae69600000000,
<     0xfed303e000000000, 0x2a39707b00000000, 0xa2e2700d00000000,
<     0x7608039600000000, 0x4b31e6e000000000, 0x9fdb957b00000000,
<     0x31432c0d00000000, 0xe5a95f9600000000, 0xd890bae000000000,
<     0x0c7ac97b00000000},
<    {0x0000000000000000, 0x2765258100000000, 0x0fcc3bd900000000,
<     0x28a91e5800000000, 0x5f9e066900000000, 0x78fb23e800000000,
<     0x50523db000000000, 0x7737183100000000, 0xbe3c0dd200000000,
<     0x9959285300000000, 0xb1f0360b00000000, 0x9695138a00000000,
<     0xe1a20bbb00000000, 0xc6c72e3a00000000, 0xee6e306200000000,
<     0xc90b15e300000000, 0x3d7f6b7f00000000, 0x1a1a4efe00000000,
<     0x32b350a600000000, 0x15d6752700000000, 0x62e16d1600000000,
<     0x4584489700000000, 0x6d2d56cf00000000, 0x4a48734e00000000,
<     0x834366ad00000000, 0xa426432c00000000, 0x8c8f5d7400000000,
<     0xabea78f500000000, 0xdcdd60c400000000, 0xfbb8454500000000,
<     0xd3115b1d00000000, 0xf4747e9c00000000, 0x7afed6fe00000000,
<     0x5d9bf37f00000000, 0x7532ed2700000000, 0x5257c8a600000000,
<     0x2560d09700000000, 0x0205f51600000000, 0x2aaceb4e00000000,
<     0x0dc9cecf00000000, 0xc4c2db2c00000000, 0xe3a7fead00000000,
<     0xcb0ee0f500000000, 0xec6bc57400000000, 0x9b5cdd4500000000,
<     0xbc39f8c400000000, 0x9490e69c00000000, 0xb3f5c31d00000000,
<     0x4781bd8100000000, 0x60e4980000000000, 0x484d865800000000,
<     0x6f28a3d900000000, 0x181fbbe800000000, 0x3f7a9e6900000000,
<     0x17d3803100000000, 0x30b6a5b000000000, 0xf9bdb05300000000,
<     0xded895d200000000, 0xf6718b8a00000000, 0xd114ae0b00000000,
<     0xa623b63a00000000, 0x814693bb00000000, 0xa9ef8de300000000,
<     0x8e8aa86200000000, 0xb5fadc2600000000, 0x929ff9a700000000,
<     0xba36e7ff00000000, 0x9d53c27e00000000, 0xea64da4f00000000,
<     0xcd01ffce00000000, 0xe5a8e19600000000, 0xc2cdc41700000000,
<     0x0bc6d1f400000000, 0x2ca3f47500000000, 0x040aea2d00000000,
<     0x236fcfac00000000, 0x5458d79d00000000, 0x733df21c00000000,
<     0x5b94ec4400000000, 0x7cf1c9c500000000, 0x8885b75900000000,
<     0xafe092d800000000, 0x87498c8000000000, 0xa02ca90100000000,
<     0xd71bb13000000000, 0xf07e94b100000000, 0xd8d78ae900000000,
<     0xffb2af6800000000, 0x36b9ba8b00000000, 0x11dc9f0a00000000,
<     0x3975815200000000, 0x1e10a4d300000000, 0x6927bce200000000,
<     0x4e42996300000000, 0x66eb873b00000000, 0x418ea2ba00000000,
<     0xcf040ad800000000, 0xe8612f5900000000, 0xc0c8310100000000,
<     0xe7ad148000000000, 0x909a0cb100000000, 0xb7ff293000000000,
<     0x9f56376800000000, 0xb83312e900000000, 0x7138070a00000000,
<     0x565d228b00000000, 0x7ef43cd300000000, 0x5991195200000000,
<     0x2ea6016300000000, 0x09c324e200000000, 0x216a3aba00000000,
<     0x060f1f3b00000000, 0xf27b61a700000000, 0xd51e442600000000,
<     0xfdb75a7e00000000, 0xdad27fff00000000, 0xade567ce00000000,
<     0x8a80424f00000000, 0xa2295c1700000000, 0x854c799600000000,
<     0x4c476c7500000000, 0x6b2249f400000000, 0x438b57ac00000000,
<     0x64ee722d00000000, 0x13d96a1c00000000, 0x34bc4f9d00000000,
<     0x1c1551c500000000, 0x3b70744400000000, 0x6af5b94d00000000,
<     0x4d909ccc00000000, 0x6539829400000000, 0x425ca71500000000,
<     0x356bbf2400000000, 0x120e9aa500000000, 0x3aa784fd00000000,
<     0x1dc2a17c00000000, 0xd4c9b49f00000000, 0xf3ac911e00000000,
<     0xdb058f4600000000, 0xfc60aac700000000, 0x8b57b2f600000000,
<     0xac32977700000000, 0x849b892f00000000, 0xa3feacae00000000,
<     0x578ad23200000000, 0x70eff7b300000000, 0x5846e9eb00000000,
<     0x7f23cc6a00000000, 0x0814d45b00000000, 0x2f71f1da00000000,
<     0x07d8ef8200000000, 0x20bdca0300000000, 0xe9b6dfe000000000,
<     0xced3fa6100000000, 0xe67ae43900000000, 0xc11fc1b800000000,
<     0xb628d98900000000, 0x914dfc0800000000, 0xb9e4e25000000000,
<     0x9e81c7d100000000, 0x100b6fb300000000, 0x376e4a3200000000,
<     0x1fc7546a00000000, 0x38a271eb00000000, 0x4f9569da00000000,
<     0x68f04c5b00000000, 0x4059520300000000, 0x673c778200000000,
<     0xae37626100000000, 0x895247e000000000, 0xa1fb59b800000000,
<     0x869e7c3900000000, 0xf1a9640800000000, 0xd6cc418900000000,
<     0xfe655fd100000000, 0xd9007a5000000000, 0x2d7404cc00000000,
<     0x0a11214d00000000, 0x22b83f1500000000, 0x05dd1a9400000000,
<     0x72ea02a500000000, 0x558f272400000000, 0x7d26397c00000000,
<     0x5a431cfd00000000, 0x9348091e00000000, 0xb42d2c9f00000000,
<     0x9c8432c700000000, 0xbbe1174600000000, 0xccd60f7700000000,
<     0xebb32af600000000, 0xc31a34ae00000000, 0xe47f112f00000000,
<     0xdf0f656b00000000, 0xf86a40ea00000000, 0xd0c35eb200000000,
<     0xf7a67b3300000000, 0x8091630200000000, 0xa7f4468300000000,
<     0x8f5d58db00000000, 0xa8387d5a00000000, 0x613368b900000000,
<     0x46564d3800000000, 0x6eff536000000000, 0x499a76e100000000,
<     0x3ead6ed000000000, 0x19c84b5100000000, 0x3161550900000000,
<     0x1604708800000000, 0xe2700e1400000000, 0xc5152b9500000000,
<     0xedbc35cd00000000, 0xcad9104c00000000, 0xbdee087d00000000,
<     0x9a8b2dfc00000000, 0xb22233a400000000, 0x9547162500000000,
<     0x5c4c03c600000000, 0x7b29264700000000, 0x5380381f00000000,
<     0x74e51d9e00000000, 0x03d205af00000000, 0x24b7202e00000000,
<     0x0c1e3e7600000000, 0x2b7b1bf700000000, 0xa5f1b39500000000,
<     0x8294961400000000, 0xaa3d884c00000000, 0x8d58adcd00000000,
<     0xfa6fb5fc00000000, 0xdd0a907d00000000, 0xf5a38e2500000000,
<     0xd2c6aba400000000, 0x1bcdbe4700000000, 0x3ca89bc600000000,
<     0x1401859e00000000, 0x3364a01f00000000, 0x4453b82e00000000,
<     0x63369daf00000000, 0x4b9f83f700000000, 0x6cfaa67600000000,
<     0x988ed8ea00000000, 0xbfebfd6b00000000, 0x9742e33300000000,
<     0xb027c6b200000000, 0xc710de8300000000, 0xe075fb0200000000,
<     0xc8dce55a00000000, 0xefb9c0db00000000, 0x26b2d53800000000,
<     0x01d7f0b900000000, 0x297eeee100000000, 0x0e1bcb6000000000,
<     0x792cd35100000000, 0x5e49f6d000000000, 0x76e0e88800000000,
<     0x5185cd0900000000}};
< 
< #else /* W == 4 */
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0x9ba54c6f, 0xec3b9e9f, 0x779ed2f0, 0x03063b7f,
<     0x98a37710, 0xef3da5e0, 0x7498e98f, 0x060c76fe, 0x9da93a91,
<     0xea37e861, 0x7192a40e, 0x050a4d81, 0x9eaf01ee, 0xe931d31e,
<     0x72949f71, 0x0c18edfc, 0x97bda193, 0xe0237363, 0x7b863f0c,
<     0x0f1ed683, 0x94bb9aec, 0xe325481c, 0x78800473, 0x0a149b02,
<     0x91b1d76d, 0xe62f059d, 0x7d8a49f2, 0x0912a07d, 0x92b7ec12,
<     0xe5293ee2, 0x7e8c728d, 0x1831dbf8, 0x83949797, 0xf40a4567,
<     0x6faf0908, 0x1b37e087, 0x8092ace8, 0xf70c7e18, 0x6ca93277,
<     0x1e3dad06, 0x8598e169, 0xf2063399, 0x69a37ff6, 0x1d3b9679,
<     0x869eda16, 0xf10008e6, 0x6aa54489, 0x14293604, 0x8f8c7a6b,
<     0xf812a89b, 0x63b7e4f4, 0x172f0d7b, 0x8c8a4114, 0xfb1493e4,
<     0x60b1df8b, 0x122540fa, 0x89800c95, 0xfe1ede65, 0x65bb920a,
<     0x11237b85, 0x8a8637ea, 0xfd18e51a, 0x66bda975, 0x3063b7f0,
<     0xabc6fb9f, 0xdc58296f, 0x47fd6500, 0x33658c8f, 0xa8c0c0e0,
<     0xdf5e1210, 0x44fb5e7f, 0x366fc10e, 0xadca8d61, 0xda545f91,
<     0x41f113fe, 0x3569fa71, 0xaeccb61e, 0xd95264ee, 0x42f72881,
<     0x3c7b5a0c, 0xa7de1663, 0xd040c493, 0x4be588fc, 0x3f7d6173,
<     0xa4d82d1c, 0xd346ffec, 0x48e3b383, 0x3a772cf2, 0xa1d2609d,
<     0xd64cb26d, 0x4de9fe02, 0x3971178d, 0xa2d45be2, 0xd54a8912,
<     0x4eefc57d, 0x28526c08, 0xb3f72067, 0xc469f297, 0x5fccbef8,
<     0x2b545777, 0xb0f11b18, 0xc76fc9e8, 0x5cca8587, 0x2e5e1af6,
<     0xb5fb5699, 0xc2658469, 0x59c0c806, 0x2d582189, 0xb6fd6de6,
<     0xc163bf16, 0x5ac6f379, 0x244a81f4, 0xbfefcd9b, 0xc8711f6b,
<     0x53d45304, 0x274cba8b, 0xbce9f6e4, 0xcb772414, 0x50d2687b,
<     0x2246f70a, 0xb9e3bb65, 0xce7d6995, 0x55d825fa, 0x2140cc75,
<     0xbae5801a, 0xcd7b52ea, 0x56de1e85, 0x60c76fe0, 0xfb62238f,
<     0x8cfcf17f, 0x1759bd10, 0x63c1549f, 0xf86418f0, 0x8ffaca00,
<     0x145f866f, 0x66cb191e, 0xfd6e5571, 0x8af08781, 0x1155cbee,
<     0x65cd2261, 0xfe686e0e, 0x89f6bcfe, 0x1253f091, 0x6cdf821c,
<     0xf77ace73, 0x80e41c83, 0x1b4150ec, 0x6fd9b963, 0xf47cf50c,
<     0x83e227fc, 0x18476b93, 0x6ad3f4e2, 0xf176b88d, 0x86e86a7d,
<     0x1d4d2612, 0x69d5cf9d, 0xf27083f2, 0x85ee5102, 0x1e4b1d6d,
<     0x78f6b418, 0xe353f877, 0x94cd2a87, 0x0f6866e8, 0x7bf08f67,
<     0xe055c308, 0x97cb11f8, 0x0c6e5d97, 0x7efac2e6, 0xe55f8e89,
<     0x92c15c79, 0x09641016, 0x7dfcf999, 0xe659b5f6, 0x91c76706,
<     0x0a622b69, 0x74ee59e4, 0xef4b158b, 0x98d5c77b, 0x03708b14,
<     0x77e8629b, 0xec4d2ef4, 0x9bd3fc04, 0x0076b06b, 0x72e22f1a,
<     0xe9476375, 0x9ed9b185, 0x057cfdea, 0x71e41465, 0xea41580a,
<     0x9ddf8afa, 0x067ac695, 0x50a4d810, 0xcb01947f, 0xbc9f468f,
<     0x273a0ae0, 0x53a2e36f, 0xc807af00, 0xbf997df0, 0x243c319f,
<     0x56a8aeee, 0xcd0de281, 0xba933071, 0x21367c1e, 0x55ae9591,
<     0xce0bd9fe, 0xb9950b0e, 0x22304761, 0x5cbc35ec, 0xc7197983,
<     0xb087ab73, 0x2b22e71c, 0x5fba0e93, 0xc41f42fc, 0xb381900c,
<     0x2824dc63, 0x5ab04312, 0xc1150f7d, 0xb68bdd8d, 0x2d2e91e2,
<     0x59b6786d, 0xc2133402, 0xb58de6f2, 0x2e28aa9d, 0x489503e8,
<     0xd3304f87, 0xa4ae9d77, 0x3f0bd118, 0x4b933897, 0xd03674f8,
<     0xa7a8a608, 0x3c0dea67, 0x4e997516, 0xd53c3979, 0xa2a2eb89,
<     0x3907a7e6, 0x4d9f4e69, 0xd63a0206, 0xa1a4d0f6, 0x3a019c99,
<     0x448dee14, 0xdf28a27b, 0xa8b6708b, 0x33133ce4, 0x478bd56b,
<     0xdc2e9904, 0xabb04bf4, 0x3015079b, 0x428198ea, 0xd924d485,
<     0xaeba0675, 0x351f4a1a, 0x4187a395, 0xda22effa, 0xadbc3d0a,
<     0x36197165},
<    {0x00000000, 0xc18edfc0, 0x586cb9c1, 0x99e26601, 0xb0d97382,
<     0x7157ac42, 0xe8b5ca43, 0x293b1583, 0xbac3e145, 0x7b4d3e85,
<     0xe2af5884, 0x23218744, 0x0a1a92c7, 0xcb944d07, 0x52762b06,
<     0x93f8f4c6, 0xaef6c4cb, 0x6f781b0b, 0xf69a7d0a, 0x3714a2ca,
<     0x1e2fb749, 0xdfa16889, 0x46430e88, 0x87cdd148, 0x1435258e,
<     0xd5bbfa4e, 0x4c599c4f, 0x8dd7438f, 0xa4ec560c, 0x656289cc,
<     0xfc80efcd, 0x3d0e300d, 0x869c8fd7, 0x47125017, 0xdef03616,
<     0x1f7ee9d6, 0x3645fc55, 0xf7cb2395, 0x6e294594, 0xafa79a54,
<     0x3c5f6e92, 0xfdd1b152, 0x6433d753, 0xa5bd0893, 0x8c861d10,
<     0x4d08c2d0, 0xd4eaa4d1, 0x15647b11, 0x286a4b1c, 0xe9e494dc,
<     0x7006f2dd, 0xb1882d1d, 0x98b3389e, 0x593de75e, 0xc0df815f,
<     0x01515e9f, 0x92a9aa59, 0x53277599, 0xcac51398, 0x0b4bcc58,
<     0x2270d9db, 0xe3fe061b, 0x7a1c601a, 0xbb92bfda, 0xd64819ef,
<     0x17c6c62f, 0x8e24a02e, 0x4faa7fee, 0x66916a6d, 0xa71fb5ad,
<     0x3efdd3ac, 0xff730c6c, 0x6c8bf8aa, 0xad05276a, 0x34e7416b,
<     0xf5699eab, 0xdc528b28, 0x1ddc54e8, 0x843e32e9, 0x45b0ed29,
<     0x78bedd24, 0xb93002e4, 0x20d264e5, 0xe15cbb25, 0xc867aea6,
<     0x09e97166, 0x900b1767, 0x5185c8a7, 0xc27d3c61, 0x03f3e3a1,
<     0x9a1185a0, 0x5b9f5a60, 0x72a44fe3, 0xb32a9023, 0x2ac8f622,
<     0xeb4629e2, 0x50d49638, 0x915a49f8, 0x08b82ff9, 0xc936f039,
<     0xe00de5ba, 0x21833a7a, 0xb8615c7b, 0x79ef83bb, 0xea17777d,
<     0x2b99a8bd, 0xb27bcebc, 0x73f5117c, 0x5ace04ff, 0x9b40db3f,
<     0x02a2bd3e, 0xc32c62fe, 0xfe2252f3, 0x3fac8d33, 0xa64eeb32,
<     0x67c034f2, 0x4efb2171, 0x8f75feb1, 0x169798b0, 0xd7194770,
<     0x44e1b3b6, 0x856f6c76, 0x1c8d0a77, 0xdd03d5b7, 0xf438c034,
<     0x35b61ff4, 0xac5479f5, 0x6ddaa635, 0x77e1359f, 0xb66fea5f,
<     0x2f8d8c5e, 0xee03539e, 0xc738461d, 0x06b699dd, 0x9f54ffdc,
<     0x5eda201c, 0xcd22d4da, 0x0cac0b1a, 0x954e6d1b, 0x54c0b2db,
<     0x7dfba758, 0xbc757898, 0x25971e99, 0xe419c159, 0xd917f154,
<     0x18992e94, 0x817b4895, 0x40f59755, 0x69ce82d6, 0xa8405d16,
<     0x31a23b17, 0xf02ce4d7, 0x63d41011, 0xa25acfd1, 0x3bb8a9d0,
<     0xfa367610, 0xd30d6393, 0x1283bc53, 0x8b61da52, 0x4aef0592,
<     0xf17dba48, 0x30f36588, 0xa9110389, 0x689fdc49, 0x41a4c9ca,
<     0x802a160a, 0x19c8700b, 0xd846afcb, 0x4bbe5b0d, 0x8a3084cd,
<     0x13d2e2cc, 0xd25c3d0c, 0xfb67288f, 0x3ae9f74f, 0xa30b914e,
<     0x62854e8e, 0x5f8b7e83, 0x9e05a143, 0x07e7c742, 0xc6691882,
<     0xef520d01, 0x2edcd2c1, 0xb73eb4c0, 0x76b06b00, 0xe5489fc6,
<     0x24c64006, 0xbd242607, 0x7caaf9c7, 0x5591ec44, 0x941f3384,
<     0x0dfd5585, 0xcc738a45, 0xa1a92c70, 0x6027f3b0, 0xf9c595b1,
<     0x384b4a71, 0x11705ff2, 0xd0fe8032, 0x491ce633, 0x889239f3,
<     0x1b6acd35, 0xdae412f5, 0x430674f4, 0x8288ab34, 0xabb3beb7,
<     0x6a3d6177, 0xf3df0776, 0x3251d8b6, 0x0f5fe8bb, 0xced1377b,
<     0x5733517a, 0x96bd8eba, 0xbf869b39, 0x7e0844f9, 0xe7ea22f8,
<     0x2664fd38, 0xb59c09fe, 0x7412d63e, 0xedf0b03f, 0x2c7e6fff,
<     0x05457a7c, 0xc4cba5bc, 0x5d29c3bd, 0x9ca71c7d, 0x2735a3a7,
<     0xe6bb7c67, 0x7f591a66, 0xbed7c5a6, 0x97ecd025, 0x56620fe5,
<     0xcf8069e4, 0x0e0eb624, 0x9df642e2, 0x5c789d22, 0xc59afb23,
<     0x041424e3, 0x2d2f3160, 0xeca1eea0, 0x754388a1, 0xb4cd5761,
<     0x89c3676c, 0x484db8ac, 0xd1afdead, 0x1021016d, 0x391a14ee,
<     0xf894cb2e, 0x6176ad2f, 0xa0f872ef, 0x33008629, 0xf28e59e9,
<     0x6b6c3fe8, 0xaae2e028, 0x83d9f5ab, 0x42572a6b, 0xdbb54c6a,
<     0x1a3b93aa},
<    {0x00000000, 0xefc26b3e, 0x04f5d03d, 0xeb37bb03, 0x09eba07a,
<     0xe629cb44, 0x0d1e7047, 0xe2dc1b79, 0x13d740f4, 0xfc152bca,
<     0x172290c9, 0xf8e0fbf7, 0x1a3ce08e, 0xf5fe8bb0, 0x1ec930b3,
<     0xf10b5b8d, 0x27ae81e8, 0xc86cead6, 0x235b51d5, 0xcc993aeb,
<     0x2e452192, 0xc1874aac, 0x2ab0f1af, 0xc5729a91, 0x3479c11c,
<     0xdbbbaa22, 0x308c1121, 0xdf4e7a1f, 0x3d926166, 0xd2500a58,
<     0x3967b15b, 0xd6a5da65, 0x4f5d03d0, 0xa09f68ee, 0x4ba8d3ed,
<     0xa46ab8d3, 0x46b6a3aa, 0xa974c894, 0x42437397, 0xad8118a9,
<     0x5c8a4324, 0xb348281a, 0x587f9319, 0xb7bdf827, 0x5561e35e,
<     0xbaa38860, 0x51943363, 0xbe56585d, 0x68f38238, 0x8731e906,
<     0x6c065205, 0x83c4393b, 0x61182242, 0x8eda497c, 0x65edf27f,
<     0x8a2f9941, 0x7b24c2cc, 0x94e6a9f2, 0x7fd112f1, 0x901379cf,
<     0x72cf62b6, 0x9d0d0988, 0x763ab28b, 0x99f8d9b5, 0x9eba07a0,
<     0x71786c9e, 0x9a4fd79d, 0x758dbca3, 0x9751a7da, 0x7893cce4,
<     0x93a477e7, 0x7c661cd9, 0x8d6d4754, 0x62af2c6a, 0x89989769,
<     0x665afc57, 0x8486e72e, 0x6b448c10, 0x80733713, 0x6fb15c2d,
<     0xb9148648, 0x56d6ed76, 0xbde15675, 0x52233d4b, 0xb0ff2632,
<     0x5f3d4d0c, 0xb40af60f, 0x5bc89d31, 0xaac3c6bc, 0x4501ad82,
<     0xae361681, 0x41f47dbf, 0xa32866c6, 0x4cea0df8, 0xa7ddb6fb,
<     0x481fddc5, 0xd1e70470, 0x3e256f4e, 0xd512d44d, 0x3ad0bf73,
<     0xd80ca40a, 0x37cecf34, 0xdcf97437, 0x333b1f09, 0xc2304484,
<     0x2df22fba, 0xc6c594b9, 0x2907ff87, 0xcbdbe4fe, 0x24198fc0,
<     0xcf2e34c3, 0x20ec5ffd, 0xf6498598, 0x198beea6, 0xf2bc55a5,
<     0x1d7e3e9b, 0xffa225e2, 0x10604edc, 0xfb57f5df, 0x14959ee1,
<     0xe59ec56c, 0x0a5cae52, 0xe16b1551, 0x0ea97e6f, 0xec756516,
<     0x03b70e28, 0xe880b52b, 0x0742de15, 0xe6050901, 0x09c7623f,
<     0xe2f0d93c, 0x0d32b202, 0xefeea97b, 0x002cc245, 0xeb1b7946,
<     0x04d91278, 0xf5d249f5, 0x1a1022cb, 0xf12799c8, 0x1ee5f2f6,
<     0xfc39e98f, 0x13fb82b1, 0xf8cc39b2, 0x170e528c, 0xc1ab88e9,
<     0x2e69e3d7, 0xc55e58d4, 0x2a9c33ea, 0xc8402893, 0x278243ad,
<     0xccb5f8ae, 0x23779390, 0xd27cc81d, 0x3dbea323, 0xd6891820,
<     0x394b731e, 0xdb976867, 0x34550359, 0xdf62b85a, 0x30a0d364,
<     0xa9580ad1, 0x469a61ef, 0xadaddaec, 0x426fb1d2, 0xa0b3aaab,
<     0x4f71c195, 0xa4467a96, 0x4b8411a8, 0xba8f4a25, 0x554d211b,
<     0xbe7a9a18, 0x51b8f126, 0xb364ea5f, 0x5ca68161, 0xb7913a62,
<     0x5853515c, 0x8ef68b39, 0x6134e007, 0x8a035b04, 0x65c1303a,
<     0x871d2b43, 0x68df407d, 0x83e8fb7e, 0x6c2a9040, 0x9d21cbcd,
<     0x72e3a0f3, 0x99d41bf0, 0x761670ce, 0x94ca6bb7, 0x7b080089,
<     0x903fbb8a, 0x7ffdd0b4, 0x78bf0ea1, 0x977d659f, 0x7c4ade9c,
<     0x9388b5a2, 0x7154aedb, 0x9e96c5e5, 0x75a17ee6, 0x9a6315d8,
<     0x6b684e55, 0x84aa256b, 0x6f9d9e68, 0x805ff556, 0x6283ee2f,
<     0x8d418511, 0x66763e12, 0x89b4552c, 0x5f118f49, 0xb0d3e477,
<     0x5be45f74, 0xb426344a, 0x56fa2f33, 0xb938440d, 0x520fff0e,
<     0xbdcd9430, 0x4cc6cfbd, 0xa304a483, 0x48331f80, 0xa7f174be,
<     0x452d6fc7, 0xaaef04f9, 0x41d8bffa, 0xae1ad4c4, 0x37e20d71,
<     0xd820664f, 0x3317dd4c, 0xdcd5b672, 0x3e09ad0b, 0xd1cbc635,
<     0x3afc7d36, 0xd53e1608, 0x24354d85, 0xcbf726bb, 0x20c09db8,
<     0xcf02f686, 0x2ddeedff, 0xc21c86c1, 0x292b3dc2, 0xc6e956fc,
<     0x104c8c99, 0xff8ee7a7, 0x14b95ca4, 0xfb7b379a, 0x19a72ce3,
<     0xf66547dd, 0x1d52fcde, 0xf29097e0, 0x039bcc6d, 0xec59a753,
<     0x076e1c50, 0xe8ac776e, 0x0a706c17, 0xe5b20729, 0x0e85bc2a,
<     0xe147d714},
<    {0x00000000, 0x177b1443, 0x2ef62886, 0x398d3cc5, 0x5dec510c,
<     0x4a97454f, 0x731a798a, 0x64616dc9, 0xbbd8a218, 0xaca3b65b,
<     0x952e8a9e, 0x82559edd, 0xe634f314, 0xf14fe757, 0xc8c2db92,
<     0xdfb9cfd1, 0xacc04271, 0xbbbb5632, 0x82366af7, 0x954d7eb4,
<     0xf12c137d, 0xe657073e, 0xdfda3bfb, 0xc8a12fb8, 0x1718e069,
<     0x0063f42a, 0x39eec8ef, 0x2e95dcac, 0x4af4b165, 0x5d8fa526,
<     0x640299e3, 0x73798da0, 0x82f182a3, 0x958a96e0, 0xac07aa25,
<     0xbb7cbe66, 0xdf1dd3af, 0xc866c7ec, 0xf1ebfb29, 0xe690ef6a,
<     0x392920bb, 0x2e5234f8, 0x17df083d, 0x00a41c7e, 0x64c571b7,
<     0x73be65f4, 0x4a335931, 0x5d484d72, 0x2e31c0d2, 0x394ad491,
<     0x00c7e854, 0x17bcfc17, 0x73dd91de, 0x64a6859d, 0x5d2bb958,
<     0x4a50ad1b, 0x95e962ca, 0x82927689, 0xbb1f4a4c, 0xac645e0f,
<     0xc80533c6, 0xdf7e2785, 0xe6f31b40, 0xf1880f03, 0xde920307,
<     0xc9e91744, 0xf0642b81, 0xe71f3fc2, 0x837e520b, 0x94054648,
<     0xad887a8d, 0xbaf36ece, 0x654aa11f, 0x7231b55c, 0x4bbc8999,
<     0x5cc79dda, 0x38a6f013, 0x2fdde450, 0x1650d895, 0x012bccd6,
<     0x72524176, 0x65295535, 0x5ca469f0, 0x4bdf7db3, 0x2fbe107a,
<     0x38c50439, 0x014838fc, 0x16332cbf, 0xc98ae36e, 0xdef1f72d,
<     0xe77ccbe8, 0xf007dfab, 0x9466b262, 0x831da621, 0xba909ae4,
<     0xadeb8ea7, 0x5c6381a4, 0x4b1895e7, 0x7295a922, 0x65eebd61,
<     0x018fd0a8, 0x16f4c4eb, 0x2f79f82e, 0x3802ec6d, 0xe7bb23bc,
<     0xf0c037ff, 0xc94d0b3a, 0xde361f79, 0xba5772b0, 0xad2c66f3,
<     0x94a15a36, 0x83da4e75, 0xf0a3c3d5, 0xe7d8d796, 0xde55eb53,
<     0xc92eff10, 0xad4f92d9, 0xba34869a, 0x83b9ba5f, 0x94c2ae1c,
<     0x4b7b61cd, 0x5c00758e, 0x658d494b, 0x72f65d08, 0x169730c1,
<     0x01ec2482, 0x38611847, 0x2f1a0c04, 0x6655004f, 0x712e140c,
<     0x48a328c9, 0x5fd83c8a, 0x3bb95143, 0x2cc24500, 0x154f79c5,
<     0x02346d86, 0xdd8da257, 0xcaf6b614, 0xf37b8ad1, 0xe4009e92,
<     0x8061f35b, 0x971ae718, 0xae97dbdd, 0xb9eccf9e, 0xca95423e,
<     0xddee567d, 0xe4636ab8, 0xf3187efb, 0x97791332, 0x80020771,
<     0xb98f3bb4, 0xaef42ff7, 0x714de026, 0x6636f465, 0x5fbbc8a0,
<     0x48c0dce3, 0x2ca1b12a, 0x3bdaa569, 0x025799ac, 0x152c8def,
<     0xe4a482ec, 0xf3df96af, 0xca52aa6a, 0xdd29be29, 0xb948d3e0,
<     0xae33c7a3, 0x97befb66, 0x80c5ef25, 0x5f7c20f4, 0x480734b7,
<     0x718a0872, 0x66f11c31, 0x029071f8, 0x15eb65bb, 0x2c66597e,
<     0x3b1d4d3d, 0x4864c09d, 0x5f1fd4de, 0x6692e81b, 0x71e9fc58,
<     0x15889191, 0x02f385d2, 0x3b7eb917, 0x2c05ad54, 0xf3bc6285,
<     0xe4c776c6, 0xdd4a4a03, 0xca315e40, 0xae503389, 0xb92b27ca,
<     0x80a61b0f, 0x97dd0f4c, 0xb8c70348, 0xafbc170b, 0x96312bce,
<     0x814a3f8d, 0xe52b5244, 0xf2504607, 0xcbdd7ac2, 0xdca66e81,
<     0x031fa150, 0x1464b513, 0x2de989d6, 0x3a929d95, 0x5ef3f05c,
<     0x4988e41f, 0x7005d8da, 0x677ecc99, 0x14074139, 0x037c557a,
<     0x3af169bf, 0x2d8a7dfc, 0x49eb1035, 0x5e900476, 0x671d38b3,
<     0x70662cf0, 0xafdfe321, 0xb8a4f762, 0x8129cba7, 0x9652dfe4,
<     0xf233b22d, 0xe548a66e, 0xdcc59aab, 0xcbbe8ee8, 0x3a3681eb,
<     0x2d4d95a8, 0x14c0a96d, 0x03bbbd2e, 0x67dad0e7, 0x70a1c4a4,
<     0x492cf861, 0x5e57ec22, 0x81ee23f3, 0x969537b0, 0xaf180b75,
<     0xb8631f36, 0xdc0272ff, 0xcb7966bc, 0xf2f45a79, 0xe58f4e3a,
<     0x96f6c39a, 0x818dd7d9, 0xb800eb1c, 0xaf7bff5f, 0xcb1a9296,
<     0xdc6186d5, 0xe5ecba10, 0xf297ae53, 0x2d2e6182, 0x3a5575c1,
<     0x03d84904, 0x14a35d47, 0x70c2308e, 0x67b924cd, 0x5e341808,
<     0x494f0c4b}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x00000000, 0x43147b17, 0x8628f62e, 0xc53c8d39, 0x0c51ec5d,
<     0x4f45974a, 0x8a791a73, 0xc96d6164, 0x18a2d8bb, 0x5bb6a3ac,
<     0x9e8a2e95, 0xdd9e5582, 0x14f334e6, 0x57e74ff1, 0x92dbc2c8,
<     0xd1cfb9df, 0x7142c0ac, 0x3256bbbb, 0xf76a3682, 0xb47e4d95,
<     0x7d132cf1, 0x3e0757e6, 0xfb3bdadf, 0xb82fa1c8, 0x69e01817,
<     0x2af46300, 0xefc8ee39, 0xacdc952e, 0x65b1f44a, 0x26a58f5d,
<     0xe3990264, 0xa08d7973, 0xa382f182, 0xe0968a95, 0x25aa07ac,
<     0x66be7cbb, 0xafd31ddf, 0xecc766c8, 0x29fbebf1, 0x6aef90e6,
<     0xbb202939, 0xf834522e, 0x3d08df17, 0x7e1ca400, 0xb771c564,
<     0xf465be73, 0x3159334a, 0x724d485d, 0xd2c0312e, 0x91d44a39,
<     0x54e8c700, 0x17fcbc17, 0xde91dd73, 0x9d85a664, 0x58b92b5d,
<     0x1bad504a, 0xca62e995, 0x89769282, 0x4c4a1fbb, 0x0f5e64ac,
<     0xc63305c8, 0x85277edf, 0x401bf3e6, 0x030f88f1, 0x070392de,
<     0x4417e9c9, 0x812b64f0, 0xc23f1fe7, 0x0b527e83, 0x48460594,
<     0x8d7a88ad, 0xce6ef3ba, 0x1fa14a65, 0x5cb53172, 0x9989bc4b,
<     0xda9dc75c, 0x13f0a638, 0x50e4dd2f, 0x95d85016, 0xd6cc2b01,
<     0x76415272, 0x35552965, 0xf069a45c, 0xb37ddf4b, 0x7a10be2f,
<     0x3904c538, 0xfc384801, 0xbf2c3316, 0x6ee38ac9, 0x2df7f1de,
<     0xe8cb7ce7, 0xabdf07f0, 0x62b26694, 0x21a61d83, 0xe49a90ba,
<     0xa78eebad, 0xa481635c, 0xe795184b, 0x22a99572, 0x61bdee65,
<     0xa8d08f01, 0xebc4f416, 0x2ef8792f, 0x6dec0238, 0xbc23bbe7,
<     0xff37c0f0, 0x3a0b4dc9, 0x791f36de, 0xb07257ba, 0xf3662cad,
<     0x365aa194, 0x754eda83, 0xd5c3a3f0, 0x96d7d8e7, 0x53eb55de,
<     0x10ff2ec9, 0xd9924fad, 0x9a8634ba, 0x5fbab983, 0x1caec294,
<     0xcd617b4b, 0x8e75005c, 0x4b498d65, 0x085df672, 0xc1309716,
<     0x8224ec01, 0x47186138, 0x040c1a2f, 0x4f005566, 0x0c142e71,
<     0xc928a348, 0x8a3cd85f, 0x4351b93b, 0x0045c22c, 0xc5794f15,
<     0x866d3402, 0x57a28ddd, 0x14b6f6ca, 0xd18a7bf3, 0x929e00e4,
<     0x5bf36180, 0x18e71a97, 0xdddb97ae, 0x9ecfecb9, 0x3e4295ca,
<     0x7d56eedd, 0xb86a63e4, 0xfb7e18f3, 0x32137997, 0x71070280,
<     0xb43b8fb9, 0xf72ff4ae, 0x26e04d71, 0x65f43666, 0xa0c8bb5f,
<     0xe3dcc048, 0x2ab1a12c, 0x69a5da3b, 0xac995702, 0xef8d2c15,
<     0xec82a4e4, 0xaf96dff3, 0x6aaa52ca, 0x29be29dd, 0xe0d348b9,
<     0xa3c733ae, 0x66fbbe97, 0x25efc580, 0xf4207c5f, 0xb7340748,
<     0x72088a71, 0x311cf166, 0xf8719002, 0xbb65eb15, 0x7e59662c,
<     0x3d4d1d3b, 0x9dc06448, 0xded41f5f, 0x1be89266, 0x58fce971,
<     0x91918815, 0xd285f302, 0x17b97e3b, 0x54ad052c, 0x8562bcf3,
<     0xc676c7e4, 0x034a4add, 0x405e31ca, 0x893350ae, 0xca272bb9,
<     0x0f1ba680, 0x4c0fdd97, 0x4803c7b8, 0x0b17bcaf, 0xce2b3196,
<     0x8d3f4a81, 0x44522be5, 0x074650f2, 0xc27addcb, 0x816ea6dc,
<     0x50a11f03, 0x13b56414, 0xd689e92d, 0x959d923a, 0x5cf0f35e,
<     0x1fe48849, 0xdad80570, 0x99cc7e67, 0x39410714, 0x7a557c03,
<     0xbf69f13a, 0xfc7d8a2d, 0x3510eb49, 0x7604905e, 0xb3381d67,
<     0xf02c6670, 0x21e3dfaf, 0x62f7a4b8, 0xa7cb2981, 0xe4df5296,
<     0x2db233f2, 0x6ea648e5, 0xab9ac5dc, 0xe88ebecb, 0xeb81363a,
<     0xa8954d2d, 0x6da9c014, 0x2ebdbb03, 0xe7d0da67, 0xa4c4a170,
<     0x61f82c49, 0x22ec575e, 0xf323ee81, 0xb0379596, 0x750b18af,
<     0x361f63b8, 0xff7202dc, 0xbc6679cb, 0x795af4f2, 0x3a4e8fe5,
<     0x9ac3f696, 0xd9d78d81, 0x1ceb00b8, 0x5fff7baf, 0x96921acb,
<     0xd58661dc, 0x10baece5, 0x53ae97f2, 0x82612e2d, 0xc175553a,
<     0x0449d803, 0x475da314, 0x8e30c270, 0xcd24b967, 0x0818345e,
<     0x4b0c4f49},
<    {0x00000000, 0x3e6bc2ef, 0x3dd0f504, 0x03bb37eb, 0x7aa0eb09,
<     0x44cb29e6, 0x47701e0d, 0x791bdce2, 0xf440d713, 0xca2b15fc,
<     0xc9902217, 0xf7fbe0f8, 0x8ee03c1a, 0xb08bfef5, 0xb330c91e,
<     0x8d5b0bf1, 0xe881ae27, 0xd6ea6cc8, 0xd5515b23, 0xeb3a99cc,
<     0x9221452e, 0xac4a87c1, 0xaff1b02a, 0x919a72c5, 0x1cc17934,
<     0x22aabbdb, 0x21118c30, 0x1f7a4edf, 0x6661923d, 0x580a50d2,
<     0x5bb16739, 0x65daa5d6, 0xd0035d4f, 0xee689fa0, 0xedd3a84b,
<     0xd3b86aa4, 0xaaa3b646, 0x94c874a9, 0x97734342, 0xa91881ad,
<     0x24438a5c, 0x1a2848b3, 0x19937f58, 0x27f8bdb7, 0x5ee36155,
<     0x6088a3ba, 0x63339451, 0x5d5856be, 0x3882f368, 0x06e93187,
<     0x0552066c, 0x3b39c483, 0x42221861, 0x7c49da8e, 0x7ff2ed65,
<     0x41992f8a, 0xccc2247b, 0xf2a9e694, 0xf112d17f, 0xcf791390,
<     0xb662cf72, 0x88090d9d, 0x8bb23a76, 0xb5d9f899, 0xa007ba9e,
<     0x9e6c7871, 0x9dd74f9a, 0xa3bc8d75, 0xdaa75197, 0xe4cc9378,
<     0xe777a493, 0xd91c667c, 0x54476d8d, 0x6a2caf62, 0x69979889,
<     0x57fc5a66, 0x2ee78684, 0x108c446b, 0x13377380, 0x2d5cb16f,
<     0x488614b9, 0x76edd656, 0x7556e1bd, 0x4b3d2352, 0x3226ffb0,
<     0x0c4d3d5f, 0x0ff60ab4, 0x319dc85b, 0xbcc6c3aa, 0x82ad0145,
<     0x811636ae, 0xbf7df441, 0xc66628a3, 0xf80dea4c, 0xfbb6dda7,
<     0xc5dd1f48, 0x7004e7d1, 0x4e6f253e, 0x4dd412d5, 0x73bfd03a,
<     0x0aa40cd8, 0x34cfce37, 0x3774f9dc, 0x091f3b33, 0x844430c2,
<     0xba2ff22d, 0xb994c5c6, 0x87ff0729, 0xfee4dbcb, 0xc08f1924,
<     0xc3342ecf, 0xfd5fec20, 0x988549f6, 0xa6ee8b19, 0xa555bcf2,
<     0x9b3e7e1d, 0xe225a2ff, 0xdc4e6010, 0xdff557fb, 0xe19e9514,
<     0x6cc59ee5, 0x52ae5c0a, 0x51156be1, 0x6f7ea90e, 0x166575ec,
<     0x280eb703, 0x2bb580e8, 0x15de4207, 0x010905e6, 0x3f62c709,
<     0x3cd9f0e2, 0x02b2320d, 0x7ba9eeef, 0x45c22c00, 0x46791beb,
<     0x7812d904, 0xf549d2f5, 0xcb22101a, 0xc89927f1, 0xf6f2e51e,
<     0x8fe939fc, 0xb182fb13, 0xb239ccf8, 0x8c520e17, 0xe988abc1,
<     0xd7e3692e, 0xd4585ec5, 0xea339c2a, 0x932840c8, 0xad438227,
<     0xaef8b5cc, 0x90937723, 0x1dc87cd2, 0x23a3be3d, 0x201889d6,
<     0x1e734b39, 0x676897db, 0x59035534, 0x5ab862df, 0x64d3a030,
<     0xd10a58a9, 0xef619a46, 0xecdaadad, 0xd2b16f42, 0xabaab3a0,
<     0x95c1714f, 0x967a46a4, 0xa811844b, 0x254a8fba, 0x1b214d55,
<     0x189a7abe, 0x26f1b851, 0x5fea64b3, 0x6181a65c, 0x623a91b7,
<     0x5c515358, 0x398bf68e, 0x07e03461, 0x045b038a, 0x3a30c165,
<     0x432b1d87, 0x7d40df68, 0x7efbe883, 0x40902a6c, 0xcdcb219d,
<     0xf3a0e372, 0xf01bd499, 0xce701676, 0xb76bca94, 0x8900087b,
<     0x8abb3f90, 0xb4d0fd7f, 0xa10ebf78, 0x9f657d97, 0x9cde4a7c,
<     0xa2b58893, 0xdbae5471, 0xe5c5969e, 0xe67ea175, 0xd815639a,
<     0x554e686b, 0x6b25aa84, 0x689e9d6f, 0x56f55f80, 0x2fee8362,
<     0x1185418d, 0x123e7666, 0x2c55b489, 0x498f115f, 0x77e4d3b0,
<     0x745fe45b, 0x4a3426b4, 0x332ffa56, 0x0d4438b9, 0x0eff0f52,
<     0x3094cdbd, 0xbdcfc64c, 0x83a404a3, 0x801f3348, 0xbe74f1a7,
<     0xc76f2d45, 0xf904efaa, 0xfabfd841, 0xc4d41aae, 0x710de237,
<     0x4f6620d8, 0x4cdd1733, 0x72b6d5dc, 0x0bad093e, 0x35c6cbd1,
<     0x367dfc3a, 0x08163ed5, 0x854d3524, 0xbb26f7cb, 0xb89dc020,
<     0x86f602cf, 0xffedde2d, 0xc1861cc2, 0xc23d2b29, 0xfc56e9c6,
<     0x998c4c10, 0xa7e78eff, 0xa45cb914, 0x9a377bfb, 0xe32ca719,
<     0xdd4765f6, 0xdefc521d, 0xe09790f2, 0x6dcc9b03, 0x53a759ec,
<     0x501c6e07, 0x6e77ace8, 0x176c700a, 0x2907b2e5, 0x2abc850e,
<     0x14d747e1},
<    {0x00000000, 0xc0df8ec1, 0xc1b96c58, 0x0166e299, 0x8273d9b0,
<     0x42ac5771, 0x43cab5e8, 0x83153b29, 0x45e1c3ba, 0x853e4d7b,
<     0x8458afe2, 0x44872123, 0xc7921a0a, 0x074d94cb, 0x062b7652,
<     0xc6f4f893, 0xcbc4f6ae, 0x0b1b786f, 0x0a7d9af6, 0xcaa21437,
<     0x49b72f1e, 0x8968a1df, 0x880e4346, 0x48d1cd87, 0x8e253514,
<     0x4efabbd5, 0x4f9c594c, 0x8f43d78d, 0x0c56eca4, 0xcc896265,
<     0xcdef80fc, 0x0d300e3d, 0xd78f9c86, 0x17501247, 0x1636f0de,
<     0xd6e97e1f, 0x55fc4536, 0x9523cbf7, 0x9445296e, 0x549aa7af,
<     0x926e5f3c, 0x52b1d1fd, 0x53d73364, 0x9308bda5, 0x101d868c,
<     0xd0c2084d, 0xd1a4ead4, 0x117b6415, 0x1c4b6a28, 0xdc94e4e9,
<     0xddf20670, 0x1d2d88b1, 0x9e38b398, 0x5ee73d59, 0x5f81dfc0,
<     0x9f5e5101, 0x59aaa992, 0x99752753, 0x9813c5ca, 0x58cc4b0b,
<     0xdbd97022, 0x1b06fee3, 0x1a601c7a, 0xdabf92bb, 0xef1948d6,
<     0x2fc6c617, 0x2ea0248e, 0xee7faa4f, 0x6d6a9166, 0xadb51fa7,
<     0xacd3fd3e, 0x6c0c73ff, 0xaaf88b6c, 0x6a2705ad, 0x6b41e734,
<     0xab9e69f5, 0x288b52dc, 0xe854dc1d, 0xe9323e84, 0x29edb045,
<     0x24ddbe78, 0xe40230b9, 0xe564d220, 0x25bb5ce1, 0xa6ae67c8,
<     0x6671e909, 0x67170b90, 0xa7c88551, 0x613c7dc2, 0xa1e3f303,
<     0xa085119a, 0x605a9f5b, 0xe34fa472, 0x23902ab3, 0x22f6c82a,
<     0xe22946eb, 0x3896d450, 0xf8495a91, 0xf92fb808, 0x39f036c9,
<     0xbae50de0, 0x7a3a8321, 0x7b5c61b8, 0xbb83ef79, 0x7d7717ea,
<     0xbda8992b, 0xbcce7bb2, 0x7c11f573, 0xff04ce5a, 0x3fdb409b,
<     0x3ebda202, 0xfe622cc3, 0xf35222fe, 0x338dac3f, 0x32eb4ea6,
<     0xf234c067, 0x7121fb4e, 0xb1fe758f, 0xb0989716, 0x704719d7,
<     0xb6b3e144, 0x766c6f85, 0x770a8d1c, 0xb7d503dd, 0x34c038f4,
<     0xf41fb635, 0xf57954ac, 0x35a6da6d, 0x9f35e177, 0x5fea6fb6,
<     0x5e8c8d2f, 0x9e5303ee, 0x1d4638c7, 0xdd99b606, 0xdcff549f,
<     0x1c20da5e, 0xdad422cd, 0x1a0bac0c, 0x1b6d4e95, 0xdbb2c054,
<     0x58a7fb7d, 0x987875bc, 0x991e9725, 0x59c119e4, 0x54f117d9,
<     0x942e9918, 0x95487b81, 0x5597f540, 0xd682ce69, 0x165d40a8,
<     0x173ba231, 0xd7e42cf0, 0x1110d463, 0xd1cf5aa2, 0xd0a9b83b,
<     0x107636fa, 0x93630dd3, 0x53bc8312, 0x52da618b, 0x9205ef4a,
<     0x48ba7df1, 0x8865f330, 0x890311a9, 0x49dc9f68, 0xcac9a441,
<     0x0a162a80, 0x0b70c819, 0xcbaf46d8, 0x0d5bbe4b, 0xcd84308a,
<     0xcce2d213, 0x0c3d5cd2, 0x8f2867fb, 0x4ff7e93a, 0x4e910ba3,
<     0x8e4e8562, 0x837e8b5f, 0x43a1059e, 0x42c7e707, 0x821869c6,
<     0x010d52ef, 0xc1d2dc2e, 0xc0b43eb7, 0x006bb076, 0xc69f48e5,
<     0x0640c624, 0x072624bd, 0xc7f9aa7c, 0x44ec9155, 0x84331f94,
<     0x8555fd0d, 0x458a73cc, 0x702ca9a1, 0xb0f32760, 0xb195c5f9,
<     0x714a4b38, 0xf25f7011, 0x3280fed0, 0x33e61c49, 0xf3399288,
<     0x35cd6a1b, 0xf512e4da, 0xf4740643, 0x34ab8882, 0xb7beb3ab,
<     0x77613d6a, 0x7607dff3, 0xb6d85132, 0xbbe85f0f, 0x7b37d1ce,
<     0x7a513357, 0xba8ebd96, 0x399b86bf, 0xf944087e, 0xf822eae7,
<     0x38fd6426, 0xfe099cb5, 0x3ed61274, 0x3fb0f0ed, 0xff6f7e2c,
<     0x7c7a4505, 0xbca5cbc4, 0xbdc3295d, 0x7d1ca79c, 0xa7a33527,
<     0x677cbbe6, 0x661a597f, 0xa6c5d7be, 0x25d0ec97, 0xe50f6256,
<     0xe46980cf, 0x24b60e0e, 0xe242f69d, 0x229d785c, 0x23fb9ac5,
<     0xe3241404, 0x60312f2d, 0xa0eea1ec, 0xa1884375, 0x6157cdb4,
<     0x6c67c389, 0xacb84d48, 0xaddeafd1, 0x6d012110, 0xee141a39,
<     0x2ecb94f8, 0x2fad7661, 0xef72f8a0, 0x29860033, 0xe9598ef2,
<     0xe83f6c6b, 0x28e0e2aa, 0xabf5d983, 0x6b2a5742, 0x6a4cb5db,
<     0xaa933b1a},
<    {0x00000000, 0x6f4ca59b, 0x9f9e3bec, 0xf0d29e77, 0x7f3b0603,
<     0x1077a398, 0xe0a53def, 0x8fe99874, 0xfe760c06, 0x913aa99d,
<     0x61e837ea, 0x0ea49271, 0x814d0a05, 0xee01af9e, 0x1ed331e9,
<     0x719f9472, 0xfced180c, 0x93a1bd97, 0x637323e0, 0x0c3f867b,
<     0x83d61e0f, 0xec9abb94, 0x1c4825e3, 0x73048078, 0x029b140a,
<     0x6dd7b191, 0x9d052fe6, 0xf2498a7d, 0x7da01209, 0x12ecb792,
<     0xe23e29e5, 0x8d728c7e, 0xf8db3118, 0x97979483, 0x67450af4,
<     0x0809af6f, 0x87e0371b, 0xe8ac9280, 0x187e0cf7, 0x7732a96c,
<     0x06ad3d1e, 0x69e19885, 0x993306f2, 0xf67fa369, 0x79963b1d,
<     0x16da9e86, 0xe60800f1, 0x8944a56a, 0x04362914, 0x6b7a8c8f,
<     0x9ba812f8, 0xf4e4b763, 0x7b0d2f17, 0x14418a8c, 0xe49314fb,
<     0x8bdfb160, 0xfa402512, 0x950c8089, 0x65de1efe, 0x0a92bb65,
<     0x857b2311, 0xea37868a, 0x1ae518fd, 0x75a9bd66, 0xf0b76330,
<     0x9ffbc6ab, 0x6f2958dc, 0x0065fd47, 0x8f8c6533, 0xe0c0c0a8,
<     0x10125edf, 0x7f5efb44, 0x0ec16f36, 0x618dcaad, 0x915f54da,
<     0xfe13f141, 0x71fa6935, 0x1eb6ccae, 0xee6452d9, 0x8128f742,
<     0x0c5a7b3c, 0x6316dea7, 0x93c440d0, 0xfc88e54b, 0x73617d3f,
<     0x1c2dd8a4, 0xecff46d3, 0x83b3e348, 0xf22c773a, 0x9d60d2a1,
<     0x6db24cd6, 0x02fee94d, 0x8d177139, 0xe25bd4a2, 0x12894ad5,
<     0x7dc5ef4e, 0x086c5228, 0x6720f7b3, 0x97f269c4, 0xf8becc5f,
<     0x7757542b, 0x181bf1b0, 0xe8c96fc7, 0x8785ca5c, 0xf61a5e2e,
<     0x9956fbb5, 0x698465c2, 0x06c8c059, 0x8921582d, 0xe66dfdb6,
<     0x16bf63c1, 0x79f3c65a, 0xf4814a24, 0x9bcdefbf, 0x6b1f71c8,
<     0x0453d453, 0x8bba4c27, 0xe4f6e9bc, 0x142477cb, 0x7b68d250,
<     0x0af74622, 0x65bbe3b9, 0x95697dce, 0xfa25d855, 0x75cc4021,
<     0x1a80e5ba, 0xea527bcd, 0x851ede56, 0xe06fc760, 0x8f2362fb,
<     0x7ff1fc8c, 0x10bd5917, 0x9f54c163, 0xf01864f8, 0x00cafa8f,
<     0x6f865f14, 0x1e19cb66, 0x71556efd, 0x8187f08a, 0xeecb5511,
<     0x6122cd65, 0x0e6e68fe, 0xfebcf689, 0x91f05312, 0x1c82df6c,
<     0x73ce7af7, 0x831ce480, 0xec50411b, 0x63b9d96f, 0x0cf57cf4,
<     0xfc27e283, 0x936b4718, 0xe2f4d36a, 0x8db876f1, 0x7d6ae886,
<     0x12264d1d, 0x9dcfd569, 0xf28370f2, 0x0251ee85, 0x6d1d4b1e,
<     0x18b4f678, 0x77f853e3, 0x872acd94, 0xe866680f, 0x678ff07b,
<     0x08c355e0, 0xf811cb97, 0x975d6e0c, 0xe6c2fa7e, 0x898e5fe5,
<     0x795cc192, 0x16106409, 0x99f9fc7d, 0xf6b559e6, 0x0667c791,
<     0x692b620a, 0xe459ee74, 0x8b154bef, 0x7bc7d598, 0x148b7003,
<     0x9b62e877, 0xf42e4dec, 0x04fcd39b, 0x6bb07600, 0x1a2fe272,
<     0x756347e9, 0x85b1d99e, 0xeafd7c05, 0x6514e471, 0x0a5841ea,
<     0xfa8adf9d, 0x95c67a06, 0x10d8a450, 0x7f9401cb, 0x8f469fbc,
<     0xe00a3a27, 0x6fe3a253, 0x00af07c8, 0xf07d99bf, 0x9f313c24,
<     0xeeaea856, 0x81e20dcd, 0x713093ba, 0x1e7c3621, 0x9195ae55,
<     0xfed90bce, 0x0e0b95b9, 0x61473022, 0xec35bc5c, 0x837919c7,
<     0x73ab87b0, 0x1ce7222b, 0x930eba5f, 0xfc421fc4, 0x0c9081b3,
<     0x63dc2428, 0x1243b05a, 0x7d0f15c1, 0x8ddd8bb6, 0xe2912e2d,
<     0x6d78b659, 0x023413c2, 0xf2e68db5, 0x9daa282e, 0xe8039548,
<     0x874f30d3, 0x779daea4, 0x18d10b3f, 0x9738934b, 0xf87436d0,
<     0x08a6a8a7, 0x67ea0d3c, 0x1675994e, 0x79393cd5, 0x89eba2a2,
<     0xe6a70739, 0x694e9f4d, 0x06023ad6, 0xf6d0a4a1, 0x999c013a,
<     0x14ee8d44, 0x7ba228df, 0x8b70b6a8, 0xe43c1333, 0x6bd58b47,
<     0x04992edc, 0xf44bb0ab, 0x9b071530, 0xea988142, 0x85d424d9,
<     0x7506baae, 0x1a4a1f35, 0x95a38741, 0xfaef22da, 0x0a3dbcad,
<     0x65711936}};
< 
< #endif
< 
< #endif
< 
< #if N == 4
< 
< #if W == 8
< 
< local const z_crc_t FAR crc_braid_table[][256] = {
<    {0x00000000, 0xf1da05aa, 0x38c50d15, 0xc91f08bf, 0x718a1a2a,
<     0x80501f80, 0x494f173f, 0xb8951295, 0xe3143454, 0x12ce31fe,
<     0xdbd13941, 0x2a0b3ceb, 0x929e2e7e, 0x63442bd4, 0xaa5b236b,
<     0x5b8126c1, 0x1d596ee9, 0xec836b43, 0x259c63fc, 0xd4466656,
<     0x6cd374c3, 0x9d097169, 0x541679d6, 0xa5cc7c7c, 0xfe4d5abd,
<     0x0f975f17, 0xc68857a8, 0x37525202, 0x8fc74097, 0x7e1d453d,
<     0xb7024d82, 0x46d84828, 0x3ab2ddd2, 0xcb68d878, 0x0277d0c7,
<     0xf3add56d, 0x4b38c7f8, 0xbae2c252, 0x73fdcaed, 0x8227cf47,
<     0xd9a6e986, 0x287cec2c, 0xe163e493, 0x10b9e139, 0xa82cf3ac,
<     0x59f6f606, 0x90e9feb9, 0x6133fb13, 0x27ebb33b, 0xd631b691,
<     0x1f2ebe2e, 0xeef4bb84, 0x5661a911, 0xa7bbacbb, 0x6ea4a404,
<     0x9f7ea1ae, 0xc4ff876f, 0x352582c5, 0xfc3a8a7a, 0x0de08fd0,
<     0xb5759d45, 0x44af98ef, 0x8db09050, 0x7c6a95fa, 0x7565bba4,
<     0x84bfbe0e, 0x4da0b6b1, 0xbc7ab31b, 0x04efa18e, 0xf535a424,
<     0x3c2aac9b, 0xcdf0a931, 0x96718ff0, 0x67ab8a5a, 0xaeb482e5,
<     0x5f6e874f, 0xe7fb95da, 0x16219070, 0xdf3e98cf, 0x2ee49d65,
<     0x683cd54d, 0x99e6d0e7, 0x50f9d858, 0xa123ddf2, 0x19b6cf67,
<     0xe86ccacd, 0x2173c272, 0xd0a9c7d8, 0x8b28e119, 0x7af2e4b3,
<     0xb3edec0c, 0x4237e9a6, 0xfaa2fb33, 0x0b78fe99, 0xc267f626,
<     0x33bdf38c, 0x4fd76676, 0xbe0d63dc, 0x77126b63, 0x86c86ec9,
<     0x3e5d7c5c, 0xcf8779f6, 0x06987149, 0xf74274e3, 0xacc35222,
<     0x5d195788, 0x94065f37, 0x65dc5a9d, 0xdd494808, 0x2c934da2,
<     0xe58c451d, 0x145640b7, 0x528e089f, 0xa3540d35, 0x6a4b058a,
<     0x9b910020, 0x230412b5, 0xd2de171f, 0x1bc11fa0, 0xea1b1a0a,
<     0xb19a3ccb, 0x40403961, 0x895f31de, 0x78853474, 0xc01026e1,
<     0x31ca234b, 0xf8d52bf4, 0x090f2e5e, 0xeacb7748, 0x1b1172e2,
<     0xd20e7a5d, 0x23d47ff7, 0x9b416d62, 0x6a9b68c8, 0xa3846077,
<     0x525e65dd, 0x09df431c, 0xf80546b6, 0x311a4e09, 0xc0c04ba3,
<     0x78555936, 0x898f5c9c, 0x40905423, 0xb14a5189, 0xf79219a1,
<     0x06481c0b, 0xcf5714b4, 0x3e8d111e, 0x8618038b, 0x77c20621,
<     0xbedd0e9e, 0x4f070b34, 0x14862df5, 0xe55c285f, 0x2c4320e0,
<     0xdd99254a, 0x650c37df, 0x94d63275, 0x5dc93aca, 0xac133f60,
<     0xd079aa9a, 0x21a3af30, 0xe8bca78f, 0x1966a225, 0xa1f3b0b0,
<     0x5029b51a, 0x9936bda5, 0x68ecb80f, 0x336d9ece, 0xc2b79b64,
<     0x0ba893db, 0xfa729671, 0x42e784e4, 0xb33d814e, 0x7a2289f1,
<     0x8bf88c5b, 0xcd20c473, 0x3cfac1d9, 0xf5e5c966, 0x043fcccc,
<     0xbcaade59, 0x4d70dbf3, 0x846fd34c, 0x75b5d6e6, 0x2e34f027,
<     0xdfeef58d, 0x16f1fd32, 0xe72bf898, 0x5fbeea0d, 0xae64efa7,
<     0x677be718, 0x96a1e2b2, 0x9faeccec, 0x6e74c946, 0xa76bc1f9,
<     0x56b1c453, 0xee24d6c6, 0x1ffed36c, 0xd6e1dbd3, 0x273bde79,
<     0x7cbaf8b8, 0x8d60fd12, 0x447ff5ad, 0xb5a5f007, 0x0d30e292,
<     0xfceae738, 0x35f5ef87, 0xc42fea2d, 0x82f7a205, 0x732da7af,
<     0xba32af10, 0x4be8aaba, 0xf37db82f, 0x02a7bd85, 0xcbb8b53a,
<     0x3a62b090, 0x61e39651, 0x903993fb, 0x59269b44, 0xa8fc9eee,
<     0x10698c7b, 0xe1b389d1, 0x28ac816e, 0xd97684c4, 0xa51c113e,
<     0x54c61494, 0x9dd91c2b, 0x6c031981, 0xd4960b14, 0x254c0ebe,
<     0xec530601, 0x1d8903ab, 0x4608256a, 0xb7d220c0, 0x7ecd287f,
<     0x8f172dd5, 0x37823f40, 0xc6583aea, 0x0f473255, 0xfe9d37ff,
<     0xb8457fd7, 0x499f7a7d, 0x808072c2, 0x715a7768, 0xc9cf65fd,
<     0x38156057, 0xf10a68e8, 0x00d06d42, 0x5b514b83, 0xaa8b4e29,
<     0x63944696, 0x924e433c, 0x2adb51a9, 0xdb015403, 0x121e5cbc,
<     0xe3c45916},
<    {0x00000000, 0x0ee7e8d1, 0x1dcfd1a2, 0x13283973, 0x3b9fa344,
<     0x35784b95, 0x265072e6, 0x28b79a37, 0x773f4688, 0x79d8ae59,
<     0x6af0972a, 0x64177ffb, 0x4ca0e5cc, 0x42470d1d, 0x516f346e,
<     0x5f88dcbf, 0xee7e8d10, 0xe09965c1, 0xf3b15cb2, 0xfd56b463,
<     0xd5e12e54, 0xdb06c685, 0xc82efff6, 0xc6c91727, 0x9941cb98,
<     0x97a62349, 0x848e1a3a, 0x8a69f2eb, 0xa2de68dc, 0xac39800d,
<     0xbf11b97e, 0xb1f651af, 0x078c1c61, 0x096bf4b0, 0x1a43cdc3,
<     0x14a42512, 0x3c13bf25, 0x32f457f4, 0x21dc6e87, 0x2f3b8656,
<     0x70b35ae9, 0x7e54b238, 0x6d7c8b4b, 0x639b639a, 0x4b2cf9ad,
<     0x45cb117c, 0x56e3280f, 0x5804c0de, 0xe9f29171, 0xe71579a0,
<     0xf43d40d3, 0xfadaa802, 0xd26d3235, 0xdc8adae4, 0xcfa2e397,
<     0xc1450b46, 0x9ecdd7f9, 0x902a3f28, 0x8302065b, 0x8de5ee8a,
<     0xa55274bd, 0xabb59c6c, 0xb89da51f, 0xb67a4dce, 0x0f1838c2,
<     0x01ffd013, 0x12d7e960, 0x1c3001b1, 0x34879b86, 0x3a607357,
<     0x29484a24, 0x27afa2f5, 0x78277e4a, 0x76c0969b, 0x65e8afe8,
<     0x6b0f4739, 0x43b8dd0e, 0x4d5f35df, 0x5e770cac, 0x5090e47d,
<     0xe166b5d2, 0xef815d03, 0xfca96470, 0xf24e8ca1, 0xdaf91696,
<     0xd41efe47, 0xc736c734, 0xc9d12fe5, 0x9659f35a, 0x98be1b8b,
<     0x8b9622f8, 0x8571ca29, 0xadc6501e, 0xa321b8cf, 0xb00981bc,
<     0xbeee696d, 0x089424a3, 0x0673cc72, 0x155bf501, 0x1bbc1dd0,
<     0x330b87e7, 0x3dec6f36, 0x2ec45645, 0x2023be94, 0x7fab622b,
<     0x714c8afa, 0x6264b389, 0x6c835b58, 0x4434c16f, 0x4ad329be,
<     0x59fb10cd, 0x571cf81c, 0xe6eaa9b3, 0xe80d4162, 0xfb257811,
<     0xf5c290c0, 0xdd750af7, 0xd392e226, 0xc0badb55, 0xce5d3384,
<     0x91d5ef3b, 0x9f3207ea, 0x8c1a3e99, 0x82fdd648, 0xaa4a4c7f,
<     0xa4ada4ae, 0xb7859ddd, 0xb962750c, 0x1e307184, 0x10d79955,
<     0x03ffa026, 0x0d1848f7, 0x25afd2c0, 0x2b483a11, 0x38600362,
<     0x3687ebb3, 0x690f370c, 0x67e8dfdd, 0x74c0e6ae, 0x7a270e7f,
<     0x52909448, 0x5c777c99, 0x4f5f45ea, 0x41b8ad3b, 0xf04efc94,
<     0xfea91445, 0xed812d36, 0xe366c5e7, 0xcbd15fd0, 0xc536b701,
<     0xd61e8e72, 0xd8f966a3, 0x8771ba1c, 0x899652cd, 0x9abe6bbe,
<     0x9459836f, 0xbcee1958, 0xb209f189, 0xa121c8fa, 0xafc6202b,
<     0x19bc6de5, 0x175b8534, 0x0473bc47, 0x0a945496, 0x2223cea1,
<     0x2cc42670, 0x3fec1f03, 0x310bf7d2, 0x6e832b6d, 0x6064c3bc,
<     0x734cfacf, 0x7dab121e, 0x551c8829, 0x5bfb60f8, 0x48d3598b,
<     0x4634b15a, 0xf7c2e0f5, 0xf9250824, 0xea0d3157, 0xe4ead986,
<     0xcc5d43b1, 0xc2baab60, 0xd1929213, 0xdf757ac2, 0x80fda67d,
<     0x8e1a4eac, 0x9d3277df, 0x93d59f0e, 0xbb620539, 0xb585ede8,
<     0xa6add49b, 0xa84a3c4a, 0x11284946, 0x1fcfa197, 0x0ce798e4,
<     0x02007035, 0x2ab7ea02, 0x245002d3, 0x37783ba0, 0x399fd371,
<     0x66170fce, 0x68f0e71f, 0x7bd8de6c, 0x753f36bd, 0x5d88ac8a,
<     0x536f445b, 0x40477d28, 0x4ea095f9, 0xff56c456, 0xf1b12c87,
<     0xe29915f4, 0xec7efd25, 0xc4c96712, 0xca2e8fc3, 0xd906b6b0,
<     0xd7e15e61, 0x886982de, 0x868e6a0f, 0x95a6537c, 0x9b41bbad,
<     0xb3f6219a, 0xbd11c94b, 0xae39f038, 0xa0de18e9, 0x16a45527,
<     0x1843bdf6, 0x0b6b8485, 0x058c6c54, 0x2d3bf663, 0x23dc1eb2,
<     0x30f427c1, 0x3e13cf10, 0x619b13af, 0x6f7cfb7e, 0x7c54c20d,
<     0x72b32adc, 0x5a04b0eb, 0x54e3583a, 0x47cb6149, 0x492c8998,
<     0xf8dad837, 0xf63d30e6, 0xe5150995, 0xebf2e144, 0xc3457b73,
<     0xcda293a2, 0xde8aaad1, 0xd06d4200, 0x8fe59ebf, 0x8102766e,
<     0x922a4f1d, 0x9ccda7cc, 0xb47a3dfb, 0xba9dd52a, 0xa9b5ec59,
<     0xa7520488},
<    {0x00000000, 0x3c60e308, 0x78c1c610, 0x44a12518, 0xf1838c20,
<     0xcde36f28, 0x89424a30, 0xb522a938, 0x38761e01, 0x0416fd09,
<     0x40b7d811, 0x7cd73b19, 0xc9f59221, 0xf5957129, 0xb1345431,
<     0x8d54b739, 0x70ec3c02, 0x4c8cdf0a, 0x082dfa12, 0x344d191a,
<     0x816fb022, 0xbd0f532a, 0xf9ae7632, 0xc5ce953a, 0x489a2203,
<     0x74fac10b, 0x305be413, 0x0c3b071b, 0xb919ae23, 0x85794d2b,
<     0xc1d86833, 0xfdb88b3b, 0xe1d87804, 0xddb89b0c, 0x9919be14,
<     0xa5795d1c, 0x105bf424, 0x2c3b172c, 0x689a3234, 0x54fad13c,
<     0xd9ae6605, 0xe5ce850d, 0xa16fa015, 0x9d0f431d, 0x282dea25,
<     0x144d092d, 0x50ec2c35, 0x6c8ccf3d, 0x91344406, 0xad54a70e,
<     0xe9f58216, 0xd595611e, 0x60b7c826, 0x5cd72b2e, 0x18760e36,
<     0x2416ed3e, 0xa9425a07, 0x9522b90f, 0xd1839c17, 0xede37f1f,
<     0x58c1d627, 0x64a1352f, 0x20001037, 0x1c60f33f, 0x18c1f649,
<     0x24a11541, 0x60003059, 0x5c60d351, 0xe9427a69, 0xd5229961,
<     0x9183bc79, 0xade35f71, 0x20b7e848, 0x1cd70b40, 0x58762e58,
<     0x6416cd50, 0xd1346468, 0xed548760, 0xa9f5a278, 0x95954170,
<     0x682dca4b, 0x544d2943, 0x10ec0c5b, 0x2c8cef53, 0x99ae466b,
<     0xa5cea563, 0xe16f807b, 0xdd0f6373, 0x505bd44a, 0x6c3b3742,
<     0x289a125a, 0x14faf152, 0xa1d8586a, 0x9db8bb62, 0xd9199e7a,
<     0xe5797d72, 0xf9198e4d, 0xc5796d45, 0x81d8485d, 0xbdb8ab55,
<     0x089a026d, 0x34fae165, 0x705bc47d, 0x4c3b2775, 0xc16f904c,
<     0xfd0f7344, 0xb9ae565c, 0x85ceb554, 0x30ec1c6c, 0x0c8cff64,
<     0x482dda7c, 0x744d3974, 0x89f5b24f, 0xb5955147, 0xf134745f,
<     0xcd549757, 0x78763e6f, 0x4416dd67, 0x00b7f87f, 0x3cd71b77,
<     0xb183ac4e, 0x8de34f46, 0xc9426a5e, 0xf5228956, 0x4000206e,
<     0x7c60c366, 0x38c1e67e, 0x04a10576, 0x3183ec92, 0x0de30f9a,
<     0x49422a82, 0x7522c98a, 0xc00060b2, 0xfc6083ba, 0xb8c1a6a2,
<     0x84a145aa, 0x09f5f293, 0x3595119b, 0x71343483, 0x4d54d78b,
<     0xf8767eb3, 0xc4169dbb, 0x80b7b8a3, 0xbcd75bab, 0x416fd090,
<     0x7d0f3398, 0x39ae1680, 0x05cef588, 0xb0ec5cb0, 0x8c8cbfb8,
<     0xc82d9aa0, 0xf44d79a8, 0x7919ce91, 0x45792d99, 0x01d80881,
<     0x3db8eb89, 0x889a42b1, 0xb4faa1b9, 0xf05b84a1, 0xcc3b67a9,
<     0xd05b9496, 0xec3b779e, 0xa89a5286, 0x94fab18e, 0x21d818b6,
<     0x1db8fbbe, 0x5919dea6, 0x65793dae, 0xe82d8a97, 0xd44d699f,
<     0x90ec4c87, 0xac8caf8f, 0x19ae06b7, 0x25cee5bf, 0x616fc0a7,
<     0x5d0f23af, 0xa0b7a894, 0x9cd74b9c, 0xd8766e84, 0xe4168d8c,
<     0x513424b4, 0x6d54c7bc, 0x29f5e2a4, 0x159501ac, 0x98c1b695,
<     0xa4a1559d, 0xe0007085, 0xdc60938d, 0x69423ab5, 0x5522d9bd,
<     0x1183fca5, 0x2de31fad, 0x29421adb, 0x1522f9d3, 0x5183dccb,
<     0x6de33fc3, 0xd8c196fb, 0xe4a175f3, 0xa00050eb, 0x9c60b3e3,
<     0x113404da, 0x2d54e7d2, 0x69f5c2ca, 0x559521c2, 0xe0b788fa,
<     0xdcd76bf2, 0x98764eea, 0xa416ade2, 0x59ae26d9, 0x65cec5d1,
<     0x216fe0c9, 0x1d0f03c1, 0xa82daaf9, 0x944d49f1, 0xd0ec6ce9,
<     0xec8c8fe1, 0x61d838d8, 0x5db8dbd0, 0x1919fec8, 0x25791dc0,
<     0x905bb4f8, 0xac3b57f0, 0xe89a72e8, 0xd4fa91e0, 0xc89a62df,
<     0xf4fa81d7, 0xb05ba4cf, 0x8c3b47c7, 0x3919eeff, 0x05790df7,
<     0x41d828ef, 0x7db8cbe7, 0xf0ec7cde, 0xcc8c9fd6, 0x882dbace,
<     0xb44d59c6, 0x016ff0fe, 0x3d0f13f6, 0x79ae36ee, 0x45ced5e6,
<     0xb8765edd, 0x8416bdd5, 0xc0b798cd, 0xfcd77bc5, 0x49f5d2fd,
<     0x759531f5, 0x313414ed, 0x0d54f7e5, 0x800040dc, 0xbc60a3d4,
<     0xf8c186cc, 0xc4a165c4, 0x7183ccfc, 0x4de32ff4, 0x09420aec,
<     0x3522e9e4},
<    {0x00000000, 0x6307d924, 0xc60fb248, 0xa5086b6c, 0x576e62d1,
<     0x3469bbf5, 0x9161d099, 0xf26609bd, 0xaedcc5a2, 0xcddb1c86,
<     0x68d377ea, 0x0bd4aece, 0xf9b2a773, 0x9ab57e57, 0x3fbd153b,
<     0x5cbacc1f, 0x86c88d05, 0xe5cf5421, 0x40c73f4d, 0x23c0e669,
<     0xd1a6efd4, 0xb2a136f0, 0x17a95d9c, 0x74ae84b8, 0x281448a7,
<     0x4b139183, 0xee1bfaef, 0x8d1c23cb, 0x7f7a2a76, 0x1c7df352,
<     0xb975983e, 0xda72411a, 0xd6e01c4b, 0xb5e7c56f, 0x10efae03,
<     0x73e87727, 0x818e7e9a, 0xe289a7be, 0x4781ccd2, 0x248615f6,
<     0x783cd9e9, 0x1b3b00cd, 0xbe336ba1, 0xdd34b285, 0x2f52bb38,
<     0x4c55621c, 0xe95d0970, 0x8a5ad054, 0x5028914e, 0x332f486a,
<     0x96272306, 0xf520fa22, 0x0746f39f, 0x64412abb, 0xc14941d7,
<     0xa24e98f3, 0xfef454ec, 0x9df38dc8, 0x38fbe6a4, 0x5bfc3f80,
<     0xa99a363d, 0xca9def19, 0x6f958475, 0x0c925d51, 0x76b13ed7,
<     0x15b6e7f3, 0xb0be8c9f, 0xd3b955bb, 0x21df5c06, 0x42d88522,
<     0xe7d0ee4e, 0x84d7376a, 0xd86dfb75, 0xbb6a2251, 0x1e62493d,
<     0x7d659019, 0x8f0399a4, 0xec044080, 0x490c2bec, 0x2a0bf2c8,
<     0xf079b3d2, 0x937e6af6, 0x3676019a, 0x5571d8be, 0xa717d103,
<     0xc4100827, 0x6118634b, 0x021fba6f, 0x5ea57670, 0x3da2af54,
<     0x98aac438, 0xfbad1d1c, 0x09cb14a1, 0x6acccd85, 0xcfc4a6e9,
<     0xacc37fcd, 0xa051229c, 0xc356fbb8, 0x665e90d4, 0x055949f0,
<     0xf73f404d, 0x94389969, 0x3130f205, 0x52372b21, 0x0e8de73e,
<     0x6d8a3e1a, 0xc8825576, 0xab858c52, 0x59e385ef, 0x3ae45ccb,
<     0x9fec37a7, 0xfcebee83, 0x2699af99, 0x459e76bd, 0xe0961dd1,
<     0x8391c4f5, 0x71f7cd48, 0x12f0146c, 0xb7f87f00, 0xd4ffa624,
<     0x88456a3b, 0xeb42b31f, 0x4e4ad873, 0x2d4d0157, 0xdf2b08ea,
<     0xbc2cd1ce, 0x1924baa2, 0x7a236386, 0xed627dae, 0x8e65a48a,
<     0x2b6dcfe6, 0x486a16c2, 0xba0c1f7f, 0xd90bc65b, 0x7c03ad37,
<     0x1f047413, 0x43beb80c, 0x20b96128, 0x85b10a44, 0xe6b6d360,
<     0x14d0dadd, 0x77d703f9, 0xd2df6895, 0xb1d8b1b1, 0x6baaf0ab,
<     0x08ad298f, 0xada542e3, 0xcea29bc7, 0x3cc4927a, 0x5fc34b5e,
<     0xfacb2032, 0x99ccf916, 0xc5763509, 0xa671ec2d, 0x03798741,
<     0x607e5e65, 0x921857d8, 0xf11f8efc, 0x5417e590, 0x37103cb4,
<     0x3b8261e5, 0x5885b8c1, 0xfd8dd3ad, 0x9e8a0a89, 0x6cec0334,
<     0x0febda10, 0xaae3b17c, 0xc9e46858, 0x955ea447, 0xf6597d63,
<     0x5351160f, 0x3056cf2b, 0xc230c696, 0xa1371fb2, 0x043f74de,
<     0x6738adfa, 0xbd4aece0, 0xde4d35c4, 0x7b455ea8, 0x1842878c,
<     0xea248e31, 0x89235715, 0x2c2b3c79, 0x4f2ce55d, 0x13962942,
<     0x7091f066, 0xd5999b0a, 0xb69e422e, 0x44f84b93, 0x27ff92b7,
<     0x82f7f9db, 0xe1f020ff, 0x9bd34379, 0xf8d49a5d, 0x5ddcf131,
<     0x3edb2815, 0xccbd21a8, 0xafbaf88c, 0x0ab293e0, 0x69b54ac4,
<     0x350f86db, 0x56085fff, 0xf3003493, 0x9007edb7, 0x6261e40a,
<     0x01663d2e, 0xa46e5642, 0xc7698f66, 0x1d1bce7c, 0x7e1c1758,
<     0xdb147c34, 0xb813a510, 0x4a75acad, 0x29727589, 0x8c7a1ee5,
<     0xef7dc7c1, 0xb3c70bde, 0xd0c0d2fa, 0x75c8b996, 0x16cf60b2,
<     0xe4a9690f, 0x87aeb02b, 0x22a6db47, 0x41a10263, 0x4d335f32,
<     0x2e348616, 0x8b3ced7a, 0xe83b345e, 0x1a5d3de3, 0x795ae4c7,
<     0xdc528fab, 0xbf55568f, 0xe3ef9a90, 0x80e843b4, 0x25e028d8,
<     0x46e7f1fc, 0xb481f841, 0xd7862165, 0x728e4a09, 0x1189932d,
<     0xcbfbd237, 0xa8fc0b13, 0x0df4607f, 0x6ef3b95b, 0x9c95b0e6,
<     0xff9269c2, 0x5a9a02ae, 0x399ddb8a, 0x65271795, 0x0620ceb1,
<     0xa328a5dd, 0xc02f7cf9, 0x32497544, 0x514eac60, 0xf446c70c,
<     0x97411e28},
<    {0x00000000, 0x01b5fd1d, 0x036bfa3a, 0x02de0727, 0x06d7f474,
<     0x07620969, 0x05bc0e4e, 0x0409f353, 0x0dafe8e8, 0x0c1a15f5,
<     0x0ec412d2, 0x0f71efcf, 0x0b781c9c, 0x0acde181, 0x0813e6a6,
<     0x09a61bbb, 0x1b5fd1d0, 0x1aea2ccd, 0x18342bea, 0x1981d6f7,
<     0x1d8825a4, 0x1c3dd8b9, 0x1ee3df9e, 0x1f562283, 0x16f03938,
<     0x1745c425, 0x159bc302, 0x142e3e1f, 0x1027cd4c, 0x11923051,
<     0x134c3776, 0x12f9ca6b, 0x36bfa3a0, 0x370a5ebd, 0x35d4599a,
<     0x3461a487, 0x306857d4, 0x31ddaac9, 0x3303adee, 0x32b650f3,
<     0x3b104b48, 0x3aa5b655, 0x387bb172, 0x39ce4c6f, 0x3dc7bf3c,
<     0x3c724221, 0x3eac4506, 0x3f19b81b, 0x2de07270, 0x2c558f6d,
<     0x2e8b884a, 0x2f3e7557, 0x2b378604, 0x2a827b19, 0x285c7c3e,
<     0x29e98123, 0x204f9a98, 0x21fa6785, 0x232460a2, 0x22919dbf,
<     0x26986eec, 0x272d93f1, 0x25f394d6, 0x244669cb, 0x6d7f4740,
<     0x6ccaba5d, 0x6e14bd7a, 0x6fa14067, 0x6ba8b334, 0x6a1d4e29,
<     0x68c3490e, 0x6976b413, 0x60d0afa8, 0x616552b5, 0x63bb5592,
<     0x620ea88f, 0x66075bdc, 0x67b2a6c1, 0x656ca1e6, 0x64d95cfb,
<     0x76209690, 0x77956b8d, 0x754b6caa, 0x74fe91b7, 0x70f762e4,
<     0x71429ff9, 0x739c98de, 0x722965c3, 0x7b8f7e78, 0x7a3a8365,
<     0x78e48442, 0x7951795f, 0x7d588a0c, 0x7ced7711, 0x7e337036,
<     0x7f868d2b, 0x5bc0e4e0, 0x5a7519fd, 0x58ab1eda, 0x591ee3c7,
<     0x5d171094, 0x5ca2ed89, 0x5e7ceaae, 0x5fc917b3, 0x566f0c08,
<     0x57daf115, 0x5504f632, 0x54b10b2f, 0x50b8f87c, 0x510d0561,
<     0x53d30246, 0x5266ff5b, 0x409f3530, 0x412ac82d, 0x43f4cf0a,
<     0x42413217, 0x4648c144, 0x47fd3c59, 0x45233b7e, 0x4496c663,
<     0x4d30ddd8, 0x4c8520c5, 0x4e5b27e2, 0x4feedaff, 0x4be729ac,
<     0x4a52d4b1, 0x488cd396, 0x49392e8b, 0xdafe8e80, 0xdb4b739d,
<     0xd99574ba, 0xd82089a7, 0xdc297af4, 0xdd9c87e9, 0xdf4280ce,
<     0xdef77dd3, 0xd7516668, 0xd6e49b75, 0xd43a9c52, 0xd58f614f,
<     0xd186921c, 0xd0336f01, 0xd2ed6826, 0xd358953b, 0xc1a15f50,
<     0xc014a24d, 0xc2caa56a, 0xc37f5877, 0xc776ab24, 0xc6c35639,
<     0xc41d511e, 0xc5a8ac03, 0xcc0eb7b8, 0xcdbb4aa5, 0xcf654d82,
<     0xced0b09f, 0xcad943cc, 0xcb6cbed1, 0xc9b2b9f6, 0xc80744eb,
<     0xec412d20, 0xedf4d03d, 0xef2ad71a, 0xee9f2a07, 0xea96d954,
<     0xeb232449, 0xe9fd236e, 0xe848de73, 0xe1eec5c8, 0xe05b38d5,
<     0xe2853ff2, 0xe330c2ef, 0xe73931bc, 0xe68ccca1, 0xe452cb86,
<     0xe5e7369b, 0xf71efcf0, 0xf6ab01ed, 0xf47506ca, 0xf5c0fbd7,
<     0xf1c90884, 0xf07cf599, 0xf2a2f2be, 0xf3170fa3, 0xfab11418,
<     0xfb04e905, 0xf9daee22, 0xf86f133f, 0xfc66e06c, 0xfdd31d71,
<     0xff0d1a56, 0xfeb8e74b, 0xb781c9c0, 0xb63434dd, 0xb4ea33fa,
<     0xb55fcee7, 0xb1563db4, 0xb0e3c0a9, 0xb23dc78e, 0xb3883a93,
<     0xba2e2128, 0xbb9bdc35, 0xb945db12, 0xb8f0260f, 0xbcf9d55c,
<     0xbd4c2841, 0xbf922f66, 0xbe27d27b, 0xacde1810, 0xad6be50d,
<     0xafb5e22a, 0xae001f37, 0xaa09ec64, 0xabbc1179, 0xa962165e,
<     0xa8d7eb43, 0xa171f0f8, 0xa0c40de5, 0xa21a0ac2, 0xa3aff7df,
<     0xa7a6048c, 0xa613f991, 0xa4cdfeb6, 0xa57803ab, 0x813e6a60,
<     0x808b977d, 0x8255905a, 0x83e06d47, 0x87e99e14, 0x865c6309,
<     0x8482642e, 0x85379933, 0x8c918288, 0x8d247f95, 0x8ffa78b2,
<     0x8e4f85af, 0x8a4676fc, 0x8bf38be1, 0x892d8cc6, 0x889871db,
<     0x9a61bbb0, 0x9bd446ad, 0x990a418a, 0x98bfbc97, 0x9cb64fc4,
<     0x9d03b2d9, 0x9fddb5fe, 0x9e6848e3, 0x97ce5358, 0x967bae45,
<     0x94a5a962, 0x9510547f, 0x9119a72c, 0x90ac5a31, 0x92725d16,
<     0x93c7a00b},
<    {0x00000000, 0x6e8c1b41, 0xdd183682, 0xb3942dc3, 0x61416b45,
<     0x0fcd7004, 0xbc595dc7, 0xd2d54686, 0xc282d68a, 0xac0ecdcb,
<     0x1f9ae008, 0x7116fb49, 0xa3c3bdcf, 0xcd4fa68e, 0x7edb8b4d,
<     0x1057900c, 0x5e74ab55, 0x30f8b014, 0x836c9dd7, 0xede08696,
<     0x3f35c010, 0x51b9db51, 0xe22df692, 0x8ca1edd3, 0x9cf67ddf,
<     0xf27a669e, 0x41ee4b5d, 0x2f62501c, 0xfdb7169a, 0x933b0ddb,
<     0x20af2018, 0x4e233b59, 0xbce956aa, 0xd2654deb, 0x61f16028,
<     0x0f7d7b69, 0xdda83def, 0xb32426ae, 0x00b00b6d, 0x6e3c102c,
<     0x7e6b8020, 0x10e79b61, 0xa373b6a2, 0xcdffade3, 0x1f2aeb65,
<     0x71a6f024, 0xc232dde7, 0xacbec6a6, 0xe29dfdff, 0x8c11e6be,
<     0x3f85cb7d, 0x5109d03c, 0x83dc96ba, 0xed508dfb, 0x5ec4a038,
<     0x3048bb79, 0x201f2b75, 0x4e933034, 0xfd071df7, 0x938b06b6,
<     0x415e4030, 0x2fd25b71, 0x9c4676b2, 0xf2ca6df3, 0xa2a3ab15,
<     0xcc2fb054, 0x7fbb9d97, 0x113786d6, 0xc3e2c050, 0xad6edb11,
<     0x1efaf6d2, 0x7076ed93, 0x60217d9f, 0x0ead66de, 0xbd394b1d,
<     0xd3b5505c, 0x016016da, 0x6fec0d9b, 0xdc782058, 0xb2f43b19,
<     0xfcd70040, 0x925b1b01, 0x21cf36c2, 0x4f432d83, 0x9d966b05,
<     0xf31a7044, 0x408e5d87, 0x2e0246c6, 0x3e55d6ca, 0x50d9cd8b,
<     0xe34de048, 0x8dc1fb09, 0x5f14bd8f, 0x3198a6ce, 0x820c8b0d,
<     0xec80904c, 0x1e4afdbf, 0x70c6e6fe, 0xc352cb3d, 0xadded07c,
<     0x7f0b96fa, 0x11878dbb, 0xa213a078, 0xcc9fbb39, 0xdcc82b35,
<     0xb2443074, 0x01d01db7, 0x6f5c06f6, 0xbd894070, 0xd3055b31,
<     0x609176f2, 0x0e1d6db3, 0x403e56ea, 0x2eb24dab, 0x9d266068,
<     0xf3aa7b29, 0x217f3daf, 0x4ff326ee, 0xfc670b2d, 0x92eb106c,
<     0x82bc8060, 0xec309b21, 0x5fa4b6e2, 0x3128ada3, 0xe3fdeb25,
<     0x8d71f064, 0x3ee5dda7, 0x5069c6e6, 0x9e36506b, 0xf0ba4b2a,
<     0x432e66e9, 0x2da27da8, 0xff773b2e, 0x91fb206f, 0x226f0dac,
<     0x4ce316ed, 0x5cb486e1, 0x32389da0, 0x81acb063, 0xef20ab22,
<     0x3df5eda4, 0x5379f6e5, 0xe0eddb26, 0x8e61c067, 0xc042fb3e,
<     0xaecee07f, 0x1d5acdbc, 0x73d6d6fd, 0xa103907b, 0xcf8f8b3a,
<     0x7c1ba6f9, 0x1297bdb8, 0x02c02db4, 0x6c4c36f5, 0xdfd81b36,
<     0xb1540077, 0x638146f1, 0x0d0d5db0, 0xbe997073, 0xd0156b32,
<     0x22df06c1, 0x4c531d80, 0xffc73043, 0x914b2b02, 0x439e6d84,
<     0x2d1276c5, 0x9e865b06, 0xf00a4047, 0xe05dd04b, 0x8ed1cb0a,
<     0x3d45e6c9, 0x53c9fd88, 0x811cbb0e, 0xef90a04f, 0x5c048d8c,
<     0x328896cd, 0x7cabad94, 0x1227b6d5, 0xa1b39b16, 0xcf3f8057,
<     0x1deac6d1, 0x7366dd90, 0xc0f2f053, 0xae7eeb12, 0xbe297b1e,
<     0xd0a5605f, 0x63314d9c, 0x0dbd56dd, 0xdf68105b, 0xb1e40b1a,
<     0x027026d9, 0x6cfc3d98, 0x3c95fb7e, 0x5219e03f, 0xe18dcdfc,
<     0x8f01d6bd, 0x5dd4903b, 0x33588b7a, 0x80cca6b9, 0xee40bdf8,
<     0xfe172df4, 0x909b36b5, 0x230f1b76, 0x4d830037, 0x9f5646b1,
<     0xf1da5df0, 0x424e7033, 0x2cc26b72, 0x62e1502b, 0x0c6d4b6a,
<     0xbff966a9, 0xd1757de8, 0x03a03b6e, 0x6d2c202f, 0xdeb80dec,
<     0xb03416ad, 0xa06386a1, 0xceef9de0, 0x7d7bb023, 0x13f7ab62,
<     0xc122ede4, 0xafaef6a5, 0x1c3adb66, 0x72b6c027, 0x807cadd4,
<     0xeef0b695, 0x5d649b56, 0x33e88017, 0xe13dc691, 0x8fb1ddd0,
<     0x3c25f013, 0x52a9eb52, 0x42fe7b5e, 0x2c72601f, 0x9fe64ddc,
<     0xf16a569d, 0x23bf101b, 0x4d330b5a, 0xfea72699, 0x902b3dd8,
<     0xde080681, 0xb0841dc0, 0x03103003, 0x6d9c2b42, 0xbf496dc4,
<     0xd1c57685, 0x62515b46, 0x0cdd4007, 0x1c8ad00b, 0x7206cb4a,
<     0xc192e689, 0xaf1efdc8, 0x7dcbbb4e, 0x1347a00f, 0xa0d38dcc,
<     0xce5f968d},
<    {0x00000000, 0xe71da697, 0x154a4b6f, 0xf257edf8, 0x2a9496de,
<     0xcd893049, 0x3fdeddb1, 0xd8c37b26, 0x55292dbc, 0xb2348b2b,
<     0x406366d3, 0xa77ec044, 0x7fbdbb62, 0x98a01df5, 0x6af7f00d,
<     0x8dea569a, 0xaa525b78, 0x4d4ffdef, 0xbf181017, 0x5805b680,
<     0x80c6cda6, 0x67db6b31, 0x958c86c9, 0x7291205e, 0xff7b76c4,
<     0x1866d053, 0xea313dab, 0x0d2c9b3c, 0xd5efe01a, 0x32f2468d,
<     0xc0a5ab75, 0x27b80de2, 0x8fd5b0b1, 0x68c81626, 0x9a9ffbde,
<     0x7d825d49, 0xa541266f, 0x425c80f8, 0xb00b6d00, 0x5716cb97,
<     0xdafc9d0d, 0x3de13b9a, 0xcfb6d662, 0x28ab70f5, 0xf0680bd3,
<     0x1775ad44, 0xe52240bc, 0x023fe62b, 0x2587ebc9, 0xc29a4d5e,
<     0x30cda0a6, 0xd7d00631, 0x0f137d17, 0xe80edb80, 0x1a593678,
<     0xfd4490ef, 0x70aec675, 0x97b360e2, 0x65e48d1a, 0x82f92b8d,
<     0x5a3a50ab, 0xbd27f63c, 0x4f701bc4, 0xa86dbd53, 0xc4da6723,
<     0x23c7c1b4, 0xd1902c4c, 0x368d8adb, 0xee4ef1fd, 0x0953576a,
<     0xfb04ba92, 0x1c191c05, 0x91f34a9f, 0x76eeec08, 0x84b901f0,
<     0x63a4a767, 0xbb67dc41, 0x5c7a7ad6, 0xae2d972e, 0x493031b9,
<     0x6e883c5b, 0x89959acc, 0x7bc27734, 0x9cdfd1a3, 0x441caa85,
<     0xa3010c12, 0x5156e1ea, 0xb64b477d, 0x3ba111e7, 0xdcbcb770,
<     0x2eeb5a88, 0xc9f6fc1f, 0x11358739, 0xf62821ae, 0x047fcc56,
<     0xe3626ac1, 0x4b0fd792, 0xac127105, 0x5e459cfd, 0xb9583a6a,
<     0x619b414c, 0x8686e7db, 0x74d10a23, 0x93ccacb4, 0x1e26fa2e,
<     0xf93b5cb9, 0x0b6cb141, 0xec7117d6, 0x34b26cf0, 0xd3afca67,
<     0x21f8279f, 0xc6e58108, 0xe15d8cea, 0x06402a7d, 0xf417c785,
<     0x130a6112, 0xcbc91a34, 0x2cd4bca3, 0xde83515b, 0x399ef7cc,
<     0xb474a156, 0x536907c1, 0xa13eea39, 0x46234cae, 0x9ee03788,
<     0x79fd911f, 0x8baa7ce7, 0x6cb7da70, 0x52c5c807, 0xb5d86e90,
<     0x478f8368, 0xa09225ff, 0x78515ed9, 0x9f4cf84e, 0x6d1b15b6,
<     0x8a06b321, 0x07ece5bb, 0xe0f1432c, 0x12a6aed4, 0xf5bb0843,
<     0x2d787365, 0xca65d5f2, 0x3832380a, 0xdf2f9e9d, 0xf897937f,
<     0x1f8a35e8, 0xedddd810, 0x0ac07e87, 0xd20305a1, 0x351ea336,
<     0xc7494ece, 0x2054e859, 0xadbebec3, 0x4aa31854, 0xb8f4f5ac,
<     0x5fe9533b, 0x872a281d, 0x60378e8a, 0x92606372, 0x757dc5e5,
<     0xdd1078b6, 0x3a0dde21, 0xc85a33d9, 0x2f47954e, 0xf784ee68,
<     0x109948ff, 0xe2cea507, 0x05d30390, 0x8839550a, 0x6f24f39d,
<     0x9d731e65, 0x7a6eb8f2, 0xa2adc3d4, 0x45b06543, 0xb7e788bb,
<     0x50fa2e2c, 0x774223ce, 0x905f8559, 0x620868a1, 0x8515ce36,
<     0x5dd6b510, 0xbacb1387, 0x489cfe7f, 0xaf8158e8, 0x226b0e72,
<     0xc576a8e5, 0x3721451d, 0xd03ce38a, 0x08ff98ac, 0xefe23e3b,
<     0x1db5d3c3, 0xfaa87554, 0x961faf24, 0x710209b3, 0x8355e44b,
<     0x644842dc, 0xbc8b39fa, 0x5b969f6d, 0xa9c17295, 0x4edcd402,
<     0xc3368298, 0x242b240f, 0xd67cc9f7, 0x31616f60, 0xe9a21446,
<     0x0ebfb2d1, 0xfce85f29, 0x1bf5f9be, 0x3c4df45c, 0xdb5052cb,
<     0x2907bf33, 0xce1a19a4, 0x16d96282, 0xf1c4c415, 0x039329ed,
<     0xe48e8f7a, 0x6964d9e0, 0x8e797f77, 0x7c2e928f, 0x9b333418,
<     0x43f04f3e, 0xa4ede9a9, 0x56ba0451, 0xb1a7a2c6, 0x19ca1f95,
<     0xfed7b902, 0x0c8054fa, 0xeb9df26d, 0x335e894b, 0xd4432fdc,
<     0x2614c224, 0xc10964b3, 0x4ce33229, 0xabfe94be, 0x59a97946,
<     0xbeb4dfd1, 0x6677a4f7, 0x816a0260, 0x733def98, 0x9420490f,
<     0xb39844ed, 0x5485e27a, 0xa6d20f82, 0x41cfa915, 0x990cd233,
<     0x7e1174a4, 0x8c46995c, 0x6b5b3fcb, 0xe6b16951, 0x01accfc6,
<     0xf3fb223e, 0x14e684a9, 0xcc25ff8f, 0x2b385918, 0xd96fb4e0,
<     0x3e721277},
<    {0x00000000, 0xa58b900e, 0x9066265d, 0x35edb653, 0xfbbd4afb,
<     0x5e36daf5, 0x6bdb6ca6, 0xce50fca8, 0x2c0b93b7, 0x898003b9,
<     0xbc6db5ea, 0x19e625e4, 0xd7b6d94c, 0x723d4942, 0x47d0ff11,
<     0xe25b6f1f, 0x5817276e, 0xfd9cb760, 0xc8710133, 0x6dfa913d,
<     0xa3aa6d95, 0x0621fd9b, 0x33cc4bc8, 0x9647dbc6, 0x741cb4d9,
<     0xd19724d7, 0xe47a9284, 0x41f1028a, 0x8fa1fe22, 0x2a2a6e2c,
<     0x1fc7d87f, 0xba4c4871, 0xb02e4edc, 0x15a5ded2, 0x20486881,
<     0x85c3f88f, 0x4b930427, 0xee189429, 0xdbf5227a, 0x7e7eb274,
<     0x9c25dd6b, 0x39ae4d65, 0x0c43fb36, 0xa9c86b38, 0x67989790,
<     0xc213079e, 0xf7feb1cd, 0x527521c3, 0xe83969b2, 0x4db2f9bc,
<     0x785f4fef, 0xddd4dfe1, 0x13842349, 0xb60fb347, 0x83e20514,
<     0x2669951a, 0xc432fa05, 0x61b96a0b, 0x5454dc58, 0xf1df4c56,
<     0x3f8fb0fe, 0x9a0420f0, 0xafe996a3, 0x0a6206ad, 0xbb2d9bf9,
<     0x1ea60bf7, 0x2b4bbda4, 0x8ec02daa, 0x4090d102, 0xe51b410c,
<     0xd0f6f75f, 0x757d6751, 0x9726084e, 0x32ad9840, 0x07402e13,
<     0xa2cbbe1d, 0x6c9b42b5, 0xc910d2bb, 0xfcfd64e8, 0x5976f4e6,
<     0xe33abc97, 0x46b12c99, 0x735c9aca, 0xd6d70ac4, 0x1887f66c,
<     0xbd0c6662, 0x88e1d031, 0x2d6a403f, 0xcf312f20, 0x6ababf2e,
<     0x5f57097d, 0xfadc9973, 0x348c65db, 0x9107f5d5, 0xa4ea4386,
<     0x0161d388, 0x0b03d525, 0xae88452b, 0x9b65f378, 0x3eee6376,
<     0xf0be9fde, 0x55350fd0, 0x60d8b983, 0xc553298d, 0x27084692,
<     0x8283d69c, 0xb76e60cf, 0x12e5f0c1, 0xdcb50c69, 0x793e9c67,
<     0x4cd32a34, 0xe958ba3a, 0x5314f24b, 0xf69f6245, 0xc372d416,
<     0x66f94418, 0xa8a9b8b0, 0x0d2228be, 0x38cf9eed, 0x9d440ee3,
<     0x7f1f61fc, 0xda94f1f2, 0xef7947a1, 0x4af2d7af, 0x84a22b07,
<     0x2129bb09, 0x14c40d5a, 0xb14f9d54, 0xad2a31b3, 0x08a1a1bd,
<     0x3d4c17ee, 0x98c787e0, 0x56977b48, 0xf31ceb46, 0xc6f15d15,
<     0x637acd1b, 0x8121a204, 0x24aa320a, 0x11478459, 0xb4cc1457,
<     0x7a9ce8ff, 0xdf1778f1, 0xeafacea2, 0x4f715eac, 0xf53d16dd,
<     0x50b686d3, 0x655b3080, 0xc0d0a08e, 0x0e805c26, 0xab0bcc28,
<     0x9ee67a7b, 0x3b6dea75, 0xd936856a, 0x7cbd1564, 0x4950a337,
<     0xecdb3339, 0x228bcf91, 0x87005f9f, 0xb2ede9cc, 0x176679c2,
<     0x1d047f6f, 0xb88fef61, 0x8d625932, 0x28e9c93c, 0xe6b93594,
<     0x4332a59a, 0x76df13c9, 0xd35483c7, 0x310fecd8, 0x94847cd6,
<     0xa169ca85, 0x04e25a8b, 0xcab2a623, 0x6f39362d, 0x5ad4807e,
<     0xff5f1070, 0x45135801, 0xe098c80f, 0xd5757e5c, 0x70feee52,
<     0xbeae12fa, 0x1b2582f4, 0x2ec834a7, 0x8b43a4a9, 0x6918cbb6,
<     0xcc935bb8, 0xf97eedeb, 0x5cf57de5, 0x92a5814d, 0x372e1143,
<     0x02c3a710, 0xa748371e, 0x1607aa4a, 0xb38c3a44, 0x86618c17,
<     0x23ea1c19, 0xedbae0b1, 0x483170bf, 0x7ddcc6ec, 0xd85756e2,
<     0x3a0c39fd, 0x9f87a9f3, 0xaa6a1fa0, 0x0fe18fae, 0xc1b17306,
<     0x643ae308, 0x51d7555b, 0xf45cc555, 0x4e108d24, 0xeb9b1d2a,
<     0xde76ab79, 0x7bfd3b77, 0xb5adc7df, 0x102657d1, 0x25cbe182,
<     0x8040718c, 0x621b1e93, 0xc7908e9d, 0xf27d38ce, 0x57f6a8c0,
<     0x99a65468, 0x3c2dc466, 0x09c07235, 0xac4be23b, 0xa629e496,
<     0x03a27498, 0x364fc2cb, 0x93c452c5, 0x5d94ae6d, 0xf81f3e63,
<     0xcdf28830, 0x6879183e, 0x8a227721, 0x2fa9e72f, 0x1a44517c,
<     0xbfcfc172, 0x719f3dda, 0xd414add4, 0xe1f91b87, 0x44728b89,
<     0xfe3ec3f8, 0x5bb553f6, 0x6e58e5a5, 0xcbd375ab, 0x05838903,
<     0xa008190d, 0x95e5af5e, 0x306e3f50, 0xd235504f, 0x77bec041,
<     0x42537612, 0xe7d8e61c, 0x29881ab4, 0x8c038aba, 0xb9ee3ce9,
<     0x1c65ace7}};
< 
< local const z_word_t FAR crc_braid_big_table[][256] = {
<    {0x0000000000000000, 0x0e908ba500000000, 0x5d26669000000000,
<     0x53b6ed3500000000, 0xfb4abdfb00000000, 0xf5da365e00000000,
<     0xa66cdb6b00000000, 0xa8fc50ce00000000, 0xb7930b2c00000000,
<     0xb903808900000000, 0xeab56dbc00000000, 0xe425e61900000000,
<     0x4cd9b6d700000000, 0x42493d7200000000, 0x11ffd04700000000,
<     0x1f6f5be200000000, 0x6e27175800000000, 0x60b79cfd00000000,
<     0x330171c800000000, 0x3d91fa6d00000000, 0x956daaa300000000,
<     0x9bfd210600000000, 0xc84bcc3300000000, 0xc6db479600000000,
<     0xd9b41c7400000000, 0xd72497d100000000, 0x84927ae400000000,
<     0x8a02f14100000000, 0x22fea18f00000000, 0x2c6e2a2a00000000,
<     0x7fd8c71f00000000, 0x71484cba00000000, 0xdc4e2eb000000000,
<     0xd2dea51500000000, 0x8168482000000000, 0x8ff8c38500000000,
<     0x2704934b00000000, 0x299418ee00000000, 0x7a22f5db00000000,
<     0x74b27e7e00000000, 0x6bdd259c00000000, 0x654dae3900000000,
<     0x36fb430c00000000, 0x386bc8a900000000, 0x9097986700000000,
<     0x9e0713c200000000, 0xcdb1fef700000000, 0xc321755200000000,
<     0xb26939e800000000, 0xbcf9b24d00000000, 0xef4f5f7800000000,
<     0xe1dfd4dd00000000, 0x4923841300000000, 0x47b30fb600000000,
<     0x1405e28300000000, 0x1a95692600000000, 0x05fa32c400000000,
<     0x0b6ab96100000000, 0x58dc545400000000, 0x564cdff100000000,
<     0xfeb08f3f00000000, 0xf020049a00000000, 0xa396e9af00000000,
<     0xad06620a00000000, 0xf99b2dbb00000000, 0xf70ba61e00000000,
<     0xa4bd4b2b00000000, 0xaa2dc08e00000000, 0x02d1904000000000,
<     0x0c411be500000000, 0x5ff7f6d000000000, 0x51677d7500000000,
<     0x4e08269700000000, 0x4098ad3200000000, 0x132e400700000000,
<     0x1dbecba200000000, 0xb5429b6c00000000, 0xbbd210c900000000,
<     0xe864fdfc00000000, 0xe6f4765900000000, 0x97bc3ae300000000,
<     0x992cb14600000000, 0xca9a5c7300000000, 0xc40ad7d600000000,
<     0x6cf6871800000000, 0x62660cbd00000000, 0x31d0e18800000000,
<     0x3f406a2d00000000, 0x202f31cf00000000, 0x2ebfba6a00000000,
<     0x7d09575f00000000, 0x7399dcfa00000000, 0xdb658c3400000000,
<     0xd5f5079100000000, 0x8643eaa400000000, 0x88d3610100000000,
<     0x25d5030b00000000, 0x2b4588ae00000000, 0x78f3659b00000000,
<     0x7663ee3e00000000, 0xde9fbef000000000, 0xd00f355500000000,
<     0x83b9d86000000000, 0x8d2953c500000000, 0x9246082700000000,
<     0x9cd6838200000000, 0xcf606eb700000000, 0xc1f0e51200000000,
<     0x690cb5dc00000000, 0x679c3e7900000000, 0x342ad34c00000000,
<     0x3aba58e900000000, 0x4bf2145300000000, 0x45629ff600000000,
<     0x16d472c300000000, 0x1844f96600000000, 0xb0b8a9a800000000,
<     0xbe28220d00000000, 0xed9ecf3800000000, 0xe30e449d00000000,
<     0xfc611f7f00000000, 0xf2f194da00000000, 0xa14779ef00000000,
<     0xafd7f24a00000000, 0x072ba28400000000, 0x09bb292100000000,
<     0x5a0dc41400000000, 0x549d4fb100000000, 0xb3312aad00000000,
<     0xbda1a10800000000, 0xee174c3d00000000, 0xe087c79800000000,
<     0x487b975600000000, 0x46eb1cf300000000, 0x155df1c600000000,
<     0x1bcd7a6300000000, 0x04a2218100000000, 0x0a32aa2400000000,
<     0x5984471100000000, 0x5714ccb400000000, 0xffe89c7a00000000,
<     0xf17817df00000000, 0xa2cefaea00000000, 0xac5e714f00000000,
<     0xdd163df500000000, 0xd386b65000000000, 0x80305b6500000000,
<     0x8ea0d0c000000000, 0x265c800e00000000, 0x28cc0bab00000000,
<     0x7b7ae69e00000000, 0x75ea6d3b00000000, 0x6a8536d900000000,
<     0x6415bd7c00000000, 0x37a3504900000000, 0x3933dbec00000000,
<     0x91cf8b2200000000, 0x9f5f008700000000, 0xcce9edb200000000,
<     0xc279661700000000, 0x6f7f041d00000000, 0x61ef8fb800000000,
<     0x3259628d00000000, 0x3cc9e92800000000, 0x9435b9e600000000,
<     0x9aa5324300000000, 0xc913df7600000000, 0xc78354d300000000,
<     0xd8ec0f3100000000, 0xd67c849400000000, 0x85ca69a100000000,
<     0x8b5ae20400000000, 0x23a6b2ca00000000, 0x2d36396f00000000,
<     0x7e80d45a00000000, 0x70105fff00000000, 0x0158134500000000,
<     0x0fc898e000000000, 0x5c7e75d500000000, 0x52eefe7000000000,
<     0xfa12aebe00000000, 0xf482251b00000000, 0xa734c82e00000000,
<     0xa9a4438b00000000, 0xb6cb186900000000, 0xb85b93cc00000000,
<     0xebed7ef900000000, 0xe57df55c00000000, 0x4d81a59200000000,
<     0x43112e3700000000, 0x10a7c30200000000, 0x1e3748a700000000,
<     0x4aaa071600000000, 0x443a8cb300000000, 0x178c618600000000,
<     0x191cea2300000000, 0xb1e0baed00000000, 0xbf70314800000000,
<     0xecc6dc7d00000000, 0xe25657d800000000, 0xfd390c3a00000000,
<     0xf3a9879f00000000, 0xa01f6aaa00000000, 0xae8fe10f00000000,
<     0x0673b1c100000000, 0x08e33a6400000000, 0x5b55d75100000000,
<     0x55c55cf400000000, 0x248d104e00000000, 0x2a1d9beb00000000,
<     0x79ab76de00000000, 0x773bfd7b00000000, 0xdfc7adb500000000,
<     0xd157261000000000, 0x82e1cb2500000000, 0x8c71408000000000,
<     0x931e1b6200000000, 0x9d8e90c700000000, 0xce387df200000000,
<     0xc0a8f65700000000, 0x6854a69900000000, 0x66c42d3c00000000,
<     0x3572c00900000000, 0x3be24bac00000000, 0x96e429a600000000,
<     0x9874a20300000000, 0xcbc24f3600000000, 0xc552c49300000000,
<     0x6dae945d00000000, 0x633e1ff800000000, 0x3088f2cd00000000,
<     0x3e18796800000000, 0x2177228a00000000, 0x2fe7a92f00000000,
<     0x7c51441a00000000, 0x72c1cfbf00000000, 0xda3d9f7100000000,
<     0xd4ad14d400000000, 0x871bf9e100000000, 0x898b724400000000,
<     0xf8c33efe00000000, 0xf653b55b00000000, 0xa5e5586e00000000,
<     0xab75d3cb00000000, 0x0389830500000000, 0x0d1908a000000000,
<     0x5eafe59500000000, 0x503f6e3000000000, 0x4f5035d200000000,
<     0x41c0be7700000000, 0x1276534200000000, 0x1ce6d8e700000000,
<     0xb41a882900000000, 0xba8a038c00000000, 0xe93ceeb900000000,
<     0xe7ac651c00000000},
<    {0x0000000000000000, 0x97a61de700000000, 0x6f4b4a1500000000,
<     0xf8ed57f200000000, 0xde96942a00000000, 0x493089cd00000000,
<     0xb1ddde3f00000000, 0x267bc3d800000000, 0xbc2d295500000000,
<     0x2b8b34b200000000, 0xd366634000000000, 0x44c07ea700000000,
<     0x62bbbd7f00000000, 0xf51da09800000000, 0x0df0f76a00000000,
<     0x9a56ea8d00000000, 0x785b52aa00000000, 0xeffd4f4d00000000,
<     0x171018bf00000000, 0x80b6055800000000, 0xa6cdc68000000000,
<     0x316bdb6700000000, 0xc9868c9500000000, 0x5e20917200000000,
<     0xc4767bff00000000, 0x53d0661800000000, 0xab3d31ea00000000,
<     0x3c9b2c0d00000000, 0x1ae0efd500000000, 0x8d46f23200000000,
<     0x75aba5c000000000, 0xe20db82700000000, 0xb1b0d58f00000000,
<     0x2616c86800000000, 0xdefb9f9a00000000, 0x495d827d00000000,
<     0x6f2641a500000000, 0xf8805c4200000000, 0x006d0bb000000000,
<     0x97cb165700000000, 0x0d9dfcda00000000, 0x9a3be13d00000000,
<     0x62d6b6cf00000000, 0xf570ab2800000000, 0xd30b68f000000000,
<     0x44ad751700000000, 0xbc4022e500000000, 0x2be63f0200000000,
<     0xc9eb872500000000, 0x5e4d9ac200000000, 0xa6a0cd3000000000,
<     0x3106d0d700000000, 0x177d130f00000000, 0x80db0ee800000000,
<     0x7836591a00000000, 0xef9044fd00000000, 0x75c6ae7000000000,
<     0xe260b39700000000, 0x1a8de46500000000, 0x8d2bf98200000000,
<     0xab503a5a00000000, 0x3cf627bd00000000, 0xc41b704f00000000,
<     0x53bd6da800000000, 0x2367dac400000000, 0xb4c1c72300000000,
<     0x4c2c90d100000000, 0xdb8a8d3600000000, 0xfdf14eee00000000,
<     0x6a57530900000000, 0x92ba04fb00000000, 0x051c191c00000000,
<     0x9f4af39100000000, 0x08ecee7600000000, 0xf001b98400000000,
<     0x67a7a46300000000, 0x41dc67bb00000000, 0xd67a7a5c00000000,
<     0x2e972dae00000000, 0xb931304900000000, 0x5b3c886e00000000,
<     0xcc9a958900000000, 0x3477c27b00000000, 0xa3d1df9c00000000,
<     0x85aa1c4400000000, 0x120c01a300000000, 0xeae1565100000000,
<     0x7d474bb600000000, 0xe711a13b00000000, 0x70b7bcdc00000000,
<     0x885aeb2e00000000, 0x1ffcf6c900000000, 0x3987351100000000,
<     0xae2128f600000000, 0x56cc7f0400000000, 0xc16a62e300000000,
<     0x92d70f4b00000000, 0x057112ac00000000, 0xfd9c455e00000000,
<     0x6a3a58b900000000, 0x4c419b6100000000, 0xdbe7868600000000,
<     0x230ad17400000000, 0xb4accc9300000000, 0x2efa261e00000000,
<     0xb95c3bf900000000, 0x41b16c0b00000000, 0xd61771ec00000000,
<     0xf06cb23400000000, 0x67caafd300000000, 0x9f27f82100000000,
<     0x0881e5c600000000, 0xea8c5de100000000, 0x7d2a400600000000,
<     0x85c717f400000000, 0x12610a1300000000, 0x341ac9cb00000000,
<     0xa3bcd42c00000000, 0x5b5183de00000000, 0xccf79e3900000000,
<     0x56a174b400000000, 0xc107695300000000, 0x39ea3ea100000000,
<     0xae4c234600000000, 0x8837e09e00000000, 0x1f91fd7900000000,
<     0xe77caa8b00000000, 0x70dab76c00000000, 0x07c8c55200000000,
<     0x906ed8b500000000, 0x68838f4700000000, 0xff2592a000000000,
<     0xd95e517800000000, 0x4ef84c9f00000000, 0xb6151b6d00000000,
<     0x21b3068a00000000, 0xbbe5ec0700000000, 0x2c43f1e000000000,
<     0xd4aea61200000000, 0x4308bbf500000000, 0x6573782d00000000,
<     0xf2d565ca00000000, 0x0a38323800000000, 0x9d9e2fdf00000000,
<     0x7f9397f800000000, 0xe8358a1f00000000, 0x10d8dded00000000,
<     0x877ec00a00000000, 0xa10503d200000000, 0x36a31e3500000000,
<     0xce4e49c700000000, 0x59e8542000000000, 0xc3bebead00000000,
<     0x5418a34a00000000, 0xacf5f4b800000000, 0x3b53e95f00000000,
<     0x1d282a8700000000, 0x8a8e376000000000, 0x7263609200000000,
<     0xe5c57d7500000000, 0xb67810dd00000000, 0x21de0d3a00000000,
<     0xd9335ac800000000, 0x4e95472f00000000, 0x68ee84f700000000,
<     0xff48991000000000, 0x07a5cee200000000, 0x9003d30500000000,
<     0x0a55398800000000, 0x9df3246f00000000, 0x651e739d00000000,
<     0xf2b86e7a00000000, 0xd4c3ada200000000, 0x4365b04500000000,
<     0xbb88e7b700000000, 0x2c2efa5000000000, 0xce23427700000000,
<     0x59855f9000000000, 0xa168086200000000, 0x36ce158500000000,
<     0x10b5d65d00000000, 0x8713cbba00000000, 0x7ffe9c4800000000,
<     0xe85881af00000000, 0x720e6b2200000000, 0xe5a876c500000000,
<     0x1d45213700000000, 0x8ae33cd000000000, 0xac98ff0800000000,
<     0x3b3ee2ef00000000, 0xc3d3b51d00000000, 0x5475a8fa00000000,
<     0x24af1f9600000000, 0xb309027100000000, 0x4be4558300000000,
<     0xdc42486400000000, 0xfa398bbc00000000, 0x6d9f965b00000000,
<     0x9572c1a900000000, 0x02d4dc4e00000000, 0x988236c300000000,
<     0x0f242b2400000000, 0xf7c97cd600000000, 0x606f613100000000,
<     0x4614a2e900000000, 0xd1b2bf0e00000000, 0x295fe8fc00000000,
<     0xbef9f51b00000000, 0x5cf44d3c00000000, 0xcb5250db00000000,
<     0x33bf072900000000, 0xa4191ace00000000, 0x8262d91600000000,
<     0x15c4c4f100000000, 0xed29930300000000, 0x7a8f8ee400000000,
<     0xe0d9646900000000, 0x777f798e00000000, 0x8f922e7c00000000,
<     0x1834339b00000000, 0x3e4ff04300000000, 0xa9e9eda400000000,
<     0x5104ba5600000000, 0xc6a2a7b100000000, 0x951fca1900000000,
<     0x02b9d7fe00000000, 0xfa54800c00000000, 0x6df29deb00000000,
<     0x4b895e3300000000, 0xdc2f43d400000000, 0x24c2142600000000,
<     0xb36409c100000000, 0x2932e34c00000000, 0xbe94feab00000000,
<     0x4679a95900000000, 0xd1dfb4be00000000, 0xf7a4776600000000,
<     0x60026a8100000000, 0x98ef3d7300000000, 0x0f49209400000000,
<     0xed4498b300000000, 0x7ae2855400000000, 0x820fd2a600000000,
<     0x15a9cf4100000000, 0x33d20c9900000000, 0xa474117e00000000,
<     0x5c99468c00000000, 0xcb3f5b6b00000000, 0x5169b1e600000000,
<     0xc6cfac0100000000, 0x3e22fbf300000000, 0xa984e61400000000,
<     0x8fff25cc00000000, 0x1859382b00000000, 0xe0b46fd900000000,
<     0x7712723e00000000},
<    {0x0000000000000000, 0x411b8c6e00000000, 0x823618dd00000000,
<     0xc32d94b300000000, 0x456b416100000000, 0x0470cd0f00000000,
<     0xc75d59bc00000000, 0x8646d5d200000000, 0x8ad682c200000000,
<     0xcbcd0eac00000000, 0x08e09a1f00000000, 0x49fb167100000000,
<     0xcfbdc3a300000000, 0x8ea64fcd00000000, 0x4d8bdb7e00000000,
<     0x0c90571000000000, 0x55ab745e00000000, 0x14b0f83000000000,
<     0xd79d6c8300000000, 0x9686e0ed00000000, 0x10c0353f00000000,
<     0x51dbb95100000000, 0x92f62de200000000, 0xd3eda18c00000000,
<     0xdf7df69c00000000, 0x9e667af200000000, 0x5d4bee4100000000,
<     0x1c50622f00000000, 0x9a16b7fd00000000, 0xdb0d3b9300000000,
<     0x1820af2000000000, 0x593b234e00000000, 0xaa56e9bc00000000,
<     0xeb4d65d200000000, 0x2860f16100000000, 0x697b7d0f00000000,
<     0xef3da8dd00000000, 0xae2624b300000000, 0x6d0bb00000000000,
<     0x2c103c6e00000000, 0x20806b7e00000000, 0x619be71000000000,
<     0xa2b673a300000000, 0xe3adffcd00000000, 0x65eb2a1f00000000,
<     0x24f0a67100000000, 0xe7dd32c200000000, 0xa6c6beac00000000,
<     0xfffd9de200000000, 0xbee6118c00000000, 0x7dcb853f00000000,
<     0x3cd0095100000000, 0xba96dc8300000000, 0xfb8d50ed00000000,
<     0x38a0c45e00000000, 0x79bb483000000000, 0x752b1f2000000000,
<     0x3430934e00000000, 0xf71d07fd00000000, 0xb6068b9300000000,
<     0x30405e4100000000, 0x715bd22f00000000, 0xb276469c00000000,
<     0xf36dcaf200000000, 0x15aba3a200000000, 0x54b02fcc00000000,
<     0x979dbb7f00000000, 0xd686371100000000, 0x50c0e2c300000000,
<     0x11db6ead00000000, 0xd2f6fa1e00000000, 0x93ed767000000000,
<     0x9f7d216000000000, 0xde66ad0e00000000, 0x1d4b39bd00000000,
<     0x5c50b5d300000000, 0xda16600100000000, 0x9b0dec6f00000000,
<     0x582078dc00000000, 0x193bf4b200000000, 0x4000d7fc00000000,
<     0x011b5b9200000000, 0xc236cf2100000000, 0x832d434f00000000,
<     0x056b969d00000000, 0x44701af300000000, 0x875d8e4000000000,
<     0xc646022e00000000, 0xcad6553e00000000, 0x8bcdd95000000000,
<     0x48e04de300000000, 0x09fbc18d00000000, 0x8fbd145f00000000,
<     0xcea6983100000000, 0x0d8b0c8200000000, 0x4c9080ec00000000,
<     0xbffd4a1e00000000, 0xfee6c67000000000, 0x3dcb52c300000000,
<     0x7cd0dead00000000, 0xfa960b7f00000000, 0xbb8d871100000000,
<     0x78a013a200000000, 0x39bb9fcc00000000, 0x352bc8dc00000000,
<     0x743044b200000000, 0xb71dd00100000000, 0xf6065c6f00000000,
<     0x704089bd00000000, 0x315b05d300000000, 0xf276916000000000,
<     0xb36d1d0e00000000, 0xea563e4000000000, 0xab4db22e00000000,
<     0x6860269d00000000, 0x297baaf300000000, 0xaf3d7f2100000000,
<     0xee26f34f00000000, 0x2d0b67fc00000000, 0x6c10eb9200000000,
<     0x6080bc8200000000, 0x219b30ec00000000, 0xe2b6a45f00000000,
<     0xa3ad283100000000, 0x25ebfde300000000, 0x64f0718d00000000,
<     0xa7dde53e00000000, 0xe6c6695000000000, 0x6b50369e00000000,
<     0x2a4bbaf000000000, 0xe9662e4300000000, 0xa87da22d00000000,
<     0x2e3b77ff00000000, 0x6f20fb9100000000, 0xac0d6f2200000000,
<     0xed16e34c00000000, 0xe186b45c00000000, 0xa09d383200000000,
<     0x63b0ac8100000000, 0x22ab20ef00000000, 0xa4edf53d00000000,
<     0xe5f6795300000000, 0x26dbede000000000, 0x67c0618e00000000,
<     0x3efb42c000000000, 0x7fe0ceae00000000, 0xbccd5a1d00000000,
<     0xfdd6d67300000000, 0x7b9003a100000000, 0x3a8b8fcf00000000,
<     0xf9a61b7c00000000, 0xb8bd971200000000, 0xb42dc00200000000,
<     0xf5364c6c00000000, 0x361bd8df00000000, 0x770054b100000000,
<     0xf146816300000000, 0xb05d0d0d00000000, 0x737099be00000000,
<     0x326b15d000000000, 0xc106df2200000000, 0x801d534c00000000,
<     0x4330c7ff00000000, 0x022b4b9100000000, 0x846d9e4300000000,
<     0xc576122d00000000, 0x065b869e00000000, 0x47400af000000000,
<     0x4bd05de000000000, 0x0acbd18e00000000, 0xc9e6453d00000000,
<     0x88fdc95300000000, 0x0ebb1c8100000000, 0x4fa090ef00000000,
<     0x8c8d045c00000000, 0xcd96883200000000, 0x94adab7c00000000,
<     0xd5b6271200000000, 0x169bb3a100000000, 0x57803fcf00000000,
<     0xd1c6ea1d00000000, 0x90dd667300000000, 0x53f0f2c000000000,
<     0x12eb7eae00000000, 0x1e7b29be00000000, 0x5f60a5d000000000,
<     0x9c4d316300000000, 0xdd56bd0d00000000, 0x5b1068df00000000,
<     0x1a0be4b100000000, 0xd926700200000000, 0x983dfc6c00000000,
<     0x7efb953c00000000, 0x3fe0195200000000, 0xfccd8de100000000,
<     0xbdd6018f00000000, 0x3b90d45d00000000, 0x7a8b583300000000,
<     0xb9a6cc8000000000, 0xf8bd40ee00000000, 0xf42d17fe00000000,
<     0xb5369b9000000000, 0x761b0f2300000000, 0x3700834d00000000,
<     0xb146569f00000000, 0xf05ddaf100000000, 0x33704e4200000000,
<     0x726bc22c00000000, 0x2b50e16200000000, 0x6a4b6d0c00000000,
<     0xa966f9bf00000000, 0xe87d75d100000000, 0x6e3ba00300000000,
<     0x2f202c6d00000000, 0xec0db8de00000000, 0xad1634b000000000,
<     0xa18663a000000000, 0xe09defce00000000, 0x23b07b7d00000000,
<     0x62abf71300000000, 0xe4ed22c100000000, 0xa5f6aeaf00000000,
<     0x66db3a1c00000000, 0x27c0b67200000000, 0xd4ad7c8000000000,
<     0x95b6f0ee00000000, 0x569b645d00000000, 0x1780e83300000000,
<     0x91c63de100000000, 0xd0ddb18f00000000, 0x13f0253c00000000,
<     0x52eba95200000000, 0x5e7bfe4200000000, 0x1f60722c00000000,
<     0xdc4de69f00000000, 0x9d566af100000000, 0x1b10bf2300000000,
<     0x5a0b334d00000000, 0x9926a7fe00000000, 0xd83d2b9000000000,
<     0x810608de00000000, 0xc01d84b000000000, 0x0330100300000000,
<     0x422b9c6d00000000, 0xc46d49bf00000000, 0x8576c5d100000000,
<     0x465b516200000000, 0x0740dd0c00000000, 0x0bd08a1c00000000,
<     0x4acb067200000000, 0x89e692c100000000, 0xc8fd1eaf00000000,
<     0x4ebbcb7d00000000, 0x0fa0471300000000, 0xcc8dd3a000000000,
<     0x8d965fce00000000},
<    {0x0000000000000000, 0x1dfdb50100000000, 0x3afa6b0300000000,
<     0x2707de0200000000, 0x74f4d70600000000, 0x6909620700000000,
<     0x4e0ebc0500000000, 0x53f3090400000000, 0xe8e8af0d00000000,
<     0xf5151a0c00000000, 0xd212c40e00000000, 0xcfef710f00000000,
<     0x9c1c780b00000000, 0x81e1cd0a00000000, 0xa6e6130800000000,
<     0xbb1ba60900000000, 0xd0d15f1b00000000, 0xcd2cea1a00000000,
<     0xea2b341800000000, 0xf7d6811900000000, 0xa425881d00000000,
<     0xb9d83d1c00000000, 0x9edfe31e00000000, 0x8322561f00000000,
<     0x3839f01600000000, 0x25c4451700000000, 0x02c39b1500000000,
<     0x1f3e2e1400000000, 0x4ccd271000000000, 0x5130921100000000,
<     0x76374c1300000000, 0x6bcaf91200000000, 0xa0a3bf3600000000,
<     0xbd5e0a3700000000, 0x9a59d43500000000, 0x87a4613400000000,
<     0xd457683000000000, 0xc9aadd3100000000, 0xeead033300000000,
<     0xf350b63200000000, 0x484b103b00000000, 0x55b6a53a00000000,
<     0x72b17b3800000000, 0x6f4cce3900000000, 0x3cbfc73d00000000,
<     0x2142723c00000000, 0x0645ac3e00000000, 0x1bb8193f00000000,
<     0x7072e02d00000000, 0x6d8f552c00000000, 0x4a888b2e00000000,
<     0x57753e2f00000000, 0x0486372b00000000, 0x197b822a00000000,
<     0x3e7c5c2800000000, 0x2381e92900000000, 0x989a4f2000000000,
<     0x8567fa2100000000, 0xa260242300000000, 0xbf9d912200000000,
<     0xec6e982600000000, 0xf1932d2700000000, 0xd694f32500000000,
<     0xcb69462400000000, 0x40477f6d00000000, 0x5dbaca6c00000000,
<     0x7abd146e00000000, 0x6740a16f00000000, 0x34b3a86b00000000,
<     0x294e1d6a00000000, 0x0e49c36800000000, 0x13b4766900000000,
<     0xa8afd06000000000, 0xb552656100000000, 0x9255bb6300000000,
<     0x8fa80e6200000000, 0xdc5b076600000000, 0xc1a6b26700000000,
<     0xe6a16c6500000000, 0xfb5cd96400000000, 0x9096207600000000,
<     0x8d6b957700000000, 0xaa6c4b7500000000, 0xb791fe7400000000,
<     0xe462f77000000000, 0xf99f427100000000, 0xde989c7300000000,
<     0xc365297200000000, 0x787e8f7b00000000, 0x65833a7a00000000,
<     0x4284e47800000000, 0x5f79517900000000, 0x0c8a587d00000000,
<     0x1177ed7c00000000, 0x3670337e00000000, 0x2b8d867f00000000,
<     0xe0e4c05b00000000, 0xfd19755a00000000, 0xda1eab5800000000,
<     0xc7e31e5900000000, 0x9410175d00000000, 0x89eda25c00000000,
<     0xaeea7c5e00000000, 0xb317c95f00000000, 0x080c6f5600000000,
<     0x15f1da5700000000, 0x32f6045500000000, 0x2f0bb15400000000,
<     0x7cf8b85000000000, 0x61050d5100000000, 0x4602d35300000000,
<     0x5bff665200000000, 0x30359f4000000000, 0x2dc82a4100000000,
<     0x0acff44300000000, 0x1732414200000000, 0x44c1484600000000,
<     0x593cfd4700000000, 0x7e3b234500000000, 0x63c6964400000000,
<     0xd8dd304d00000000, 0xc520854c00000000, 0xe2275b4e00000000,
<     0xffdaee4f00000000, 0xac29e74b00000000, 0xb1d4524a00000000,
<     0x96d38c4800000000, 0x8b2e394900000000, 0x808efeda00000000,
<     0x9d734bdb00000000, 0xba7495d900000000, 0xa78920d800000000,
<     0xf47a29dc00000000, 0xe9879cdd00000000, 0xce8042df00000000,
<     0xd37df7de00000000, 0x686651d700000000, 0x759be4d600000000,
<     0x529c3ad400000000, 0x4f618fd500000000, 0x1c9286d100000000,
<     0x016f33d000000000, 0x2668edd200000000, 0x3b9558d300000000,
<     0x505fa1c100000000, 0x4da214c000000000, 0x6aa5cac200000000,
<     0x77587fc300000000, 0x24ab76c700000000, 0x3956c3c600000000,
<     0x1e511dc400000000, 0x03aca8c500000000, 0xb8b70ecc00000000,
<     0xa54abbcd00000000, 0x824d65cf00000000, 0x9fb0d0ce00000000,
<     0xcc43d9ca00000000, 0xd1be6ccb00000000, 0xf6b9b2c900000000,
<     0xeb4407c800000000, 0x202d41ec00000000, 0x3dd0f4ed00000000,
<     0x1ad72aef00000000, 0x072a9fee00000000, 0x54d996ea00000000,
<     0x492423eb00000000, 0x6e23fde900000000, 0x73de48e800000000,
<     0xc8c5eee100000000, 0xd5385be000000000, 0xf23f85e200000000,
<     0xefc230e300000000, 0xbc3139e700000000, 0xa1cc8ce600000000,
<     0x86cb52e400000000, 0x9b36e7e500000000, 0xf0fc1ef700000000,
<     0xed01abf600000000, 0xca0675f400000000, 0xd7fbc0f500000000,
<     0x8408c9f100000000, 0x99f57cf000000000, 0xbef2a2f200000000,
<     0xa30f17f300000000, 0x1814b1fa00000000, 0x05e904fb00000000,
<     0x22eedaf900000000, 0x3f136ff800000000, 0x6ce066fc00000000,
<     0x711dd3fd00000000, 0x561a0dff00000000, 0x4be7b8fe00000000,
<     0xc0c981b700000000, 0xdd3434b600000000, 0xfa33eab400000000,
<     0xe7ce5fb500000000, 0xb43d56b100000000, 0xa9c0e3b000000000,
<     0x8ec73db200000000, 0x933a88b300000000, 0x28212eba00000000,
<     0x35dc9bbb00000000, 0x12db45b900000000, 0x0f26f0b800000000,
<     0x5cd5f9bc00000000, 0x41284cbd00000000, 0x662f92bf00000000,
<     0x7bd227be00000000, 0x1018deac00000000, 0x0de56bad00000000,
<     0x2ae2b5af00000000, 0x371f00ae00000000, 0x64ec09aa00000000,
<     0x7911bcab00000000, 0x5e1662a900000000, 0x43ebd7a800000000,
<     0xf8f071a100000000, 0xe50dc4a000000000, 0xc20a1aa200000000,
<     0xdff7afa300000000, 0x8c04a6a700000000, 0x91f913a600000000,
<     0xb6fecda400000000, 0xab0378a500000000, 0x606a3e8100000000,
<     0x7d978b8000000000, 0x5a90558200000000, 0x476de08300000000,
<     0x149ee98700000000, 0x09635c8600000000, 0x2e64828400000000,
<     0x3399378500000000, 0x8882918c00000000, 0x957f248d00000000,
<     0xb278fa8f00000000, 0xaf854f8e00000000, 0xfc76468a00000000,
<     0xe18bf38b00000000, 0xc68c2d8900000000, 0xdb71988800000000,
<     0xb0bb619a00000000, 0xad46d49b00000000, 0x8a410a9900000000,
<     0x97bcbf9800000000, 0xc44fb69c00000000, 0xd9b2039d00000000,
<     0xfeb5dd9f00000000, 0xe348689e00000000, 0x5853ce9700000000,
<     0x45ae7b9600000000, 0x62a9a59400000000, 0x7f54109500000000,
<     0x2ca7199100000000, 0x315aac9000000000, 0x165d729200000000,
<     0x0ba0c79300000000},
<    {0x0000000000000000, 0x24d9076300000000, 0x48b20fc600000000,
<     0x6c6b08a500000000, 0xd1626e5700000000, 0xf5bb693400000000,
<     0x99d0619100000000, 0xbd0966f200000000, 0xa2c5dcae00000000,
<     0x861cdbcd00000000, 0xea77d36800000000, 0xceaed40b00000000,
<     0x73a7b2f900000000, 0x577eb59a00000000, 0x3b15bd3f00000000,
<     0x1fccba5c00000000, 0x058dc88600000000, 0x2154cfe500000000,
<     0x4d3fc74000000000, 0x69e6c02300000000, 0xd4efa6d100000000,
<     0xf036a1b200000000, 0x9c5da91700000000, 0xb884ae7400000000,
<     0xa748142800000000, 0x8391134b00000000, 0xeffa1bee00000000,
<     0xcb231c8d00000000, 0x762a7a7f00000000, 0x52f37d1c00000000,
<     0x3e9875b900000000, 0x1a4172da00000000, 0x4b1ce0d600000000,
<     0x6fc5e7b500000000, 0x03aeef1000000000, 0x2777e87300000000,
<     0x9a7e8e8100000000, 0xbea789e20000000